this.Coco = function(){
function require(path){ return require[path] }
var exports = require['./parser'] = {}; exports.parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Chain":3,"ID":4,"Parenthetical":5,"List":6,"STRNUM":7,"LITERAL":8,"DOT":9,"Key":10,"CALL(":11,"ArgList":12,"OptComma":13,")CALL":14,"?":15,"LET":16,"Block":17,"WITH":18,"Expression":19,"[":20,"]":21,"{":22,"Properties":23,"}":24,"LABEL":25,"KeyBase":26,"Arg":27,",":28,"NEWLINE":29,"INDENT":30,"DEDENT":31,"...":32,"Lines":33,"Line":34,"PARAM(":35,")PARAM":36,"<-":37,"COMMENT":38,"ASSIGN":39,"IMPORT":40,"CREMENT":41,"UNARY":42,"+-":43,"^":44,"COMPARE":45,"LOGIC":46,"MATH":47,"SHIFT":48,"BITWISE":49,"RELATION":50,"|>":51,"!?":52,"->":53,"FUNCTION":54,"IF":55,"Else":56,"POST_IF":57,"LoopHead":58,"DO":59,"WHILE":60,"HURL":61,"JUMP":62,"SWITCH":63,"Cases":64,"DEFAULT":65,"TRY":66,"CATCH":67,"FINALLY":68,"CLASS":69,"OptExtends":70,"OptImplements":71,"EXTENDS":72,"DECL":73,"Exprs":74,"KeyValue":75,"Property":76,":":77,"(":78,"Body":79,")":80,"ELSE":81,"FOR":82,"OF":83,"BY":84,"IN":85,"OWN":86,"FROM":87,"TO":88,"CASE":89,"IMPLEMENTS":90,"Root":91,"$accept":0,"$end":1},
terminals_: {2:"error",4:"ID",7:"STRNUM",8:"LITERAL",9:"DOT",11:"CALL(",14:")CALL",15:"?",16:"LET",18:"WITH",20:"[",21:"]",22:"{",24:"}",25:"LABEL",28:",",29:"NEWLINE",30:"INDENT",31:"DEDENT",32:"...",35:"PARAM(",36:")PARAM",37:"<-",38:"COMMENT",39:"ASSIGN",40:"IMPORT",41:"CREMENT",42:"UNARY",43:"+-",44:"^",45:"COMPARE",46:"LOGIC",47:"MATH",48:"SHIFT",49:"BITWISE",50:"RELATION",51:"|>",52:"!?",53:"->",54:"FUNCTION",55:"IF",57:"POST_IF",59:"DO",60:"WHILE",61:"HURL",62:"JUMP",63:"SWITCH",65:"DEFAULT",66:"TRY",67:"CATCH",68:"FINALLY",69:"CLASS",72:"EXTENDS",73:"DECL",77:":",78:"(",80:")",81:"ELSE",82:"FOR",83:"OF",84:"BY",85:"IN",86:"OWN",87:"FROM",88:"TO",89:"CASE",90:"IMPLEMENTS"},
productions_: [0,[3,1],[3,1],[3,1],[3,1],[3,1],[3,3],[3,3],[3,5],[3,2],[3,6],[3,3],[6,4],[6,4],[6,5],[6,5],[10,1],[10,1],[26,1],[26,1],[12,0],[12,1],[12,3],[12,4],[12,6],[27,1],[27,2],[27,1],[13,0],[13,1],[33,0],[33,1],[33,3],[33,2],[34,1],[34,2],[34,6],[34,1],[34,1],[17,3],[19,1],[19,3],[19,6],[19,3],[19,6],[19,2],[19,2],[19,3],[19,3],[19,3],[19,2],[19,2],[19,2],[19,5],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,2],[19,6],[19,6],[19,4],[19,3],[19,3],[19,2],[19,4],[19,2],[19,5],[19,1],[19,1],[19,2],[19,3],[19,5],[19,2],[19,4],[19,2],[19,2],[19,4],[19,6],[19,4],[19,5],[19,4],[19,3],[19,2],[19,2],[19,5],[74,1],[74,3],[75,1],[75,1],[75,3],[75,3],[75,5],[75,5],[76,3],[76,6],[76,1],[76,3],[76,2],[76,2],[76,2],[76,1],[23,0],[23,1],[23,3],[23,4],[23,4],[5,3],[79,1],[79,1],[79,3],[56,0],[56,2],[56,5],[58,4],[58,6],[58,4],[58,6],[58,5],[58,7],[58,6],[58,8],[58,2],[58,4],[64,3],[64,4],[70,2],[70,0],[71,2],[71,0],[91,1]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$) {

var $0 = $$.length - 1;
switch (yystate) {
case 1:this.$ = yy.Chain(yy.L(yylineno, yy.Var($$[$0])));
break;
case 2:
case 3:this.$ = yy.Chain($$[$0]);
break;
case 4:
case 5:this.$ = yy.Chain(yy.L(yylineno, yy.Literal($$[$0])));
break;
case 6:
case 7:this.$ = $$[$0-2].add(yy.Index($$[$0], $$[$0-1], true));
break;
case 8:this.$ = $$[$0-4].add(yy.Call($$[$0-2]));
break;
case 9:this.$ = yy.Chain(yy.Existence($$[$0-1].unwrap()));
break;
case 10:this.$ = yy.Chain(yy.Call['let']($$[$0-3], $$[$0]));
break;
case 11:this.$ = yy.Chain(yy.Call.block(yy.Fun([], $$[$0]), [$$[$0-1]], '.call'));
break;
case 12:this.$ = yy.L(yylineno, yy.Arr($$[$0-2]));
break;
case 13:this.$ = yy.L(yylineno, yy.Obj($$[$0-2]));
break;
case 14:this.$ = yy.L(yylineno, yy.Arr($$[$0-3])).named($$[$0]);
break;
case 15:this.$ = yy.L(yylineno, yy.Obj($$[$0-3])).named($$[$0]);
break;
case 18:this.$ = yy.L(yylineno, yy.Key($$[$0]));
break;
case 19:this.$ = yy.L(yylineno, yy.Literal($$[$0]));
break;
case 20:this.$ = [];
break;
case 21:this.$ = [$$[$0]];
break;
case 22:this.$ = $$[$0-2].concat($$[$0]);
break;
case 23:this.$ = $$[$0-3].concat($$[$0]);
break;
case 24:this.$ = $$[$0-5].concat($$[$0-2]);
break;
case 26:this.$ = yy.Splat($$[$0]);
break;
case 27:this.$ = yy.Splat(yy.L(yylineno, yy.Arr()), true);
break;
case 30:this.$ = yy.L(yylineno, yy.Block());
break;
case 31:this.$ = yy.Block($$[$0]);
break;
case 32:this.$ = $$[$0-2].add($$[$0]);
break;
case 35:this.$ = new yy.Cascade($$[$0-1], $$[$0]);
break;
case 36:this.$ = yy.Call.back($$[$0-4], $$[$0], $$[$0-1] === '<~');
break;
case 37:this.$ = yy.L(yylineno, yy.JS($$[$0], true, true));
break;
case 38:this.$ = yy.L(yylineno, yy.Throw(yy.JS("Error('unimplemented')")));
break;
case 39:this.$ = $$[$0-1].chomp();
break;
case 40:this.$ = $$[$0].unwrap();
break;
case 41:this.$ = yy.Assign($$[$0-2].unwrap(), $$[$0], $$[$0-1]);
break;
case 42:this.$ = yy.Assign($$[$0-5].unwrap(), yy.Arr.maybe($$[$0-2]), $$[$0-4]);
break;
case 43:this.$ = yy.Import($$[$0-2], $$[$0], $$[$0-1] === '<<<<');
break;
case 44:this.$ = yy.Import($$[$0-5], yy.Arr.maybe($$[$0-2]), $$[$0-4] === '<<<<');
break;
case 45:this.$ = yy.Unary($$[$0-1], $$[$0].unwrap());
break;
case 46:this.$ = yy.Unary($$[$0], $$[$0-1].unwrap(), true);
break;
case 47:
case 48:
case 49:this.$ = yy.Assign($$[$0].unwrap(), [$$[$0-2]], $$[$0-1]);
break;
case 50:
case 51:
case 52:this.$ = yy.Unary($$[$0-1], $$[$0]);
break;
case 53:this.$ = yy.Unary($$[$0-4], yy.Arr.maybe($$[$0-2]));
break;
case 54:
case 55:
case 56:
case 57:
case 58:
case 59:
case 60:this.$ = yy.Binary($$[$0-1], $$[$0-2], $$[$0]);
break;
case 61:this.$ = '!' === $$[$0-1].charAt(0)
        ? yy.Binary($$[$0-1].slice(1), $$[$0-2], $$[$0]).invert()
        : yy.Binary($$[$0-1], $$[$0-2], $$[$0]);
break;
case 62:this.$ = yy.Block($$[$0-2]).pipe($$[$0]);
break;
case 63:this.$ = yy.Existence($$[$0-1].unwrap(), true);
break;
case 64:this.$ = yy.L(yylineno, yy.Fun($$[$0-4], $$[$0], $$[$0-1] === '~>'));
break;
case 65:this.$ = yy.L(yylineno, yy.Fun($$[$0-3], $$[$0]).named($$[$0-5]));
break;
case 66:this.$ = yy.If($$[$0-2], $$[$0-1], $$[$0-3] === 'unless').addElse($$[$0]);
break;
case 67:this.$ = yy.If($$[$0], $$[$0-2], $$[$0-1] === 'unless');
break;
case 68:this.$ = $$[$0-2].addBody($$[$0-1]).addElse($$[$0]);
break;
case 69:this.$ = $$[$0].addBody(yy.Block($$[$0-1]));
break;
case 70:this.$ = new yy.While($$[$0], $$[$0-1] === 'until', true).addBody($$[$0-2]);
break;
case 71:this.$ = yy.Jump[$$[$0-1]]($$[$0]);
break;
case 72:this.$ = yy.Jump[$$[$0-4]](yy.Arr.maybe($$[$0-2]));
break;
case 73:this.$ = yy.L(yylineno, yy.Jump[$$[$0]]());
break;
case 74:this.$ = yy.L(yylineno, new yy.Jump($$[$0]));
break;
case 75:this.$ = yy.L(yylineno, new yy.Jump($$[$0-1], $$[$0]));
break;
case 76:this.$ = new yy.Switch($$[$0-1], $$[$0]);
break;
case 77:this.$ = new yy.Switch($$[$0-3], $$[$0-2], $$[$0]);
break;
case 78:this.$ = new yy.Switch(null, $$[$0]);
break;
case 79:this.$ = new yy.Switch(null, $$[$0-2], $$[$0]);
break;
case 80:this.$ = new yy.Switch(null, [], $$[$0]);
break;
case 81:this.$ = new yy.Try($$[$0]);
break;
case 82:this.$ = new yy.Try($$[$0-2], $$[$0-1], $$[$0]);
break;
case 83:this.$ = new yy.Try($$[$0-4], $$[$0-3], $$[$0-2], $$[$0]);
break;
case 84:this.$ = new yy.Try($$[$0-2], null, null, $$[$0]);
break;
case 85:this.$ = new yy.Class($$[$0-3].unwrap(), $$[$0-2], $$[$0-1], $$[$0]);
break;
case 86:this.$ = new yy.Class(null, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 87:this.$ = yy.Util.Extends($$[$0-2].unwrap(), $$[$0]);
break;
case 88:
case 89:this.$ = new yy.Label($$[$0-1], $$[$0]);
break;
case 90:this.$ = yy.Decl($$[$0-4], $$[$0-2], yylineno + 1);
break;
case 91:this.$ = [$$[$0]];
break;
case 92:this.$ = $$[$0-2].concat($$[$0]);
break;
case 94:this.$ = yy.Prop(yy.L(yylineno, yy.Key($$[$0], $$[$0] !== 'arguments' && $$[$0] !== 'eval')), yy.L(yylineno, yy.Literal($$[$0])));
break;
case 95:this.$ = yy.Prop($$[$0], yy.Chain($$[$0-2], [yy.Index($$[$0], $$[$0-1])]));
break;
case 96:this.$ = yy.Prop($$[$0], yy.Chain(yy.L(yylineno, yy.Literal($$[$0-2])), [yy.Index($$[$0], $$[$0-1])]));
break;
case 97:this.$ = yy.Prop(yy.L(yylineno, yy.Key($$[$0])), yy.L(yylineno, yy.Obj($$[$0-3]).named($$[$0])));
break;
case 98:this.$ = yy.Prop(yy.L(yylineno, yy.Key($$[$0])), yy.L(yylineno, yy.Arr($$[$0-3]).named($$[$0])));
break;
case 99:this.$ = yy.Prop($$[$0-2], $$[$0]);
break;
case 100:this.$ = yy.Prop($$[$0-5], yy.Arr.maybe($$[$0-2]));
break;
case 102:this.$ = yy.Binary($$[$0-1], $$[$0-2], $$[$0]);
break;
case 103:this.$ = yy.Prop($$[$0].maybeKey(), yy.L(yylineno, yy.Literal($$[$0-1] === '+')));
break;
case 104:this.$ = yy.Prop(yy.L(yylineno, yy.Key($$[$0], true)), yy.L(yylineno, yy.Literal($$[$0-1] === '+')));
break;
case 105:this.$ = yy.Splat($$[$0]);
break;
case 106:this.$ = yy.L(yylineno, yy.JS($$[$0], true, true));
break;
case 107:this.$ = [];
break;
case 108:this.$ = [$$[$0]];
break;
case 109:this.$ = $$[$0-2].concat($$[$0]);
break;
case 110:this.$ = $$[$0-3].concat($$[$0]);
break;
case 111:this.$ = $$[$0-2];
break;
case 112:this.$ = yy.Parens($$[$0-1].chomp().unwrap(), false, $$[$0-2] === '"');
break;
case 115:this.$ = $$[$0-2].add($$[$0]);
break;
case 116:this.$ = null;
break;
case 117:this.$ = $$[$0];
break;
case 118:this.$ = yy.If($$[$0-2], $$[$0-1], $$[$0-3] === 'unless').addElse($$[$0]);
break;
case 119:this.$ = new yy.For({
        item: $$[$0-2].unwrap(),
        index: $$[$0-1],
        source: $$[$0]
      });
break;
case 120:this.$ = new yy.For({
        item: $$[$0-4].unwrap(),
        index: $$[$0-3],
        source: $$[$0-2],
        step: $$[$0]
      });
break;
case 121:this.$ = new yy.For({
        object: true,
        index: $$[$0-2],
        source: $$[$0]
      });
break;
case 122:this.$ = new yy.For({
        object: true,
        index: $$[$0-4],
        item: $$[$0-2].unwrap(),
        source: $$[$0]
      });
break;
case 123:this.$ = new yy.For({
        object: true,
        own: true,
        index: $$[$0-2],
        source: $$[$0]
      });
break;
case 124:this.$ = new yy.For({
        object: true,
        own: true,
        index: $$[$0-4],
        item: $$[$0-2].unwrap(),
        source: $$[$0]
      });
break;
case 125:this.$ = new yy.For({
        index: $$[$0-4],
        from: $$[$0-2],
        op: $$[$0-1],
        to: $$[$0]
      });
break;
case 126:this.$ = new yy.For({
        index: $$[$0-6],
        from: $$[$0-4],
        op: $$[$0-3],
        to: $$[$0-2],
        step: $$[$0]
      });
break;
case 127:this.$ = new yy.While($$[$0], $$[$0-1] === 'until');
break;
case 128:this.$ = new yy.While($$[$0-2], $$[$0-3] === 'until', $$[$0]);
break;
case 129:this.$ = [new yy.Case($$[$0-1], $$[$0])];
break;
case 130:this.$ = $$[$0-3].concat(new yy.Case($$[$0-1], $$[$0]));
break;
case 131:this.$ = $$[$0];
break;
case 132:this.$ = null;
break;
case 133:this.$ = $$[$0];
break;
case 134:this.$ = null;
break;
case 135:return this.$
}
},
table: [{1:[2,30],3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],17:4,18:[1,33],19:7,20:[1,37],22:[1,38],25:[1,25],29:[2,30],30:[1,6],32:[1,10],33:3,34:5,35:[1,8],38:[1,9],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],79:2,82:[1,34],91:1},{1:[3]},{1:[2,135]},{1:[2,113],29:[1,39],80:[2,113]},{1:[2,114],29:[1,40],80:[2,114]},{1:[2,31],29:[2,31],31:[2,31],80:[2,31]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:7,20:[1,37],22:[1,38],25:[1,25],29:[2,30],31:[2,30],32:[1,10],33:41,34:5,35:[1,8],38:[1,9],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{1:[2,34],17:42,29:[2,34],30:[1,6],31:[2,34],40:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],51:[1,52],57:[1,53],58:54,60:[1,35],80:[2,34],82:[1,34]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],12:55,16:[1,32],18:[1,33],19:57,20:[1,37],22:[1,38],25:[1,25],27:56,28:[2,20],29:[2,20],30:[2,20],32:[1,58],35:[1,59],36:[2,20],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{1:[2,37],29:[2,37],31:[2,37],80:[2,37]},{1:[2,38],29:[2,38],31:[2,38],80:[2,38]},{1:[2,40],9:[1,64],11:[1,65],14:[2,40],15:[1,66],21:[2,40],24:[2,40],28:[2,40],29:[2,40],30:[2,40],31:[2,40],36:[2,40],39:[1,60],40:[2,40],41:[1,61],43:[2,40],44:[2,40],45:[2,40],46:[2,40],47:[2,40],48:[2,40],49:[2,40],50:[2,40],51:[2,40],52:[1,62],57:[2,40],60:[2,40],72:[1,63],80:[2,40],82:[2,40],84:[2,40],88:[2,40],89:[2,40],90:[2,40]},{3:67,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],20:[1,37],22:[1,38],78:[1,36]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:69,20:[1,37],22:[1,38],25:[1,25],30:[1,70],35:[1,59],39:[1,68],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:72,20:[1,37],22:[1,38],25:[1,25],35:[1,59],39:[1,71],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:74,20:[1,37],22:[1,38],25:[1,25],35:[1,59],39:[1,73],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{11:[1,75]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:76,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{17:77,30:[1,6]},{17:78,30:[1,6]},{1:[2,73],3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],14:[2,73],16:[1,32],18:[1,33],19:79,20:[1,37],21:[2,73],22:[1,38],24:[2,73],25:[1,25],28:[2,73],29:[2,73],30:[1,80],31:[2,73],35:[1,59],36:[2,73],40:[2,73],41:[1,12],42:[1,13],43:[1,14],44:[1,15],45:[2,73],46:[2,73],47:[2,73],48:[2,73],49:[2,73],50:[2,73],51:[2,73],54:[1,16],55:[1,17],57:[2,73],58:18,59:[1,19],60:[2,73],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],80:[2,73],82:[2,73],84:[2,73],88:[2,73],89:[2,73],90:[2,73]},{1:[2,74],4:[1,81],14:[2,74],21:[2,74],24:[2,74],28:[2,74],29:[2,74],30:[2,74],31:[2,74],36:[2,74],40:[2,74],43:[2,74],44:[2,74],45:[2,74],46:[2,74],47:[2,74],48:[2,74],49:[2,74],50:[2,74],51:[2,74],57:[2,74],60:[2,74],80:[2,74],82:[2,74],84:[2,74],88:[2,74],89:[2,74],90:[2,74]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],17:84,18:[1,33],19:82,20:[1,37],22:[1,38],25:[1,25],30:[1,6],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],64:83,66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34],89:[1,85]},{17:86,30:[1,6]},{3:87,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],20:[1,37],22:[1,38],30:[2,132],70:88,72:[1,89],78:[1,36],90:[2,132]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],17:91,18:[1,33],19:90,20:[1,37],22:[1,38],25:[1,25],30:[1,6],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{30:[1,92]},{1:[2,1],9:[2,1],11:[2,1],14:[2,1],15:[2,1],21:[2,1],24:[2,1],28:[2,1],29:[2,1],30:[2,1],31:[2,1],36:[2,1],39:[2,1],40:[2,1],41:[2,1],43:[2,1],44:[2,1],45:[2,1],46:[2,1],47:[2,1],48:[2,1],49:[2,1],50:[2,1],51:[2,1],52:[2,1],57:[2,1],60:[2,1],72:[2,1],80:[2,1],82:[2,1],84:[2,1],85:[2,1],88:[2,1],89:[2,1],90:[2,1]},{1:[2,2],9:[2,2],11:[2,2],14:[2,2],15:[2,2],21:[2,2],24:[2,2],28:[2,2],29:[2,2],30:[2,2],31:[2,2],36:[2,2],39:[2,2],40:[2,2],41:[2,2],43:[2,2],44:[2,2],45:[2,2],46:[2,2],47:[2,2],48:[2,2],49:[2,2],50:[2,2],51:[2,2],52:[2,2],57:[2,2],60:[2,2],72:[2,2],80:[2,2],82:[2,2],83:[2,2],84:[2,2],85:[2,2],88:[2,2],89:[2,2],90:[2,2]},{1:[2,3],9:[2,3],11:[2,3],14:[2,3],15:[2,3],21:[2,3],24:[2,3],28:[2,3],29:[2,3],30:[2,3],31:[2,3],36:[2,3],39:[2,3],40:[2,3],41:[2,3],43:[2,3],44:[2,3],45:[2,3],46:[2,3],47:[2,3],48:[2,3],49:[2,3],50:[2,3],51:[2,3],52:[2,3],57:[2,3],60:[2,3],72:[2,3],80:[2,3],82:[2,3],83:[2,3],84:[2,3],85:[2,3],88:[2,3],89:[2,3],90:[2,3]},{1:[2,4],9:[2,4],11:[2,4],14:[2,4],15:[2,4],21:[2,4],24:[2,4],28:[2,4],29:[2,4],30:[2,4],31:[2,4],36:[2,4],39:[2,4],40:[2,4],41:[2,4],43:[2,4],44:[2,4],45:[2,4],46:[2,4],47:[2,4],48:[2,4],49:[2,4],50:[2,4],51:[2,4],52:[2,4],57:[2,4],60:[2,4],72:[2,4],80:[2,4],82:[2,4],83:[2,4],84:[2,4],85:[2,4],88:[2,4],89:[2,4],90:[2,4]},{1:[2,5],9:[2,5],11:[2,5],14:[2,5],15:[2,5],21:[2,5],24:[2,5],28:[2,5],29:[2,5],30:[2,5],31:[2,5],36:[2,5],39:[2,5],40:[2,5],41:[2,5],43:[2,5],44:[2,5],45:[2,5],46:[2,5],47:[2,5],48:[2,5],49:[2,5],50:[2,5],51:[2,5],52:[2,5],57:[2,5],60:[2,5],72:[2,5],80:[2,5],82:[2,5],83:[2,5],84:[2,5],85:[2,5],88:[2,5],89:[2,5],90:[2,5]},{11:[1,93]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:94,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{3:95,4:[1,96],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],20:[1,37],22:[1,38],78:[1,36],86:[1,97]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:98,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],17:4,18:[1,33],19:7,20:[1,37],22:[1,38],25:[1,25],29:[2,30],30:[1,6],32:[1,10],33:3,34:5,35:[1,8],38:[1,9],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],79:99,80:[2,30],82:[1,34]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],12:100,16:[1,32],18:[1,33],19:57,20:[1,37],21:[2,20],22:[1,38],25:[1,25],27:56,28:[2,20],29:[2,20],30:[2,20],32:[1,58],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{4:[1,114],5:110,7:[1,115],8:[1,111],10:104,20:[1,113],22:[1,112],23:101,24:[2,107],26:109,28:[2,107],29:[2,107],30:[1,103],32:[1,107],38:[1,108],43:[1,106],75:105,76:102,78:[1,36]},{1:[2,33],3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:7,20:[1,37],22:[1,38],25:[1,25],29:[2,33],31:[2,33],32:[1,10],34:116,35:[1,8],38:[1,9],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],80:[2,33],82:[1,34]},{1:[2,30],3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:7,20:[1,37],22:[1,38],25:[1,25],29:[2,30],32:[1,10],33:117,34:5,35:[1,8],38:[1,9],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],80:[2,30],82:[1,34]},{29:[1,39],31:[1,118]},{1:[2,35],29:[2,35],31:[2,35],80:[2,35]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:119,20:[1,37],22:[1,38],25:[1,25],30:[1,120],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:121,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:122,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:123,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:124,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:125,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:126,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:127,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:128,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:129,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:130,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{1:[2,69],14:[2,69],21:[2,69],24:[2,69],28:[2,69],29:[2,69],30:[2,69],31:[2,69],36:[2,69],40:[2,69],43:[2,69],44:[2,69],45:[2,69],46:[2,69],47:[2,69],48:[2,69],49:[2,69],50:[2,69],51:[2,69],57:[2,69],60:[2,69],80:[2,69],82:[2,69],84:[2,69],88:[2,69],89:[2,69],90:[2,69]},{13:131,28:[1,132],29:[2,28],30:[2,28],36:[2,28]},{14:[2,21],21:[2,21],28:[2,21],29:[2,21],30:[2,21],31:[2,21],36:[2,21]},{14:[2,25],21:[2,25],28:[2,25],29:[2,25],30:[2,25],31:[2,25],36:[2,25],40:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],51:[1,52],57:[1,53],58:54,60:[1,35],82:[1,34]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],14:[2,27],16:[1,32],18:[1,33],19:133,20:[1,37],21:[2,27],22:[1,38],25:[1,25],28:[2,27],29:[2,27],30:[2,27],31:[2,27],35:[1,59],36:[2,27],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],12:134,16:[1,32],18:[1,33],19:57,20:[1,37],22:[1,38],25:[1,25],27:56,28:[2,20],29:[2,20],30:[2,20],32:[1,58],35:[1,59],36:[2,20],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:135,20:[1,37],22:[1,38],25:[1,25],30:[1,136],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{1:[2,46],14:[2,46],21:[2,46],24:[2,46],28:[2,46],29:[2,46],30:[2,46],31:[2,46],36:[2,46],40:[2,46],43:[2,46],44:[2,46],45:[2,46],46:[2,46],47:[2,46],48:[2,46],49:[2,46],50:[2,46],51:[2,46],57:[2,46],60:[2,46],80:[2,46],82:[2,46],84:[2,46],88:[2,46],89:[2,46],90:[2,46]},{1:[2,63],14:[2,63],21:[2,63],24:[2,63],28:[2,63],29:[2,63],30:[2,63],31:[2,63],36:[2,63],40:[2,63],43:[2,63],44:[2,63],45:[2,63],46:[2,63],47:[2,63],48:[2,63],49:[2,63],50:[2,63],51:[2,63],57:[2,63],60:[2,63],80:[2,63],82:[2,63],84:[2,63],88:[2,63],89:[2,63],90:[2,63]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:137,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{4:[1,114],5:110,6:139,7:[1,115],10:138,20:[1,37],22:[1,38],26:109,78:[1,36]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],12:140,14:[2,20],16:[1,32],18:[1,33],19:57,20:[1,37],22:[1,38],25:[1,25],27:56,28:[2,20],29:[2,20],30:[2,20],32:[1,58],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{1:[2,9],9:[2,9],11:[2,9],14:[2,9],15:[2,9],21:[2,9],24:[2,9],28:[2,9],29:[2,9],30:[2,9],31:[2,9],36:[2,9],39:[2,9],40:[2,9],41:[2,9],43:[2,9],44:[2,9],45:[2,9],46:[2,9],47:[2,9],48:[2,9],49:[2,9],50:[2,9],51:[2,9],52:[2,9],57:[2,9],60:[2,9],72:[2,9],80:[2,9],82:[2,9],83:[2,9],84:[2,9],85:[2,9],88:[2,9],89:[2,9],90:[2,9]},{1:[2,45],9:[1,64],11:[1,65],14:[2,45],15:[1,66],21:[2,45],24:[2,45],28:[2,45],29:[2,45],30:[2,45],31:[2,45],36:[2,45],40:[2,45],43:[2,45],44:[2,45],45:[2,45],46:[2,45],47:[2,45],48:[2,45],49:[2,45],50:[2,45],51:[2,45],57:[2,45],60:[2,45],80:[2,45],82:[2,45],84:[2,45],88:[2,45],89:[2,45],90:[2,45]},{3:141,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],20:[1,37],22:[1,38],78:[1,36]},{1:[2,50],14:[2,50],21:[2,50],24:[2,50],28:[2,50],29:[2,50],30:[2,50],31:[2,50],36:[2,50],40:[2,50],43:[2,50],44:[2,50],45:[2,50],46:[2,50],47:[2,50],48:[2,50],49:[2,50],50:[2,50],51:[2,50],57:[2,50],58:54,60:[2,50],80:[2,50],82:[2,50],84:[2,50],88:[2,50],89:[2,50],90:[2,50]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],12:142,16:[1,32],18:[1,33],19:57,20:[1,37],22:[1,38],25:[1,25],27:56,28:[2,20],29:[2,20],30:[2,20],31:[2,20],32:[1,58],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{3:143,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],20:[1,37],22:[1,38],78:[1,36]},{1:[2,51],14:[2,51],21:[2,51],24:[2,51],28:[2,51],29:[2,51],30:[2,51],31:[2,51],36:[2,51],40:[2,51],43:[2,51],44:[2,51],45:[2,51],46:[2,51],47:[2,51],48:[2,51],49:[2,51],50:[2,51],51:[2,51],57:[2,51],58:54,60:[2,51],80:[2,51],82:[2,51],84:[2,51],88:[2,51],89:[2,51],90:[2,51]},{3:144,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],20:[1,37],22:[1,38],78:[1,36]},{1:[2,52],14:[2,52],21:[2,52],24:[2,52],28:[2,52],29:[2,52],30:[2,52],31:[2,52],36:[2,52],40:[2,52],43:[2,52],44:[2,52],45:[2,52],46:[2,52],47:[2,52],48:[2,52],49:[2,52],50:[2,52],51:[2,52],57:[2,52],58:54,60:[2,52],80:[2,52],82:[2,52],84:[2,52],88:[2,52],89:[2,52],90:[2,52]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],12:145,14:[2,20],16:[1,32],18:[1,33],19:57,20:[1,37],22:[1,38],25:[1,25],27:56,28:[2,20],29:[2,20],30:[2,20],32:[1,58],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{17:146,30:[1,6],40:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],51:[1,52],57:[1,53],58:54,60:[1,35],82:[1,34]},{1:[2,116],14:[2,116],21:[2,116],24:[2,116],28:[2,116],29:[2,116],30:[2,116],31:[2,116],36:[2,116],40:[2,116],43:[2,116],44:[2,116],45:[2,116],46:[2,116],47:[2,116],48:[2,116],49:[2,116],50:[2,116],51:[2,116],56:147,57:[2,116],60:[2,116],80:[2,116],81:[1,148],82:[2,116],84:[2,116],88:[2,116],89:[2,116],90:[2,116]},{60:[1,149]},{1:[2,71],14:[2,71],21:[2,71],24:[2,71],28:[2,71],29:[2,71],30:[2,71],31:[2,71],36:[2,71],40:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],51:[2,71],57:[2,71],58:54,60:[2,71],80:[2,71],82:[2,71],84:[2,71],88:[2,71],89:[2,71],90:[2,71]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],12:150,16:[1,32],18:[1,33],19:57,20:[1,37],22:[1,38],25:[1,25],27:56,28:[2,20],29:[2,20],30:[2,20],31:[2,20],32:[1,58],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{1:[2,75],14:[2,75],21:[2,75],24:[2,75],28:[2,75],29:[2,75],30:[2,75],31:[2,75],36:[2,75],40:[2,75],43:[2,75],44:[2,75],45:[2,75],46:[2,75],47:[2,75],48:[2,75],49:[2,75],50:[2,75],51:[2,75],57:[2,75],60:[2,75],80:[2,75],82:[2,75],84:[2,75],88:[2,75],89:[2,75],90:[2,75]},{40:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],51:[1,52],57:[1,53],58:54,60:[1,35],64:151,82:[1,34],89:[1,85]},{1:[2,78],14:[2,78],21:[2,78],24:[2,78],28:[2,78],29:[2,78],30:[2,78],31:[2,78],36:[2,78],40:[2,78],43:[2,78],44:[2,78],45:[2,78],46:[2,78],47:[2,78],48:[2,78],49:[2,78],50:[2,78],51:[2,78],57:[2,78],60:[2,78],65:[1,152],80:[2,78],82:[2,78],84:[2,78],88:[2,78],89:[1,153],90:[2,78]},{1:[2,80],14:[2,80],21:[2,80],24:[2,80],28:[2,80],29:[2,80],30:[2,80],31:[2,80],36:[2,80],40:[2,80],43:[2,80],44:[2,80],45:[2,80],46:[2,80],47:[2,80],48:[2,80],49:[2,80],50:[2,80],51:[2,80],57:[2,80],60:[2,80],80:[2,80],82:[2,80],84:[2,80],88:[2,80],89:[2,80],90:[2,80]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:155,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],74:154,78:[1,36],82:[1,34]},{1:[2,81],14:[2,81],21:[2,81],24:[2,81],28:[2,81],29:[2,81],30:[2,81],31:[2,81],36:[2,81],40:[2,81],43:[2,81],44:[2,81],45:[2,81],46:[2,81],47:[2,81],48:[2,81],49:[2,81],50:[2,81],51:[2,81],57:[2,81],60:[2,81],67:[1,156],68:[1,157],80:[2,81],82:[2,81],84:[2,81],88:[2,81],89:[2,81],90:[2,81]},{9:[1,64],11:[1,65],15:[1,66],30:[2,132],70:158,72:[1,89],90:[2,132]},{30:[2,134],71:159,90:[1,160]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:161,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{1:[2,88],14:[2,88],21:[2,88],24:[2,88],28:[2,88],29:[2,88],30:[2,88],31:[2,88],36:[2,88],40:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],51:[2,88],57:[2,88],58:54,60:[2,88],80:[2,88],82:[2,88],84:[2,88],88:[2,88],89:[2,88],90:[2,88]},{1:[2,89],14:[2,89],21:[2,89],24:[2,89],28:[2,89],29:[2,89],30:[2,89],31:[2,89],36:[2,89],40:[2,89],43:[2,89],44:[2,89],45:[2,89],46:[2,89],47:[2,89],48:[2,89],49:[2,89],50:[2,89],51:[2,89],57:[2,89],60:[2,89],80:[2,89],82:[2,89],84:[2,89],88:[2,89],89:[2,89],90:[2,89]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],12:162,16:[1,32],18:[1,33],19:57,20:[1,37],22:[1,38],25:[1,25],27:56,28:[2,20],29:[2,20],30:[2,20],31:[2,20],32:[1,58],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],12:163,14:[2,20],16:[1,32],18:[1,33],19:57,20:[1,37],22:[1,38],25:[1,25],27:56,28:[2,20],29:[2,20],30:[2,20],32:[1,58],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{17:164,30:[1,6],40:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],51:[1,52],57:[1,53],58:54,60:[1,35],82:[1,34]},{9:[1,64],11:[1,65],15:[1,66],83:[1,165]},{9:[2,1],11:[2,1],15:[2,1],28:[1,167],83:[2,1],85:[1,166],87:[1,168]},{4:[1,169]},{1:[2,127],14:[2,127],21:[2,127],24:[2,127],28:[1,170],29:[2,127],30:[2,127],31:[2,127],36:[2,127],40:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],51:[2,127],57:[2,127],58:54,60:[2,127],80:[2,127],82:[2,127],84:[2,127],88:[2,127],89:[2,127],90:[2,127]},{80:[1,171]},{13:172,21:[2,28],28:[1,132],29:[2,28],30:[2,28]},{13:173,24:[2,28],28:[1,174],29:[2,28]},{24:[2,108],28:[2,108],29:[2,108],31:[2,108]},{4:[1,114],5:110,7:[1,115],8:[1,111],10:104,20:[1,113],22:[1,112],23:175,26:109,28:[2,107],29:[2,107],30:[1,103],31:[2,107],32:[1,107],38:[1,108],43:[1,106],75:105,76:102,78:[1,36]},{9:[1,177],24:[2,93],28:[2,93],29:[2,93],31:[2,93],46:[2,93],77:[1,176]},{24:[2,101],28:[2,101],29:[2,101],31:[2,101],46:[1,178]},{4:[1,114],5:110,7:[1,115],8:[1,180],10:179,26:109,78:[1,36]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:181,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{24:[2,106],28:[2,106],29:[2,106],31:[2,106]},{1:[2,16],9:[2,16],11:[2,16],14:[2,16],15:[2,16],21:[2,16],24:[2,16],28:[2,16],29:[2,16],30:[2,16],31:[2,16],36:[2,16],39:[2,16],40:[2,16],41:[2,16],43:[2,16],44:[2,16],45:[2,16],46:[2,16],47:[2,16],48:[2,16],49:[2,16],50:[2,16],51:[2,16],52:[2,16],57:[2,16],60:[2,16],72:[2,16],77:[2,16],80:[2,16],82:[2,16],83:[2,16],84:[2,16],85:[2,16],88:[2,16],89:[2,16],90:[2,16]},{1:[2,17],9:[2,17],11:[2,17],14:[2,17],15:[2,17],21:[2,17],24:[2,17],28:[2,17],29:[2,17],30:[2,17],31:[2,17],36:[2,17],39:[2,17],40:[2,17],41:[2,17],43:[2,17],44:[2,17],45:[2,17],46:[2,17],47:[2,17],48:[2,17],49:[2,17],50:[2,17],51:[2,17],52:[2,17],57:[2,17],60:[2,17],72:[2,17],77:[2,17],80:[2,17],82:[2,17],83:[2,17],84:[2,17],85:[2,17],88:[2,17],89:[2,17],90:[2,17]},{9:[1,182],24:[2,94],28:[2,94],29:[2,94],31:[2,94],46:[2,94]},{4:[1,114],5:110,7:[1,115],8:[1,111],10:104,20:[1,113],22:[1,112],23:183,24:[2,107],26:109,28:[2,107],29:[2,107],30:[1,103],32:[1,107],38:[1,108],43:[1,106],75:105,76:102,78:[1,36]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],12:184,16:[1,32],18:[1,33],19:57,20:[1,37],21:[2,20],22:[1,38],25:[1,25],27:56,28:[2,20],29:[2,20],30:[2,20],32:[1,58],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{1:[2,18],9:[2,18],11:[2,18],14:[2,18],15:[2,18],21:[2,18],24:[2,18],28:[2,18],29:[2,18],30:[2,18],31:[2,18],36:[2,18],39:[2,18],40:[2,18],41:[2,18],43:[2,18],44:[2,18],45:[2,18],46:[2,18],47:[2,18],48:[2,18],49:[2,18],50:[2,18],51:[2,18],52:[2,18],57:[2,18],60:[2,18],72:[2,18],77:[2,18],80:[2,18],82:[2,18],83:[2,18],84:[2,18],85:[2,18],88:[2,18],89:[2,18],90:[2,18]},{1:[2,19],9:[2,19],11:[2,19],14:[2,19],15:[2,19],21:[2,19],24:[2,19],28:[2,19],29:[2,19],30:[2,19],31:[2,19],36:[2,19],39:[2,19],40:[2,19],41:[2,19],43:[2,19],44:[2,19],45:[2,19],46:[2,19],47:[2,19],48:[2,19],49:[2,19],50:[2,19],51:[2,19],52:[2,19],57:[2,19],60:[2,19],72:[2,19],77:[2,19],80:[2,19],82:[2,19],83:[2,19],84:[2,19],85:[2,19],88:[2,19],89:[2,19],90:[2,19]},{1:[2,32],29:[2,32],31:[2,32],80:[2,32]},{1:[2,115],29:[1,39],80:[2,115]},{1:[2,39],9:[2,39],11:[2,39],14:[2,39],15:[2,39],21:[2,39],24:[2,39],28:[2,39],29:[2,39],30:[2,39],31:[2,39],36:[2,39],39:[2,39],40:[2,39],41:[2,39],43:[2,39],44:[2,39],45:[2,39],46:[2,39],47:[2,39],48:[2,39],49:[2,39],50:[2,39],51:[2,39],52:[2,39],57:[2,39],60:[2,39],65:[2,39],67:[2,39],68:[2,39],72:[2,39],80:[2,39],81:[2,39],82:[2,39],83:[2,39],84:[2,39],85:[2,39],88:[2,39],89:[2,39],90:[2,39]},{1:[2,43],14:[2,43],21:[2,43],24:[2,43],28:[2,43],29:[2,43],30:[2,43],31:[2,43],36:[2,43],40:[2,43],43:[1,44],44:[2,43],45:[2,43],46:[2,43],47:[1,48],48:[2,43],49:[2,43],50:[2,43],51:[2,43],57:[2,43],58:54,60:[2,43],80:[2,43],82:[2,43],84:[2,43],88:[2,43],89:[2,43],90:[2,43]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],12:185,16:[1,32],18:[1,33],19:57,20:[1,37],22:[1,38],25:[1,25],27:56,28:[2,20],29:[2,20],30:[2,20],31:[2,20],32:[1,58],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{1:[2,54],14:[2,54],21:[2,54],24:[2,54],28:[2,54],29:[2,54],30:[2,54],31:[2,54],36:[2,54],40:[2,54],43:[2,54],44:[2,54],45:[2,54],46:[2,54],47:[1,48],48:[2,54],49:[2,54],50:[2,54],51:[2,54],57:[2,54],58:54,60:[2,54],80:[2,54],82:[2,54],84:[2,54],88:[2,54],89:[2,54],90:[2,54]},{1:[2,55],14:[2,55],21:[2,55],24:[2,55],28:[2,55],29:[2,55],30:[2,55],31:[2,55],36:[2,55],40:[1,43],43:[1,44],44:[2,55],45:[1,46],46:[2,55],47:[1,48],48:[1,49],49:[2,55],50:[1,51],51:[2,55],57:[2,55],58:54,60:[2,55],80:[2,55],82:[2,55],84:[2,55],88:[2,55],89:[2,55],90:[2,55]},{1:[2,56],14:[2,56],21:[2,56],24:[2,56],28:[2,56],29:[2,56],30:[2,56],31:[2,56],36:[2,56],40:[1,43],43:[1,44],44:[2,56],45:[1,46],46:[2,56],47:[1,48],48:[1,49],49:[2,56],50:[1,51],51:[2,56],57:[2,56],58:54,60:[2,56],80:[2,56],82:[2,56],84:[2,56],88:[2,56],89:[2,56],90:[2,56]},{1:[2,57],14:[2,57],21:[2,57],24:[2,57],28:[2,57],29:[2,57],30:[2,57],31:[2,57],36:[2,57],40:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],51:[2,57],57:[2,57],58:54,60:[2,57],80:[2,57],82:[2,57],84:[2,57],88:[2,57],89:[2,57],90:[2,57]},{1:[2,58],14:[2,58],21:[2,58],24:[2,58],28:[2,58],29:[2,58],30:[2,58],31:[2,58],36:[2,58],40:[2,58],43:[2,58],44:[2,58],45:[2,58],46:[2,58],47:[2,58],48:[2,58],49:[2,58],50:[2,58],51:[2,58],57:[2,58],58:54,60:[2,58],80:[2,58],82:[2,58],84:[2,58],88:[2,58],89:[2,58],90:[2,58]},{1:[2,59],14:[2,59],21:[2,59],24:[2,59],28:[2,59],29:[2,59],30:[2,59],31:[2,59],36:[2,59],40:[2,59],43:[1,44],44:[2,59],45:[2,59],46:[2,59],47:[1,48],48:[2,59],49:[2,59],50:[2,59],51:[2,59],57:[2,59],58:54,60:[2,59],80:[2,59],82:[2,59],84:[2,59],88:[2,59],89:[2,59],90:[2,59]},{1:[2,60],14:[2,60],21:[2,60],24:[2,60],28:[2,60],29:[2,60],30:[2,60],31:[2,60],36:[2,60],40:[1,43],43:[1,44],44:[2,60],45:[1,46],46:[2,60],47:[1,48],48:[1,49],49:[2,60],50:[1,51],51:[2,60],57:[2,60],58:54,60:[2,60],80:[2,60],82:[2,60],84:[2,60],88:[2,60],89:[2,60],90:[2,60]},{1:[2,61],14:[2,61],21:[2,61],24:[2,61],28:[2,61],29:[2,61],30:[2,61],31:[2,61],36:[2,61],40:[1,43],43:[1,44],44:[2,61],45:[2,61],46:[2,61],47:[1,48],48:[1,49],49:[2,61],50:[2,61],51:[2,61],57:[2,61],58:54,60:[2,61],80:[2,61],82:[2,61],84:[2,61],88:[2,61],89:[2,61],90:[2,61]},{1:[2,62],14:[2,62],21:[2,62],24:[2,62],28:[2,62],29:[2,62],30:[2,62],31:[2,62],36:[2,62],40:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],51:[2,62],57:[2,62],58:54,60:[2,62],80:[2,62],82:[2,62],84:[2,62],88:[2,62],89:[2,62],90:[2,62]},{1:[2,67],14:[2,67],21:[2,67],24:[2,67],28:[2,67],29:[2,67],30:[2,67],31:[2,67],36:[2,67],40:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],51:[2,67],57:[2,67],58:54,60:[2,67],80:[2,67],82:[2,67],84:[2,67],88:[2,67],89:[2,67],90:[2,67]},{29:[1,187],30:[1,188],36:[1,186]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],14:[2,29],16:[1,32],18:[1,33],19:57,20:[1,37],21:[2,29],22:[1,38],25:[1,25],27:189,29:[2,29],30:[2,29],31:[2,29],32:[1,58],35:[1,59],36:[2,29],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{14:[2,26],21:[2,26],28:[2,26],29:[2,26],30:[2,26],31:[2,26],36:[2,26],40:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],51:[1,52],57:[1,53],58:54,60:[1,35],82:[1,34]},{13:190,28:[1,132],29:[2,28],30:[2,28],36:[2,28]},{1:[2,41],14:[2,41],21:[2,41],24:[2,41],28:[2,41],29:[2,41],30:[2,41],31:[2,41],36:[2,41],40:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],51:[2,41],57:[2,41],58:54,60:[2,41],80:[2,41],82:[2,41],84:[2,41],88:[2,41],89:[2,41],90:[2,41]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],12:191,16:[1,32],18:[1,33],19:57,20:[1,37],22:[1,38],25:[1,25],27:56,28:[2,20],29:[2,20],30:[2,20],31:[2,20],32:[1,58],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{1:[2,87],14:[2,87],21:[2,87],24:[2,87],28:[2,87],29:[2,87],30:[2,87],31:[2,87],36:[2,87],40:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],51:[2,87],57:[2,87],58:54,60:[2,87],80:[2,87],82:[2,87],84:[2,87],88:[2,87],89:[2,87],90:[2,87]},{1:[2,6],9:[2,6],11:[2,6],14:[2,6],15:[2,6],21:[2,6],24:[2,6],28:[2,6],29:[2,6],30:[2,6],31:[2,6],36:[2,6],39:[2,6],40:[2,6],41:[2,6],43:[2,6],44:[2,6],45:[2,6],46:[2,6],47:[2,6],48:[2,6],49:[2,6],50:[2,6],51:[2,6],52:[2,6],57:[2,6],60:[2,6],72:[2,6],80:[2,6],82:[2,6],83:[2,6],84:[2,6],85:[2,6],88:[2,6],89:[2,6],90:[2,6]},{1:[2,7],9:[2,7],11:[2,7],14:[2,7],15:[2,7],21:[2,7],24:[2,7],28:[2,7],29:[2,7],30:[2,7],31:[2,7],36:[2,7],39:[2,7],40:[2,7],41:[2,7],43:[2,7],44:[2,7],45:[2,7],46:[2,7],47:[2,7],48:[2,7],49:[2,7],50:[2,7],51:[2,7],52:[2,7],57:[2,7],60:[2,7],72:[2,7],80:[2,7],82:[2,7],83:[2,7],84:[2,7],85:[2,7],88:[2,7],89:[2,7],90:[2,7]},{13:192,14:[2,28],28:[1,132],29:[2,28],30:[2,28]},{1:[2,47],9:[1,64],11:[1,65],14:[2,47],15:[1,66],21:[2,47],24:[2,47],28:[2,47],29:[2,47],30:[2,47],31:[2,47],36:[2,47],40:[2,47],43:[2,47],44:[2,47],45:[2,47],46:[2,47],47:[2,47],48:[2,47],49:[2,47],50:[2,47],51:[2,47],57:[2,47],60:[2,47],80:[2,47],82:[2,47],84:[2,47],88:[2,47],89:[2,47],90:[2,47]},{13:193,28:[1,132],29:[2,28],30:[2,28],31:[2,28]},{1:[2,48],9:[1,64],11:[1,65],14:[2,48],15:[1,66],21:[2,48],24:[2,48],28:[2,48],29:[2,48],30:[2,48],31:[2,48],36:[2,48],40:[2,48],43:[2,48],44:[2,48],45:[2,48],46:[2,48],47:[2,48],48:[2,48],49:[2,48],50:[2,48],51:[2,48],57:[2,48],60:[2,48],80:[2,48],82:[2,48],84:[2,48],88:[2,48],89:[2,48],90:[2,48]},{1:[2,49],9:[1,64],11:[1,65],14:[2,49],15:[1,66],21:[2,49],24:[2,49],28:[2,49],29:[2,49],30:[2,49],31:[2,49],36:[2,49],40:[2,49],43:[2,49],44:[2,49],45:[2,49],46:[2,49],47:[2,49],48:[2,49],49:[2,49],50:[2,49],51:[2,49],57:[2,49],60:[2,49],80:[2,49],82:[2,49],84:[2,49],88:[2,49],89:[2,49],90:[2,49]},{13:194,14:[2,28],28:[1,132],29:[2,28],30:[2,28]},{1:[2,116],14:[2,116],21:[2,116],24:[2,116],28:[2,116],29:[2,116],30:[2,116],31:[2,116],36:[2,116],40:[2,116],43:[2,116],44:[2,116],45:[2,116],46:[2,116],47:[2,116],48:[2,116],49:[2,116],50:[2,116],51:[2,116],56:195,57:[2,116],60:[2,116],80:[2,116],81:[1,148],82:[2,116],84:[2,116],88:[2,116],89:[2,116],90:[2,116]},{1:[2,68],14:[2,68],21:[2,68],24:[2,68],28:[2,68],29:[2,68],30:[2,68],31:[2,68],36:[2,68],40:[2,68],43:[2,68],44:[2,68],45:[2,68],46:[2,68],47:[2,68],48:[2,68],49:[2,68],50:[2,68],51:[2,68],57:[2,68],60:[2,68],80:[2,68],82:[2,68],84:[2,68],88:[2,68],89:[2,68],90:[2,68]},{17:196,30:[1,6],55:[1,197]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:198,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{13:199,28:[1,132],29:[2,28],30:[2,28],31:[2,28]},{1:[2,76],14:[2,76],21:[2,76],24:[2,76],28:[2,76],29:[2,76],30:[2,76],31:[2,76],36:[2,76],40:[2,76],43:[2,76],44:[2,76],45:[2,76],46:[2,76],47:[2,76],48:[2,76],49:[2,76],50:[2,76],51:[2,76],57:[2,76],60:[2,76],65:[1,200],80:[2,76],82:[2,76],84:[2,76],88:[2,76],89:[1,153],90:[2,76]},{17:201,30:[1,6]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:155,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],74:202,78:[1,36],82:[1,34]},{17:203,28:[1,204],30:[1,6]},{28:[2,91],30:[2,91],40:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],51:[1,52],57:[1,53],58:54,60:[1,35],82:[1,34]},{17:205,30:[1,6]},{17:206,30:[1,6]},{30:[2,134],71:207,90:[1,160]},{17:208,30:[1,6]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:155,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],74:209,78:[1,36],82:[1,34]},{30:[2,131],40:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],51:[1,52],57:[1,53],58:54,60:[1,35],82:[1,34],90:[2,131]},{13:210,28:[1,132],29:[2,28],30:[2,28],31:[2,28]},{13:211,14:[2,28],28:[1,132],29:[2,28],30:[2,28]},{1:[2,11],9:[2,11],11:[2,11],14:[2,11],15:[2,11],21:[2,11],24:[2,11],28:[2,11],29:[2,11],30:[2,11],31:[2,11],36:[2,11],39:[2,11],40:[2,11],41:[2,11],43:[2,11],44:[2,11],45:[2,11],46:[2,11],47:[2,11],48:[2,11],49:[2,11],50:[2,11],51:[2,11],52:[2,11],57:[2,11],60:[2,11],72:[2,11],80:[2,11],82:[2,11],83:[2,11],84:[2,11],85:[2,11],88:[2,11],89:[2,11],90:[2,11]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:212,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:213,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{3:214,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],20:[1,37],22:[1,38],78:[1,36]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:215,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{28:[1,217],85:[1,216]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:218,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{1:[2,112],9:[2,112],11:[2,112],14:[2,112],15:[2,112],21:[2,112],24:[2,112],28:[2,112],29:[2,112],30:[2,112],31:[2,112],36:[2,112],39:[2,112],40:[2,112],41:[2,112],43:[2,112],44:[2,112],45:[2,112],46:[2,112],47:[2,112],48:[2,112],49:[2,112],50:[2,112],51:[2,112],52:[2,112],57:[2,112],60:[2,112],72:[2,112],77:[2,112],80:[2,112],82:[2,112],83:[2,112],84:[2,112],85:[2,112],88:[2,112],89:[2,112],90:[2,112]},{21:[1,219],29:[1,187],30:[1,188]},{24:[1,220],29:[1,221]},{4:[1,114],5:110,7:[1,115],8:[1,111],10:104,20:[1,113],22:[1,112],24:[2,29],26:109,29:[2,29],31:[2,29],32:[1,107],38:[1,108],43:[1,106],75:105,76:222,78:[1,36]},{13:223,28:[1,174],29:[2,28],31:[2,28]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:224,20:[1,37],22:[1,38],25:[1,25],30:[1,225],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{4:[1,114],7:[1,115],26:226},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:227,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{24:[2,103],28:[2,103],29:[2,103],31:[2,103]},{24:[2,104],28:[2,104],29:[2,104],31:[2,104]},{24:[2,105],28:[2,105],29:[2,105],31:[2,105],40:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],51:[1,52],57:[1,53],58:54,60:[1,35],82:[1,34]},{4:[1,114],7:[1,115],26:228},{13:229,24:[2,28],28:[1,174],29:[2,28]},{13:230,21:[2,28],28:[1,132],29:[2,28],30:[2,28]},{13:231,28:[1,132],29:[2,28],30:[2,28],31:[2,28]},{37:[1,232],53:[1,233]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:57,20:[1,37],22:[1,38],25:[1,25],27:234,32:[1,58],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],12:235,16:[1,32],18:[1,33],19:57,20:[1,37],22:[1,38],25:[1,25],27:56,28:[2,20],29:[2,20],30:[2,20],31:[2,20],32:[1,58],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{14:[2,22],21:[2,22],28:[2,22],29:[2,22],30:[2,22],31:[2,22],36:[2,22]},{29:[1,187],30:[1,188],36:[1,236]},{13:237,28:[1,132],29:[2,28],30:[2,28],31:[2,28]},{14:[1,238],29:[1,187],30:[1,188]},{29:[1,187],30:[1,188],31:[1,239]},{14:[1,240],29:[1,187],30:[1,188]},{1:[2,66],14:[2,66],21:[2,66],24:[2,66],28:[2,66],29:[2,66],30:[2,66],31:[2,66],36:[2,66],40:[2,66],43:[2,66],44:[2,66],45:[2,66],46:[2,66],47:[2,66],48:[2,66],49:[2,66],50:[2,66],51:[2,66],57:[2,66],60:[2,66],80:[2,66],82:[2,66],84:[2,66],88:[2,66],89:[2,66],90:[2,66]},{1:[2,117],14:[2,117],21:[2,117],24:[2,117],28:[2,117],29:[2,117],30:[2,117],31:[2,117],36:[2,117],40:[2,117],43:[2,117],44:[2,117],45:[2,117],46:[2,117],47:[2,117],48:[2,117],49:[2,117],50:[2,117],51:[2,117],57:[2,117],60:[2,117],80:[2,117],82:[2,117],84:[2,117],88:[2,117],89:[2,117],90:[2,117]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:241,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{1:[2,70],14:[2,70],21:[2,70],24:[2,70],28:[2,70],29:[2,70],30:[2,70],31:[2,70],36:[2,70],40:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],51:[2,70],57:[2,70],58:54,60:[2,70],80:[2,70],82:[2,70],84:[2,70],88:[2,70],89:[2,70],90:[2,70]},{29:[1,187],30:[1,188],31:[1,242]},{17:243,30:[1,6]},{1:[2,79],14:[2,79],21:[2,79],24:[2,79],28:[2,79],29:[2,79],30:[2,79],31:[2,79],36:[2,79],40:[2,79],43:[2,79],44:[2,79],45:[2,79],46:[2,79],47:[2,79],48:[2,79],49:[2,79],50:[2,79],51:[2,79],57:[2,79],60:[2,79],80:[2,79],82:[2,79],84:[2,79],88:[2,79],89:[2,79],90:[2,79]},{17:244,28:[1,204],30:[1,6]},{1:[2,129],14:[2,129],21:[2,129],24:[2,129],28:[2,129],29:[2,129],30:[2,129],31:[2,129],36:[2,129],40:[2,129],43:[2,129],44:[2,129],45:[2,129],46:[2,129],47:[2,129],48:[2,129],49:[2,129],50:[2,129],51:[2,129],57:[2,129],60:[2,129],65:[2,129],80:[2,129],82:[2,129],84:[2,129],88:[2,129],89:[2,129],90:[2,129]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:245,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{1:[2,82],14:[2,82],21:[2,82],24:[2,82],28:[2,82],29:[2,82],30:[2,82],31:[2,82],36:[2,82],40:[2,82],43:[2,82],44:[2,82],45:[2,82],46:[2,82],47:[2,82],48:[2,82],49:[2,82],50:[2,82],51:[2,82],57:[2,82],60:[2,82],68:[1,246],80:[2,82],82:[2,82],84:[2,82],88:[2,82],89:[2,82],90:[2,82]},{1:[2,84],14:[2,84],21:[2,84],24:[2,84],28:[2,84],29:[2,84],30:[2,84],31:[2,84],36:[2,84],40:[2,84],43:[2,84],44:[2,84],45:[2,84],46:[2,84],47:[2,84],48:[2,84],49:[2,84],50:[2,84],51:[2,84],57:[2,84],60:[2,84],80:[2,84],82:[2,84],84:[2,84],88:[2,84],89:[2,84],90:[2,84]},{17:247,30:[1,6]},{1:[2,86],14:[2,86],21:[2,86],24:[2,86],28:[2,86],29:[2,86],30:[2,86],31:[2,86],36:[2,86],40:[2,86],43:[2,86],44:[2,86],45:[2,86],46:[2,86],47:[2,86],48:[2,86],49:[2,86],50:[2,86],51:[2,86],57:[2,86],60:[2,86],80:[2,86],82:[2,86],84:[2,86],88:[2,86],89:[2,86],90:[2,86]},{28:[1,204],30:[2,133]},{29:[1,187],30:[1,188],31:[1,248]},{14:[1,249],29:[1,187],30:[1,188]},{1:[2,119],14:[2,119],21:[2,119],24:[2,119],28:[2,119],29:[2,119],30:[2,119],31:[2,119],36:[2,119],40:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],51:[2,119],57:[2,119],58:54,60:[2,119],80:[2,119],82:[2,119],84:[1,250],88:[2,119],89:[2,119],90:[2,119]},{1:[2,121],14:[2,121],21:[2,121],24:[2,121],28:[2,121],29:[2,121],30:[2,121],31:[2,121],36:[2,121],40:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],51:[2,121],57:[2,121],58:54,60:[2,121],80:[2,121],82:[2,121],84:[2,121],88:[2,121],89:[2,121],90:[2,121]},{9:[1,64],11:[1,65],15:[1,66],85:[1,251]},{40:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],51:[1,52],57:[1,53],58:54,60:[1,35],82:[1,34],88:[1,252]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:253,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{3:254,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],20:[1,37],22:[1,38],78:[1,36]},{1:[2,128],14:[2,128],21:[2,128],24:[2,128],28:[2,128],29:[2,128],30:[2,128],31:[2,128],36:[2,128],40:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],51:[2,128],57:[2,128],58:54,60:[2,128],80:[2,128],82:[2,128],84:[2,128],88:[2,128],89:[2,128],90:[2,128]},{1:[2,12],9:[2,12],11:[2,12],14:[2,12],15:[2,12],21:[2,12],24:[2,12],25:[1,255],28:[2,12],29:[2,12],30:[2,12],31:[2,12],36:[2,12],39:[2,12],40:[2,12],41:[2,12],43:[2,12],44:[2,12],45:[2,12],46:[2,12],47:[2,12],48:[2,12],49:[2,12],50:[2,12],51:[2,12],52:[2,12],57:[2,12],60:[2,12],72:[2,12],80:[2,12],82:[2,12],83:[2,12],84:[2,12],85:[2,12],88:[2,12],89:[2,12],90:[2,12]},{1:[2,13],9:[2,13],11:[2,13],14:[2,13],15:[2,13],21:[2,13],24:[2,13],25:[1,256],28:[2,13],29:[2,13],30:[2,13],31:[2,13],36:[2,13],39:[2,13],40:[2,13],41:[2,13],43:[2,13],44:[2,13],45:[2,13],46:[2,13],47:[2,13],48:[2,13],49:[2,13],50:[2,13],51:[2,13],52:[2,13],57:[2,13],60:[2,13],72:[2,13],80:[2,13],82:[2,13],83:[2,13],84:[2,13],85:[2,13],88:[2,13],89:[2,13],90:[2,13]},{4:[1,114],5:110,7:[1,115],8:[1,111],10:104,20:[1,113],22:[1,112],26:109,32:[1,107],38:[1,108],43:[1,106],75:105,76:257,78:[1,36]},{24:[2,109],28:[2,109],29:[2,109],31:[2,109]},{29:[1,221],31:[1,258]},{24:[2,99],28:[2,99],29:[2,99],31:[2,99],40:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],51:[1,52],57:[1,53],58:54,60:[1,35],82:[1,34]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],12:259,16:[1,32],18:[1,33],19:57,20:[1,37],22:[1,38],25:[1,25],27:56,28:[2,20],29:[2,20],30:[2,20],31:[2,20],32:[1,58],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{24:[2,95],28:[2,95],29:[2,95],31:[2,95],46:[2,95]},{24:[2,102],28:[2,102],29:[2,102],31:[2,102],40:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],51:[1,52],57:[1,53],58:54,60:[1,35],82:[1,34]},{24:[2,96],28:[2,96],29:[2,96],31:[2,96],46:[2,96]},{24:[1,260],29:[1,221]},{21:[1,261],29:[1,187],30:[1,188]},{29:[1,187],30:[1,188],31:[1,262]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:263,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{17:264,30:[1,6]},{14:[2,23],21:[2,23],28:[2,23],29:[2,23],30:[2,23],31:[2,23],36:[2,23]},{13:265,28:[1,132],29:[2,28],30:[2,28],31:[2,28]},{53:[1,233]},{29:[1,187],30:[1,188],31:[1,266]},{1:[2,8],9:[2,8],11:[2,8],14:[2,8],15:[2,8],21:[2,8],24:[2,8],28:[2,8],29:[2,8],30:[2,8],31:[2,8],36:[2,8],39:[2,8],40:[2,8],41:[2,8],43:[2,8],44:[2,8],45:[2,8],46:[2,8],47:[2,8],48:[2,8],49:[2,8],50:[2,8],51:[2,8],52:[2,8],57:[2,8],60:[2,8],72:[2,8],80:[2,8],82:[2,8],83:[2,8],84:[2,8],85:[2,8],88:[2,8],89:[2,8],90:[2,8]},{1:[2,53],14:[2,53],21:[2,53],24:[2,53],28:[2,53],29:[2,53],30:[2,53],31:[2,53],36:[2,53],40:[2,53],43:[2,53],44:[2,53],45:[2,53],46:[2,53],47:[2,53],48:[2,53],49:[2,53],50:[2,53],51:[2,53],57:[2,53],60:[2,53],80:[2,53],82:[2,53],84:[2,53],88:[2,53],89:[2,53],90:[2,53]},{17:267,30:[1,6]},{17:268,30:[1,6],40:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],51:[1,52],57:[1,53],58:54,60:[1,35],82:[1,34]},{1:[2,72],14:[2,72],21:[2,72],24:[2,72],28:[2,72],29:[2,72],30:[2,72],31:[2,72],36:[2,72],40:[2,72],43:[2,72],44:[2,72],45:[2,72],46:[2,72],47:[2,72],48:[2,72],49:[2,72],50:[2,72],51:[2,72],57:[2,72],60:[2,72],80:[2,72],82:[2,72],84:[2,72],88:[2,72],89:[2,72],90:[2,72]},{1:[2,77],14:[2,77],21:[2,77],24:[2,77],28:[2,77],29:[2,77],30:[2,77],31:[2,77],36:[2,77],40:[2,77],43:[2,77],44:[2,77],45:[2,77],46:[2,77],47:[2,77],48:[2,77],49:[2,77],50:[2,77],51:[2,77],57:[2,77],60:[2,77],80:[2,77],82:[2,77],84:[2,77],88:[2,77],89:[2,77],90:[2,77]},{1:[2,130],14:[2,130],21:[2,130],24:[2,130],28:[2,130],29:[2,130],30:[2,130],31:[2,130],36:[2,130],40:[2,130],43:[2,130],44:[2,130],45:[2,130],46:[2,130],47:[2,130],48:[2,130],49:[2,130],50:[2,130],51:[2,130],57:[2,130],60:[2,130],65:[2,130],80:[2,130],82:[2,130],84:[2,130],88:[2,130],89:[2,130],90:[2,130]},{28:[2,92],30:[2,92],40:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],51:[1,52],57:[1,53],58:54,60:[1,35],82:[1,34]},{17:269,30:[1,6]},{1:[2,85],14:[2,85],21:[2,85],24:[2,85],28:[2,85],29:[2,85],30:[2,85],31:[2,85],36:[2,85],40:[2,85],43:[2,85],44:[2,85],45:[2,85],46:[2,85],47:[2,85],48:[2,85],49:[2,85],50:[2,85],51:[2,85],57:[2,85],60:[2,85],80:[2,85],82:[2,85],84:[2,85],88:[2,85],89:[2,85],90:[2,85]},{1:[2,90],14:[2,90],21:[2,90],24:[2,90],28:[2,90],29:[2,90],30:[2,90],31:[2,90],36:[2,90],40:[2,90],43:[2,90],44:[2,90],45:[2,90],46:[2,90],47:[2,90],48:[2,90],49:[2,90],50:[2,90],51:[2,90],57:[2,90],60:[2,90],80:[2,90],82:[2,90],84:[2,90],88:[2,90],89:[2,90],90:[2,90]},{17:270,30:[1,6]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:271,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:272,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:273,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{1:[2,123],14:[2,123],21:[2,123],24:[2,123],28:[2,123],29:[2,123],30:[2,123],31:[2,123],36:[2,123],40:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],51:[2,123],57:[2,123],58:54,60:[2,123],80:[2,123],82:[2,123],84:[2,123],88:[2,123],89:[2,123],90:[2,123]},{9:[1,64],11:[1,65],15:[1,66],85:[1,274]},{1:[2,14],9:[2,14],11:[2,14],14:[2,14],15:[2,14],21:[2,14],24:[2,14],28:[2,14],29:[2,14],30:[2,14],31:[2,14],36:[2,14],39:[2,14],40:[2,14],41:[2,14],43:[2,14],44:[2,14],45:[2,14],46:[2,14],47:[2,14],48:[2,14],49:[2,14],50:[2,14],51:[2,14],52:[2,14],57:[2,14],60:[2,14],72:[2,14],80:[2,14],82:[2,14],83:[2,14],84:[2,14],85:[2,14],88:[2,14],89:[2,14],90:[2,14]},{1:[2,15],9:[2,15],11:[2,15],14:[2,15],15:[2,15],21:[2,15],24:[2,15],28:[2,15],29:[2,15],30:[2,15],31:[2,15],36:[2,15],39:[2,15],40:[2,15],41:[2,15],43:[2,15],44:[2,15],45:[2,15],46:[2,15],47:[2,15],48:[2,15],49:[2,15],50:[2,15],51:[2,15],52:[2,15],57:[2,15],60:[2,15],72:[2,15],80:[2,15],82:[2,15],83:[2,15],84:[2,15],85:[2,15],88:[2,15],89:[2,15],90:[2,15]},{24:[2,110],28:[2,110],29:[2,110],31:[2,110]},{24:[2,111],28:[2,111],29:[2,111],31:[2,111]},{13:275,28:[1,132],29:[2,28],30:[2,28],31:[2,28]},{25:[1,276]},{25:[1,277]},{1:[2,44],14:[2,44],21:[2,44],24:[2,44],28:[2,44],29:[2,44],30:[2,44],31:[2,44],36:[2,44],40:[2,44],43:[2,44],44:[2,44],45:[2,44],46:[2,44],47:[2,44],48:[2,44],49:[2,44],50:[2,44],51:[2,44],57:[2,44],60:[2,44],80:[2,44],82:[2,44],84:[2,44],88:[2,44],89:[2,44],90:[2,44]},{1:[2,36],29:[2,36],31:[2,36],40:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],51:[1,52],57:[1,53],58:54,60:[1,35],80:[2,36],82:[1,34]},{1:[2,64],14:[2,64],21:[2,64],24:[2,64],28:[2,64],29:[2,64],30:[2,64],31:[2,64],36:[2,64],40:[2,64],43:[2,64],44:[2,64],45:[2,64],46:[2,64],47:[2,64],48:[2,64],49:[2,64],50:[2,64],51:[2,64],57:[2,64],60:[2,64],80:[2,64],82:[2,64],84:[2,64],88:[2,64],89:[2,64],90:[2,64]},{29:[1,187],30:[1,188],31:[1,278]},{1:[2,42],14:[2,42],21:[2,42],24:[2,42],28:[2,42],29:[2,42],30:[2,42],31:[2,42],36:[2,42],40:[2,42],43:[2,42],44:[2,42],45:[2,42],46:[2,42],47:[2,42],48:[2,42],49:[2,42],50:[2,42],51:[2,42],57:[2,42],60:[2,42],80:[2,42],82:[2,42],84:[2,42],88:[2,42],89:[2,42],90:[2,42]},{1:[2,65],14:[2,65],21:[2,65],24:[2,65],28:[2,65],29:[2,65],30:[2,65],31:[2,65],36:[2,65],40:[2,65],43:[2,65],44:[2,65],45:[2,65],46:[2,65],47:[2,65],48:[2,65],49:[2,65],50:[2,65],51:[2,65],57:[2,65],60:[2,65],80:[2,65],82:[2,65],84:[2,65],88:[2,65],89:[2,65],90:[2,65]},{1:[2,116],14:[2,116],21:[2,116],24:[2,116],28:[2,116],29:[2,116],30:[2,116],31:[2,116],36:[2,116],40:[2,116],43:[2,116],44:[2,116],45:[2,116],46:[2,116],47:[2,116],48:[2,116],49:[2,116],50:[2,116],51:[2,116],56:279,57:[2,116],60:[2,116],80:[2,116],81:[1,148],82:[2,116],84:[2,116],88:[2,116],89:[2,116],90:[2,116]},{1:[2,83],14:[2,83],21:[2,83],24:[2,83],28:[2,83],29:[2,83],30:[2,83],31:[2,83],36:[2,83],40:[2,83],43:[2,83],44:[2,83],45:[2,83],46:[2,83],47:[2,83],48:[2,83],49:[2,83],50:[2,83],51:[2,83],57:[2,83],60:[2,83],80:[2,83],82:[2,83],84:[2,83],88:[2,83],89:[2,83],90:[2,83]},{1:[2,10],9:[2,10],11:[2,10],14:[2,10],15:[2,10],21:[2,10],24:[2,10],28:[2,10],29:[2,10],30:[2,10],31:[2,10],36:[2,10],39:[2,10],40:[2,10],41:[2,10],43:[2,10],44:[2,10],45:[2,10],46:[2,10],47:[2,10],48:[2,10],49:[2,10],50:[2,10],51:[2,10],52:[2,10],57:[2,10],60:[2,10],72:[2,10],80:[2,10],82:[2,10],83:[2,10],84:[2,10],85:[2,10],88:[2,10],89:[2,10],90:[2,10]},{1:[2,120],14:[2,120],21:[2,120],24:[2,120],28:[2,120],29:[2,120],30:[2,120],31:[2,120],36:[2,120],40:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],51:[2,120],57:[2,120],58:54,60:[2,120],80:[2,120],82:[2,120],84:[2,120],88:[2,120],89:[2,120],90:[2,120]},{1:[2,122],14:[2,122],21:[2,122],24:[2,122],28:[2,122],29:[2,122],30:[2,122],31:[2,122],36:[2,122],40:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],51:[2,122],57:[2,122],58:54,60:[2,122],80:[2,122],82:[2,122],84:[2,122],88:[2,122],89:[2,122],90:[2,122]},{1:[2,125],14:[2,125],21:[2,125],24:[2,125],28:[2,125],29:[2,125],30:[2,125],31:[2,125],36:[2,125],40:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],51:[2,125],57:[2,125],58:54,60:[2,125],80:[2,125],82:[2,125],84:[1,280],88:[2,125],89:[2,125],90:[2,125]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:281,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{29:[1,187],30:[1,188],31:[1,282]},{24:[2,97],28:[2,97],29:[2,97],31:[2,97],46:[2,97]},{24:[2,98],28:[2,98],29:[2,98],31:[2,98],46:[2,98]},{14:[2,24],21:[2,24],28:[2,24],29:[2,24],30:[2,24],31:[2,24],36:[2,24]},{1:[2,118],14:[2,118],21:[2,118],24:[2,118],28:[2,118],29:[2,118],30:[2,118],31:[2,118],36:[2,118],40:[2,118],43:[2,118],44:[2,118],45:[2,118],46:[2,118],47:[2,118],48:[2,118],49:[2,118],50:[2,118],51:[2,118],57:[2,118],60:[2,118],80:[2,118],82:[2,118],84:[2,118],88:[2,118],89:[2,118],90:[2,118]},{3:11,4:[1,27],5:28,6:29,7:[1,30],8:[1,31],16:[1,32],18:[1,33],19:283,20:[1,37],22:[1,38],25:[1,25],35:[1,59],41:[1,12],42:[1,13],43:[1,14],44:[1,15],54:[1,16],55:[1,17],58:18,59:[1,19],60:[1,35],61:[1,20],62:[1,21],63:[1,22],66:[1,23],69:[1,24],73:[1,26],78:[1,36],82:[1,34]},{1:[2,124],14:[2,124],21:[2,124],24:[2,124],28:[2,124],29:[2,124],30:[2,124],31:[2,124],36:[2,124],40:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],51:[2,124],57:[2,124],58:54,60:[2,124],80:[2,124],82:[2,124],84:[2,124],88:[2,124],89:[2,124],90:[2,124]},{24:[2,100],28:[2,100],29:[2,100],31:[2,100]},{1:[2,126],14:[2,126],21:[2,126],24:[2,126],28:[2,126],29:[2,126],30:[2,126],31:[2,126],36:[2,126],40:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],51:[2,126],57:[2,126],58:54,60:[2,126],80:[2,126],82:[2,126],84:[2,126],88:[2,126],89:[2,126],90:[2,126]}],
defaultActions: {2:[2,135]},
parseError: function parseError(str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        vstack = [null], // semantic value stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    //this.reductionCount = this.shiftCount = 0;

    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;

    if (typeof this.yy.parseError === 'function')
        this.parseError = this.yy.parseError;

    function popStack (n) {
        stack.length = stack.length - 2*n;
        vstack.length = vstack.length - n;
    }

    function lex() {
        var token;
        token = self.lexer.lex() || 1; // $end = 1
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    };

    var symbol, preErrorSymbol, state, action, a, r, yyval={},p,len,newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length-1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol == null)
                symbol = lex();
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {

            if (!recovering) {
                // Report error
                expected = [];
                for (p in table[state]) if (this.terminals_[p] && p > 2) {
                    expected.push("'"+this.terminals_[p]+"'");
                }
                var errStr = '';
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+this.lexer.showPosition()+'\nExpecting '+expected.join(', ');
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == 1 /*EOF*/ ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr,
                    {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, expected: expected});
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol == EOF) {
                    throw new Error(errStr || 'Parsing halted.');
                }

                // discard current lookahead and grab another
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                symbol = lex();
            }

            // try to recover from error
            while (1) {
                // check for error recovery rule in this state
                if ((TERROR.toString()) in table[state]) {
                    break;
                }
                if (state == 0) {
                    throw new Error(errStr || 'Parsing halted.');
                }
                popStack(1);
                state = stack[stack.length-1];
            }
            
            preErrorSymbol = symbol; // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {

            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(this.lexer.yytext);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = this.lexer.yyleng;
                    yytext = this.lexer.yytext;
                    yylineno = this.lexer.yylineno;
                    if (recovering > 0)
                        recovering--;
                } else { // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2: // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack);

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3: // accept
                return true;
        }

    }

    return true;
}};

var slice$ = [].slice;
(function(exports){
  var string, TABS, unlines, enlines, enslash, reslash, camelize, character, KEYWORDS_SHARED, KEYWORDS_UNUSED, KEYWORDS, ID, SYMBOL, SPACE, MULTIDENT, SIMPLESTR, JSTOKEN, BSTOKEN, NUMBER, NUMBER_OMIT, REGEX, HEREGEX_OMIT, LASTDENT, INLINEDENT, NONASCII, OPENERS, CLOSERS, INVERSES, CHAIN, ARG, BLOCK_USERS;
  exports.lex = function(code, options){
    return (clone$(exports)).tokenize(code || '', options || {});
  };
  exports.rewrite = function(it){
    var ref$;
    it || (it = this.tokens);
    addImplicitIndentation(it);
    rewriteBlockless(it);
    addImplicitParentheses(it);
    addImplicitBraces(it);
    expandLiterals(it);
    if (((ref$ = it[0]) != null ? ref$[0] : void 8) === 'NEWLINE') {
      it.shift();
    }
    return it;
  };
  exports.tokenize = function(code, o){
    var i, c, that;
    this.inter || (code = code.replace(/[\r\u2028\u2029\uFEFF]/g, ''));
    code = '\n' + code;
    this.tokens = [this.last = ['NEWLINE', '\n', 0]];
    this.line = ~-o.line;
    this.dents = [];
    this.closes = [];
    this.parens = [];
    i = 0;
    while (c = code.charAt(i)) {
      switch (c) {
      case ' ':
        i += this.doSpace(code, i);
        break;
      case '\n':
        i += this.doLine(code, i);
        break;
      case '\\':
        i += this.doBackslash(code, i);
        break;
      case '\'':
      case '"':
        i += this.doString(code, i, c);
        break;
      case "0":
      case "1":
      case "2":
      case "3":
      case "4":
      case "5":
      case "6":
      case "7":
      case "8":
      case "9":
        i += this.doNumber(code, i);
        break;
      case '/':
        switch (code.charAt(i + 1)) {
        case '*':
          i += this.doComment(code, i);
          break;
        case '/':
          i += this.doHeregex(code, i);
          break;
        default:
          i += this.doRegex(code, i) || this.doLiteral(code, i);
        }
        break;
      case '`':
        i += this.doJS(code, i);
        break;
      default:
        i += this.doID(code, i) || this.doLiteral(code, i) || this.doSpace(code, i);
      }
    }
    this.dedent(this.dent);
    if (that = this.closes.pop()) {
      this.carp("missing `" + that + "`");
    }
    if (this.inter) {
      this.rest == null && this.carp('unterminated interpolation');
    } else {
      this.last.spaced = true;
      this.newline();
    }
    o.raw || this.rewrite();
    return this.tokens;
  };
  exports.dent = 0;
  exports.doID = function(code, index){
    var match, input, id, e, last, ref$, tag, that;
    input = (match = (ID.lastIndex = index, ID).exec(code))[0];
    if (!input) {
      return 0;
    }
    id = camelize(match[1]);
    if (NONASCII.test(id)) {
      try {
        Function("var " + id);
      } catch (e$) {
        e = e$;
        this.carp("invalid identifier \"" + id + "\"");
      }
    }
    last = this.last;
    if (match[2] || last[0] === 'DOT' || this.adi()) {
      this.token('ID', of$(id, KEYWORDS) ? (ref$ = Object(id), ref$.reserved = true, ref$) : id);
      if (match[2]) {
        this.token(':', ':');
      }
      return input.length;
    }
    switch (id) {
    case 'true':
    case 'false':
    case 'null':
    case 'void':
    case 'arguments':
    case 'debugger':
      tag = 'LITERAL';
      break;
    case 'new':
    case 'do':
    case 'typeof':
    case 'delete':
      tag = 'UNARY';
      break;
    case 'return':
    case 'throw':
      tag = 'HURL';
      break;
    case 'break':
    case 'continue':
      tag = 'JUMP';
      break;
    case 'this':
    case 'eval':
    case 'super':
      return this.token('LITERAL', id, true).length;
    case 'for':
      this.seenFor = true;
      // fallthrough
    case 'then':
      this.wantBy = false;
      break;
    case 'catch':
    case 'function':
      id = '';
      break;
    case 'in':
    case 'of':
      if (this.seenFor) {
        this.seenFor = false;
        if (id === 'of') {
          id = '';
          this.wantBy = true;
          if (last[0] === 'ID' && (ref$ = this.tokens)[ref$.length - 2][0] !== 'FOR') {
            id = this.tokens.pop()[1];
            if ((ref$ = this.tokens)[ref$.length - 1][0] === ',') {
              this.tokens.pop();
            }
          }
        }
        break;
      }
      // fallthrough
    case 'instanceof':
      if (last[1] === '!') {
        id = this.tokens.pop()[1] + id;
      }
      tag = 'RELATION';
      break;
    case 'not':
      if (last.alias && last[1] === '===') {
        return last[1] = '!==', 3;
      }
      tag = 'UNARY';
      id = '!';
      break;
    case 'and':
    case 'or':
    case 'is':
      this.unline();
      if (id === 'is') {
        this.token('COMPARE', '===');
      } else {
        this.token('LOGIC', id === 'or' ? '||' : '&&');
      }
      this.last.alias = true;
      return id.length;
    case 'unless':
      tag = 'IF';
      break;
    case 'until':
      tag = 'WHILE';
      break;
    case 'import':
      if (able(this.tokens)) {
        id = '<<<';
        break;
      }
      // fallthrough
    case 'export':
    case 'const':
    case 'var':
      tag = 'DECL';
      break;
    default:
      if (of$(id, KEYWORDS_SHARED)) {
        break;
      }
      if (of$(id, KEYWORDS_UNUSED)) {
        this.carp("reserved word \"" + id + "\"");
      }
      if (!last[1] && ((ref$ = last[0]) === 'CATCH' || ref$ === 'FUNCTION' || ref$ === 'LABEL')) {
        last[1] = id;
        last.spaced = false;
        return input.length;
      }
      tag = 'ID';
      switch (id) {
      case 'own':
        if (last[0] === 'FOR') {
          tag = 'OWN';
        }
        break;
      case 'all':
        if (that = last[1] === '<<<' && '<' || last[1] === 'import' && 'All') {
          last[1] += that;
          return 3;
        }
        break;
      case 'from':
        this.forange() && (tag = 'FROM');
        break;
      case 'to':
      case 'til':
        this.forange() && this.tokens.push(['FROM', '', this.line], ['STRNUM', '0', this.line]);
        if (this.seenFrom) {
          this.seenFrom = false;
          this.wantBy = true;
          tag = 'TO';
        } else if (last[0] === 'STRNUM' && !last.callable) {
          last[0] = 'RANGE';
          last.op = id;
          return id.length;
        }
        break;
      case 'by':
        if (last[0] === 'STRNUM' && (ref$ = this.tokens)[ref$.length - 2][0] === 'RANGE') {
          tag = 'RANGE_BY';
        } else {
          this.wantBy && (this.wantBy = !(tag = 'BY'));
        }
        break;
      case 'ever':
        if (last[0] === 'FOR') {
          this.seenFor = false;
          last[0] = 'WHILE';
          tag = 'LITERAL';
          id = 'true';
        }
      }
    }
    tag || (tag = match[1].toUpperCase());
    if (tag === 'RELATION' || tag === 'THEN' || tag === 'ELSE' || tag === 'CASE' || tag === 'DEFAULT' || tag === 'CATCH' || tag === 'FINALLY' || tag === 'IN' || tag === 'OF' || tag === 'FROM' || tag === 'TO' || tag === 'BY' || tag === 'EXTENDS' || tag === 'IMPLEMENTS') {
      this.unline();
    }
    this.token(tag, id);
    return input.length;
  };
  exports.doNumber = function(code, lastIndex){
    var match, input, last, radix, rnum, num, ref$;
    NUMBER.lastIndex = lastIndex;
    if (!(input = (match = NUMBER.exec(code))[0])) {
      return 0;
    }
    last = this.last;
    if (match[5] && (last[0] === 'DOT' || this.adi())) {
      this.token('STRNUM', match[4].replace(NUMBER_OMIT, ''));
      return match[4].length;
    }
    if (radix = match[1]) {
      num = parseInt(rnum = match[2].replace(NUMBER_OMIT, ''), radix);
      if (isNaN(num) || num === parseInt(rnum.slice(0, -1), radix)) {
        this.carp("invalid number " + rnum + " in base " + radix);
      }
      num += '';
    } else {
      num = (match[3] || input).replace(NUMBER_OMIT, '');
      if (match[3] && num.charAt() === '0' && ((ref$ = num.charAt(1)) !== '' && ref$ !== '.')) {
        this.carp("deprecated octal literal " + match[4]);
      }
    }
    if (!last.spaced && last[0] === '+-') {
      last[0] = 'STRNUM';
      last[1] += num;
      return input.length;
    }
    this.strnum(num);
    return input.length;
  };
  exports.doString = function(code, index, q){
    var parts, str;
    if (q === code.charAt(index + 1)) {
      return q === code.charAt(index + 2)
        ? this.doHeredoc(code, index, q)
        : (this.strnum(q + q), 2);
    }
    if (q === '"') {
      parts = this.interpolate(code, index, q);
      this.addInterpolated(parts, unlines);
      return 1 + parts.size;
    }
    str = (SIMPLESTR.lastIndex = index, SIMPLESTR).exec(code)[0] || this.carp('unterminated string');
    this.strnum(unlines(this.string(q, str.slice(1, -1))));
    return this.countLines(str).length;
  };
  exports.doHeredoc = function(code, index, q){
    var end, raw, doc, parts, tabs, i, len$, t;
    if (q === '\'') {
      ~(end = code.indexOf(q + q + q, index + 3)) || this.carp('unterminated heredoc');
      raw = code.slice(index + 3, end);
      doc = raw.replace(LASTDENT, '');
      this.strnum(enlines(this.string(q, lchomp(detab(doc, heretabs(doc))))));
      return this.countLines(raw).length + 6;
    }
    parts = this.interpolate(code, index, q + q + q);
    tabs = heretabs(code.slice(index + 3, index + parts.size).replace(LASTDENT, ''));
    for (i = 0, len$ = parts.length; i < len$; ++i) {
      t = parts[i];
      if (t[0] === 'S') {
        if (i + 1 === parts.length) {
          t[1] = t[1].replace(LASTDENT, '');
        }
        t[1] = detab(t[1], tabs);
        if (i === 0) {
          t[1] = lchomp(t[1]);
        }
      }
    }
    this.addInterpolated(parts, enlines);
    return 3 + parts.size;
  };
  exports.doComment = function(code, index){
    var end, comment, ref$;
    comment = ~(end = code.indexOf('*/', index + 2))
      ? code.slice(index, end + 2)
      : code.slice(index) + '*/';
    if ((ref$ = this.last[0]) === 'NEWLINE' || ref$ === 'INDENT' || ref$ === 'THEN') {
      this.token('COMMENT', detab(comment, this.dent));
      this.token('NEWLINE', '\n');
    }
    return this.countLines(comment).length;
  };
  exports.doJS = function(code, lastIndex){
    var js, ref$;
    JSTOKEN.lastIndex = lastIndex;
    js = JSTOKEN.exec(code)[0] || this.carp('unterminated JS literal');
    this.token('LITERAL', (ref$ = Object(detab(js.slice(1, -1), this.dent)), ref$.js = true, ref$), true);
    return this.countLines(js).length;
  };
  exports.doRegex = function(code, index){
    var divisible, ref$, input, body, flag;
    if (divisible = able(this.tokens) || this.last[0] === 'CREMENT') {
      if (!this.last.spaced || ((ref$ = code.charAt(index + 1)) === ' ' || ref$ === '=')) {
        return 0;
      }
    }
    ref$ = (REGEX.lastIndex = index, REGEX).exec(code), input = ref$[0], body = ref$[1], flag = ref$[2];
    if (input) {
      this.regex(body, flag);
    } else {
      divisible || this.carp('unterminated regex');
    }
    return input.length;
  };
  exports.doHeregex = function(code, index){
    var tokens, last, parts, rest, flag, i, t, dynaflag, len$, val, one;
    tokens = this.tokens, last = this.last;
    parts = this.interpolate(code, index, '//');
    rest = code.slice(index + 2 + parts.size);
    flag = this.validate(/^(?:[gimy]{1,4}|[?$]?)/.exec(rest)[0]);
    if (parts[1]) {
      if (flag === '$') {
        this.adi();
        this.token('(', '"');
      } else {
        tokens.push(['ID', 'RegExp', last[2]], ['CALL(', '', last[2]]);
        if (flag === '?') {
          for (i = parts.length - 1; i >= 0; --i) {
            t = parts[i];
            if (t[0] === 'TOKENS') {
              dynaflag = parts.splice(i, 1)[0][1];
              break;
            }
          }
        }
      }
      for (i = 0, len$ = parts.length; i < len$; ++i) {
        t = parts[i];
        if (t[0] === 'TOKENS') {
          tokens.push.apply(tokens, t[1]);
        } else {
          val = t[1].replace(HEREGEX_OMIT, '');
          if (one && !val) {
            continue;
          }
          one = tokens.push((t[0] = 'STRNUM', t[1] = this.string('\'', enslash(val)), t));
        }
        tokens.push(['+-', '+', tokens[tokens.length - 1][2]]);
      }
      --tokens.length;
      if (dynaflag || flag >= 'g') {
        this.token(',', ',');
        if (dynaflag) {
          tokens.push.apply(tokens, dynaflag);
        } else {
          this.token('STRNUM', "'" + flag + "'");
        }
      }
      this.token(flag === '$' ? ')' : ')CALL', '');
    } else {
      this.regex(reslash(parts[0][1].replace(HEREGEX_OMIT, '')), flag);
    }
    return 2 + parts.size + flag.length;
  };
  exports.doBackslash = function(code, lastIndex){
    var ref$, input, word;
    BSTOKEN.lastIndex = lastIndex;
    ref$ = BSTOKEN.exec(code), input = ref$[0], word = ref$[1];
    if (word) {
      this.strnum(this.string('\'', word));
    } else {
      this.countLines(input);
    }
    return input.length;
  };
  exports.doLine = function(code, index){
    var ref$, input, tabs, length, last, that, delta, tag;
    ref$ = (MULTIDENT.lastIndex = index, MULTIDENT).exec(code), input = ref$[0], tabs = ref$[1];
    length = this.countLines(input).length;
    last = this.last;
    last.eol = true;
    last.spaced = true;
    if (index + length >= code.length) {
      return length;
    }
    if (that = tabs && (this.emender || (this.emender = RegExp('[^' + tabs.charAt() + ']'))).exec(tabs)) {
      this.carp("contaminated indent " + escape(that));
    }
    if (0 > (delta = tabs.length - this.dent)) {
      this.dedent(-delta);
      this.newline();
    } else {
      if ((tag = last[0]) === 'ASSIGN' && ((ref$ = '' + last[1]) !== '=' && ref$ !== ':=' && ref$ !== '+=') || (tag === '+-' || tag === '|>' || tag === 'DOT' || tag === 'LOGIC' || tag === 'MATH' || tag === 'COMPARE' || tag === 'RELATION' || tag === 'SHIFT' || tag === 'BITWISE' || tag === 'IN' || tag === 'OF' || tag === 'TO' || tag === 'BY' || tag === 'FROM' || tag === 'EXTENDS' || tag === 'IMPLEMENTS')) {
        return length;
      }
      if (delta) {
        this.indent(delta);
      } else {
        this.newline();
      }
    }
    this.wantBy = false;
    return length;
  };
  exports.doSpace = function(code, lastIndex){
    var input;
    SPACE.lastIndex = lastIndex;
    if (input = SPACE.exec(code)[0]) {
      this.last.spaced = true;
    }
    return input.length;
  };
  exports.doLiteral = function(code, index){
    var sym, val, tag, ref$, that, up;
    if (!(sym = (SYMBOL.lastIndex = index, SYMBOL).exec(code)[0])) {
      return 0;
    }
    switch (tag = val = sym) {
    case '+':
    case '-':
      tag = '+-';
      break;
    case '&&':
    case '||':
      tag = 'LOGIC';
      break;
    case '?':
    case '!?':
      if (this.last.spaced) {
        tag = 'LOGIC';
      }
      break;
    case '/':
    case '%':
    case '**':
      tag = 'MATH';
      break;
    case '++':
    case '--':
      tag = 'CREMENT';
      break;
    case '<<<':
    case '<<<<':
      tag = 'IMPORT';
      break;
    case ';':
      tag = 'NEWLINE';
      this.wantBy = false;
      break;
    case '.':
      if (this.last[1] === '?') {
        this.last[0] = '?';
      }
      tag = 'DOT';
      break;
    case ',':
      switch (this.last[0]) {
      case ',':
      case '[':
      case '(':
      case 'CALL(':
        this.token('LITERAL', 'void');
        break;
      case 'FOR':
      case 'OWN':
        this.token('ID', '');
      }
      break;
    case '!=':
      if (!(able(this.tokens) || this.last[0] === 'CREMENT')) {
        this.tokens.push(['UNARY', '!', this.line], ['ASSIGN', '=', this.line]);
        return 2;
      }
      // fallthrough
    case '===':
    case '!==':
    case '<':
    case '>':
    case '<=':
    case '>=':
    case '==':
      tag = 'COMPARE';
      break;
    case '<<':
    case '>>':
    case '>>>':
    case '<?':
    case '>?':
      tag = 'SHIFT';
      break;
    case '(':
      if (!(((ref$ = this.last[0]) === 'FUNCTION' || ref$ === 'LET') || this.able(true))) {
        this.token('(', '(');
        this.closes.push(')');
        this.parens.push(this.last);
        return 1;
      }
      tag = 'CALL(';
      this.closes.push(')CALL');
      break;
    case '[':
    case '{':
      this.adi();
      this.closes.push(']}'.charAt(val === '{'));
      break;
    case '}':
      if (this.inter && val !== (ref$ = this.closes)[ref$.length - 1]) {
        this.rest = code.slice(index + 1);
        return 9e9;
      }
      // fallthrough
    case ']':
    case ')':
      if (')' === (tag = val = this.pair(val))) {
        if (this.last === (this.lpar = this.parens.pop())) {
          this.last[0] = 'CALL(';
          tag = ')CALL';
        }
      }
      break;
    case ':':
      switch (this.last[0]) {
      case 'ID':
      case 'STRNUM':
      case ')':
        break;
      case '...':
        this.last[0] = 'STRNUM';
        break;
      default:
        tag = 'LABEL';
        val = '';
      }
      break;
    case '=':
    case ':=':
    case '+=':
    case '-=':
    case '*=':
    case '/=':
    case '%=':
    case '&=':
    case '^=':
    case '|=':
    case '<<=':
    case '>>=':
    case '>>>=':
    case '<?=':
    case '>?=':
    case '**=':
      if (this.last[1] === '.' || this.last[0] === '?' && this.adi()) {
        this.last[1] += val;
        return val.length;
      }
      if (this.last[0] === 'LOGIC') {
        (val = Object(val)).logic = this.tokens.pop()[1];
      } else if ((val === '+=' || val === '-=' || val === '^=') && !able(this.tokens) && ((ref$ = this.last[0]) !== '+-' && ref$ !== '^' && ref$ !== 'UNARY' && ref$ !== 'LABEL')) {
        this.token('UNARY', val.charAt());
        val = '=';
      }
      tag = 'ASSIGN';
      break;
    case '*':
      if (that = ((ref$ = this.last[0]) === 'NEWLINE' || ref$ === 'INDENT' || ref$ === 'THEN') && this.doInlinedent(code, index + 1, 'list')) {
        return that;
      }
      tag = able(this.tokens) || this.last[0] === 'CREMENT' && able(this.tokens, this.tokens.length - 1) ? 'MATH' : 'STRNUM';
      break;
    case '@':
    case '@@':
      this.dotcat(val) || (val === '@'
        ? this.token('LITERAL', 'this', true)
        : this.token('LITERAL', 'arguments'));
      return val.length;
    case '!':
      switch (false) {
      default:
        if (!this.last.spaced) {
          if (able(this.tokens, null, true)) {
            this.token('CALL(', '!');
            this.token(')CALL', ')');
          } else if (this.last[1] === 'typeof') {
            this.last[1] = 'classof';
          } else {
            break;
          }
          return 1;
        }
      }
      tag = 'UNARY';
      break;
    case '&':
      if (!able(this.tokens)) {
        tag = 'LITERAL';
        break;
      }
      // fallthrough
    case '|':
      tag = 'BITWISE';
      break;
    case '~':
      if (this.dotcat(val)) {
        return 1;
      }
      tag = 'UNARY';
      break;
    case '->':
    case '~>':
      up = '->';
      // fallthrough
    case '<-':
    case '<~':
      this.parameters(tag = up || '<-');
      break;
    case '::':
      up = 'prototype';
      // fallthrough
    case '..':
      this.adi();
      tag = 'ID';
      val = up || 'constructor';
      break;
    case '=>':
      this.unline();
      if (that = this.doInlinedent(code, index + 2)) {
        return 1 + that;
      }
      tag = 'THEN';
      break;
    default:
      if ('<' === val.charAt(0)) {
        if (val.length < 4) {
          this.carp('unterminated words');
        }
        this.token('WORDS', val, this.adi());
        return val.length;
      }
    }
    if (tag === ',' || tag === '|>' || tag === 'DOT' || tag === 'LOGIC' || tag === 'COMPARE' || tag === 'MATH' || tag === 'IMPORT' || tag === 'SHIFT' || tag === 'BITWISE') {
      this.unline();
    }
    this.token(tag, val);
    return sym.length;
  };
  exports.doInlinedent = function(code, index, list){
    var d;
    if (!(d = (INLINEDENT.lastIndex = index, INLINEDENT).exec(code)[0].length)) {
      return 0;
    }
    list && this.tokens.push(['LITERAL', 'void', this.line], ['ASSIGN', '=', this.line]);
    this.indent(index + d - this.dent - 2 - code.lastIndexOf('\n', index));
    return d;
  };
  exports.token = function(tag, value, callable){
    this.tokens.push(this.last = [tag, value, this.line]);
    if (callable) {
      this.last.callable = true;
    }
    return value;
  };
  exports.indent = function(delta){
    this.dent += delta;
    this.dents.push(this.token('INDENT', delta));
    this.closes.push('DEDENT');
  };
  exports.dedent = function(debt){
    var dent;
    this.dent -= debt;
    while (debt > 0 && (dent = this.dents.pop())) {
      if (debt < dent && !this.inter) {
        this.carp("unmatched dedent (" + debt + " for " + dent + ")");
      }
      this.pair('DEDENT');
      debt -= typeof dent === 'number' ? this.token('DEDENT', dent) : dent;
    }
  };
  exports.newline = function(){
    var ref$;
    this.last[1] === '\n' || this.tokens.push(this.last = (ref$ = ['NEWLINE', '\n', this.line], ref$.spaced = true, ref$));
  };
  exports.unline = function(){
    var ref$;
    if (!this.tokens[1]) {
      return;
    }
    switch (this.last[0]) {
    case 'INDENT':
      (ref$ = this.dents)[ref$.length - 1] += '';
      // fallthrough
    case 'NEWLINE':
      this.tokens.length--;
    }
  };
  exports.parameters = function(arrow){
    var i, ref$, t, ref1$;
    if (this.last[0] === ')' && ')' === this.last[1]) {
      this.lpar[0] = 'PARAM(';
      this.last[0] = ')PARAM';
      return;
    }
    if (arrow === '->') {
      this.token('PARAM(', '');
    } else {
      for (i = (ref$ = this.tokens).length - 1; i >= 0; --i) {
        t = ref$[i];
        if ((ref1$ = t[0]) === 'NEWLINE' || ref1$ === 'INDENT' || ref1$ === 'THEN' || ref1$ === '(') {
          break;
        }
      }
      this.tokens.splice(i + 1, 0, ['PARAM(', '', t[2]]);
    }
    this.token(')PARAM', '');
  };
  exports.interpolate = function(str, idx, end){
    var parts, end0, pos, i, ch, id, stringified, length, e, delta, nested, ref$, clone;
    parts = [];
    end0 = end.charAt(0);
    pos = 0;
    i = -1;
    str = str.slice(idx + end.length);
    while (ch = str.charAt(++i)) {
      switch (ch) {
      case end0:
        if (end !== str.slice(i, i + end.length)) {
          continue;
        }
        parts.push(['S', this.countLines(str.slice(0, i)), this.line]);
        return parts.size = pos + i + end.length, parts;
      case '#':
        if (!((id = (ID.lastIndex = i + 1, ID).exec(str)[1]) || '{' === str.charAt(i + 1))) {
          continue;
        }
        break;
      case '\\':
        ++i;
        // fallthrough
      default:
        continue;
      }
      if (i || nested && !stringified) {
        stringified = parts.push(['S', this.countLines(str.slice(0, i)), this.line]);
      }
      if (id) {
        length = id.length;
        if (id !== 'this') {
          id = camelize(id);
          try {
            Function("'use strict'; var " + id);
          } catch (e$) {
            e = e$;
            this.carp("invalid variable interpolation \"" + id + "\"");
          }
        }
        str = str.slice(delta = i + 1 + length);
        parts.push(['TOKENS', nested = [['ID', id, this.line]]]);
      } else {
        clone = (ref$ = clone$(exports), ref$.inter = true, ref$.emender = this.emender, ref$);
        nested = clone.tokenize(str.slice(i + 2), {
          line: this.line,
          raw: true
        });
        delta = str.length - clone.rest.length;
        str = clone.rest, this.line = clone.line;
        while (((ref$ = nested[0]) != null ? ref$[0] : void 8) === 'NEWLINE') {
          nested.shift();
        }
        if (nested.length) {
          nested.unshift(['(', '(', nested[0][2]]);
          nested.push([')', ')', this.line]);
          parts.push(['TOKENS', nested]);
        }
      }
      pos += delta;
      i = -1;
    }
    this.carp("missing `" + end + "`");
  };
  exports.addInterpolated = function(parts, nlines){
    var tokens, last, ref$, left, right, joint, callable, i, len$, t;
    if (!parts[1]) {
      return this.strnum(nlines(this.string('"', parts[0][1])));
    }
    tokens = this.tokens, last = this.last;
    ref$ = !last.spaced && last[1] === '%'
      ? (--tokens.length, this.last = last = tokens[tokens.length - 1], ['[', ']', [',', ',']])
      : ['(', ')', ['+-', '+']], left = ref$[0], right = ref$[1], joint = ref$[2];
    callable = this.adi();
    tokens.push([left, '"', last[2]]);
    for (i = 0, len$ = parts.length; i < len$; ++i) {
      t = parts[i];
      if (t[0] === 'TOKENS') {
        tokens.push.apply(tokens, t[1]);
      } else {
        if (i > 1 && !t[1]) {
          continue;
        }
        tokens.push(['STRNUM', nlines(this.string('"', t[1])), t[2]]);
      }
      tokens.push(joint.concat(tokens[tokens.length - 1][2]));
    }
    --tokens.length;
    this.token(right, '', callable);
  };
  exports.strnum = function(it){
    this.token('STRNUM', it, this.adi() || this.last[0] === 'DOT');
  };
  exports.regex = function(body, flag){
    var e;
    try {
      RegExp(body);
    } catch (e$) {
      e = e$;
      this.carp(e.message);
    }
    if (flag === '$') {
      return this.strnum(this.string('\'', enslash(body)));
    }
    return this.token('LITERAL', "/" + (body || '(?:)') + "/" + this.validate(flag));
  };
  exports.adi = function(){
    if (this.last.spaced) {
      return;
    }
    if (this.last[0] === '!?') {
      this.last[0] = 'CALL(';
      this.tokens.push([')CALL', '', this.line], ['?', '?', this.line]);
    }
    if (able(this.tokens)) {
      return this.token('DOT', '.');
    }
  };
  exports.dotcat = function(it){
    if (this.last[1] === '.' || this.adi()) {
      return this.last[1] += it;
    }
  };
  exports.pair = function(it){
    var ref$, wanted;
    if (!(it === (wanted = (ref$ = this.closes)[ref$.length - 1]) || ')CALL' === wanted && it === ')')) {
      if ('DEDENT' !== wanted) {
        this.carp("unmatched `" + it + "`");
      }
      this.dedent((ref$ = this.dents)[ref$.length - 1]);
      return this.pair(it);
    }
    this.unline();
    return this.closes.pop();
  };
  exports.able = function(call){
    return !this.last.spaced && able(this.tokens, null, call);
  };
  exports.countLines = function(it){
    var pos;
    while (pos = 1 + it.indexOf('\n', pos)) {
      ++this.line;
    }
    return it;
  };
  exports.forange = function(){
    var ref$, ref1$;
    if (((ref$ = (ref$ = this.tokens)[ref$.length - 2 - ((ref1$ = this.last[0]) === 'NEWLINE' || ref1$ === 'INDENT')]) != null ? ref$[0] : void 8) === 'FOR') {
      return this.seenFor = false, this.seenFrom = true, this;
    }
  };
  exports.validate = function(flag){
    var that;
    if (that = flag && /(.).*\1/.exec(flag)) {
      this.carp("duplicate regex flag `" + that[1] + "`");
    }
    return flag;
  };
  exports.carp = function(it){
    carp(it, this.line);
  };
  exports.string = function(q, body){
    return string(q, body, this.line);
  };
  function carp(msg, lno){
    throw SyntaxError(msg + " on line " + (-~lno));
  }
  function able(tokens, i, call){
    var token, tag;
    i == null && (i = tokens.length);
    tag = (token = tokens[i - 1])[0];
    return (tag === 'ID' || tag === ']' || tag === '?') || (call
      ? token.callable || (tag === ')' || tag === ')CALL') && token[1]
      : tag === '}' || tag === ')' || tag === ')CALL' || tag === 'STRNUM' || tag === 'LITERAL' || tag === 'WORDS');
  }
  string = (function(re){
    return function(q, body, lno){
      body = body.replace(re, function(it, oct, xu, rest){
        if (it === q || it === '\\') {
          return '\\' + it;
        }
        if (oct) {
          return '\\x' + (0x100 + parseInt(oct, 8)).toString(16).slice(1);
        }
        if (xu) {
          carp('malformed character escape sequence', lno);
        }
        if (!rest || q === rest) {
          return it;
        } else {
          return rest;
        }
      });
      return q + body + q;
    };
  }.call(this, /['"]|\\(?:([0-3]?[0-7]{2}|[1-7]|0(?=[89]))|x[\dA-Fa-f]{2}|u[\dA-Fa-f]{4}|([xu])|[\\0bfnrtv]|[^\n\S]|([\w\W]))?/g));
  function heretabs(doc){
    var dent, that, ref$;
    dent = 0 / 0;
    while (that = TABS.exec(doc)) {
      dent <= (ref$ = that[0].length - 1) || (dent = ref$);
    }
    return dent;
  }
  TABS = /\n[^\n\S]*(?!$)/mg;
  function detab(str, len){
    if (len) {
      return str.replace(detab[len] || (detab[len] = RegExp('\\n[^\\n\\S]{1,' + len + '}', 'g')), '\n');
    } else {
      return str;
    }
  }
  function replacer(re, to){
    return function(it){
      return it.replace(re, to);
    };
  }
  unlines = replacer(/\n[^\n\S]*/g, '');
  enlines = replacer(/\n/g, '\\n');
  enslash = replacer(/\\/g, '\\\\');
  reslash = replacer(/(\\.)|\//g, function(){
    return arguments[1] || '\\/';
  });
  camelize = replacer(/-[a-z]/ig, function(it){
    return it.charAt(1).toUpperCase();
  });
  function lchomp(it){
    return it.slice(1 + it.lastIndexOf('\n', 0));
  }
  function decode(val, lno){
    if (!isNaN(val)) {
      return [+val];
    }
    val = val.length > 8
      ? 'ng'
      : Function('return' + val)();
    val.length === 1 || carp('bad string in range', lno);
    return [val.charCodeAt(), true];
  }
  function uxxxx(it){
    return '"\\u' + ('000' + it.toString(16)).slice(-4) + '"';
  }
  character = typeof JSON == 'undefined' || JSON === null
    ? uxxxx
    : function(it){
      switch (it) {
      case 0x2028:
      case 0x2029:
        return uxxxx(it);
      default:
        return JSON.stringify(String.fromCharCode(it));
      }
    };
  function rewriteBlockless(tokens){
    var i, len$, token, tag;
    for (i = 0, len$ = tokens.length; i < len$; ++i) {
      token = tokens[i], tag = token[0];
      if (tag === 'IF' || tag === 'CLASS') {
        detectEnd(tokens, i + 1, ok, go);
      }
    }
    function ok(it){
      var ref$;
      return (ref$ = it[0]) === 'NEWLINE' || ref$ === 'INDENT';
    }
    function go(it, i){
      var lno;
      if (tag === 'IF') {
        if (it[0] !== 'INDENT' || !it[1] && !it.then || of$(tokens[i - 1][0], BLOCK_USERS)) {
          token[0] = 'POST_IF';
        }
      } else if (it[0] !== 'INDENT') {
        tokens.splice(i, 0, ['INDENT', 0, lno = tokens[i - 1][2]], ['DEDENT', 0, lno]);
      }
    }
  }
  function addImplicitIndentation(tokens){
    var i, token, tag, next, indent, dedent, ref$, idx;
    i = 0;
    while (token = tokens[++i]) {
      tag = token[0];
      if (tag !== '->' && tag !== 'THEN' && tag !== 'ELSE' && tag !== 'DEFAULT' && tag !== 'TRY' && tag !== 'CATCH' && tag !== 'FINALLY' && tag !== 'DECL') {
        continue;
      }
      switch (next = tokens[i + 1][0]) {
      case 'IF':
        if (tag === 'ELSE') {
          continue;
        }
        break;
      case 'INDENT':
      case 'THEN':
        if (tag === 'THEN') {
          tokens.splice(i--, 1);
        }
        continue;
      }
      indent = ['INDENT', 0, token[2]];
      dedent = ['DEDENT', 0];
      if (tag === 'THEN') {
        (tokens[i] = indent).then = true;
      } else {
        tokens.splice(++i, 0, indent);
      }
      switch (false) {
      case tag !== 'DECL':
        break;
      case next !== 'DOT' && next !== '?' && next !== ',' && next !== '|>':
        --i;
        // fallthrough
      case !((next === 'ID' || next === 'STRNUM' || next === 'LITERAL') && ',' === ((ref$ = tokens[i + 2]) != null ? ref$[0] : void 8)):
        go(0, i += 2);
        ++i;
        continue;
      case !((next === '(' || next === '[' || next === '{') && ',' === ((ref$ = tokens[idx = 1 + indexOfPair(tokens, i + 1)]) != null ? ref$[0] : void 8)):
        go(0, idx);
        ++i;
        continue;
      }
      detectEnd(tokens, i + 1, ok, go);
    }
    function ok(token, i){
      var t0, t;
      t0 = token[0];
      t = tag;
      if (tag === t0 || tag === 'THEN' && t0 === 'SWITCH') {
        tag = '';
      }
      switch (t0) {
      case 'NEWLINE':
        return token[1] !== ';';
      case 'DOT':
      case '?':
      case ',':
      case '|>':
        return tokens[i - 1].eol;
      case 'ELSE':
        return t === 'THEN';
      case 'CATCH':
        return t === 'TRY';
      case 'FINALLY':
        return t === 'TRY' || t === 'CATCH' || t === 'THEN';
      case 'CASE':
      case 'DEFAULT':
        return t === 'CASE' || t === 'THEN';
      }
    }
    function go(arg$, i){
      var prev;
      prev = tokens[i - 1];
      tokens.splice(prev[0] === ',' ? i - 1 : i, 0, (dedent[2] = prev[2], dedent));
    }
  }
  function addImplicitParentheses(tokens){
    var i, brackets, token, ref$, endi, tpair, tag, prev, seenSwitch, skipBlock;
    i = 0;
    brackets = [];
    while (token = tokens[++i]) {
      if (token[1] === 'do' && ((ref$ = tokens[i + 1]) != null ? ref$[0] : void 8) === 'INDENT') {
        endi = indexOfPair(tokens, i + 1);
        if (tokens[endi + 1][0] === 'NEWLINE' && ((ref$ = tokens[endi + 2]) != null ? ref$[0] : void 8) === 'WHILE') {
          token[0] = 'DO';
          tokens[endi + 2].done = true;
          tokens.splice(endi + 1, 1);
        } else {
          (token = tokens[1 + i])[0] = '(';
          (tpair = tokens[endi])[0] = ')';
          token.doblock = true;
          tokens.splice(i, 1);
        }
      }
      tag = token[0];
      prev = tokens[i - 1];
      if (tag === '[') {
        brackets.push(prev[0] === 'DOT');
      }
      if (prev[0] === ']') {
        if (brackets.pop()) {
          prev.index = true;
        } else {
          continue;
        }
      }
      if (!(((ref$ = prev[0]) === 'FUNCTION' || ref$ === 'LET') || prev.spaced && able(tokens, i, true))) {
        continue;
      }
      if (token.doblock) {
        token[0] = 'CALL(';
        tpair[0] = ')CALL';
        continue;
      }
      if (!(of$(tag, ARG) || !token.spaced && (tag === '+-' || tag === '^'))) {
        continue;
      }
      if (tag === 'CREMENT') {
        if (token.spaced || !of$((ref$ = tokens[i + 1]) != null ? ref$[0] : void 8, CHAIN)) {
          continue;
        }
      }
      skipBlock = seenSwitch = false;
      tokens.splice(i++, 0, ['CALL(', '', token[2]]);
      detectEnd(tokens, i, ok, go);
    }
    function ok(token, i){
      var tag, ref$, pre;
      tag = token[0];
      if (tag === '|>' || tag === 'POST_IF') {
        return true;
      }
      if (!skipBlock) {
        if (token.alias && ((ref$ = token[1]) === '&&' || ref$ === '||') || (tag === 'TO' || tag === 'BY' || tag === 'IMPLEMENTS')) {
          return true;
        }
      }
      pre = tokens[i - 1];
      switch (tag) {
      case 'NEWLINE':
        return pre[0] !== ',';
      case 'DOT':
      case '?':
        return !skipBlock && (pre.spaced || pre[0] === 'DEDENT');
      case 'SWITCH':
        seenSwitch = true;
        // fallthrough
      case 'IF':
      case 'CLASS':
      case 'FUNCTION':
      case 'LET':
      case 'WITH':
        skipBlock = true;
        break;
      case 'CASE':
        if (seenSwitch) {
          skipBlock = true;
        } else {
          return true;
        }
        break;
      case 'INDENT':
        if (skipBlock) {
          return skipBlock = false;
        }
        return !of$(pre[0], BLOCK_USERS);
      case 'WHILE':
        if (token.done) {
          return false;
        }
        // fallthrough
      case 'FOR':
        skipBlock = true;
        return able(tokens, i) || pre[0] === 'CREMENT' || pre[0] === '...' && pre.spaced;
      }
      return false;
    }
    function go(token, i){
      tokens.splice(i, 0, [')CALL', '', tokens[i - 1][2]]);
    }
  }
  function addImplicitBraces(tokens){
    var stack, i, token, tag, start, paren, index, pre, ref$, inline;
    stack = [];
    i = 0;
    while (token = tokens[++i]) {
      if (':' !== (tag = token[0])) {
        switch (false) {
        case !of$(tag, CLOSERS):
          start = stack.pop();
          break;
        case !of$(tag, OPENERS):
          if (tag === 'INDENT' && tokens[i - 1][0] === '{') {
            tag = '{';
          }
          stack.push([tag, i]);
        }
        continue;
      }
      paren = tokens[i - 1][0] === ')';
      index = paren
        ? start[1]
        : i - 1;
      pre = tokens[index - 1];
      if (!(((ref$ = pre[0]) === ':' || ref$ === 'ASSIGN' || ref$ === 'IMPORT') || ((ref$ = stack[stack.length - 1]) != null ? ref$[0] : void 8) !== '{')) {
        continue;
      }
      stack.push(['{']);
      inline = !pre.doblock && ((ref$ = pre[0]) !== 'NEWLINE' && ref$ !== 'INDENT');
      while (((ref$ = tokens[index - 2]) != null ? ref$[0] : void 8) === 'COMMENT') {
        index -= 2;
      }
      tokens.splice(index, 0, ['{', '{', tokens[index][2]]);
      detectEnd(tokens, ++i + 1, ok, go);
    }
    function ok(token, i){
      var tag, ref$, t1;
      switch (tag = token[0]) {
      case ',':
        break;
      case 'NEWLINE':
        if (inline) {
          return true;
        }
        break;
      case 'DEDENT':
        return true;
      case 'POST_IF':
      case 'FOR':
      case 'WHILE':
        return inline;
      default:
        return false;
      }
      t1 = (ref$ = tokens[i + 1]) != null ? ref$[0] : void 8;
      return t1 !== (tag === ',' ? 'NEWLINE' : 'COMMENT') && ':' !== ((ref$ = tokens[t1 === '('
        ? 1 + indexOfPair(tokens, i + 1)
        : i + 2]) != null ? ref$[0] : void 8);
    }
    function go(token, i){
      tokens.splice(i, 0, ['}', '', token[2]]);
    }
  }
  function expandLiterals(tokens){
    var i, token, sig, next, lno, ref$, from, char, to, tochar, by, byp, ts, enc, add, n, i$, len$, word, that;
    i = 0;
    while (token = tokens[++i]) {
      switch (token[0]) {
      case 'STRNUM':
        if (~'-+'.indexOf(sig = token[1].charAt(0))) {
          token[1] = token[1].slice(1);
          tokens.splice(i++, 0, ['+-', sig, token[2]]);
        }
        if (token.callable) {
          continue;
        }
        break;
      case 'RANGE':
        next = tokens[i + 1];
        lno = token[2];
        ref$ = decode(token[1], lno), from = ref$[0], char = ref$[1];
        ref$ = next[0] === 'STRNUM' && decode(next[1], lno), to = ref$[0], tochar = ref$[1];
        if (to == null || char ^ tochar) {
          carp('bad "to" in range', lno);
        }
        by = 1;
        if (byp = ((ref$ = tokens[i + 2]) != null ? ref$[0] : void 8) === 'RANGE_BY') {
          if (!(by = +((ref$ = tokens[i + 3]) != null ? ref$[1] : void 8))) {
            carp('bad "by" in range', tokens[i + 2][2]);
          }
        }
        ts = [];
        enc = char ? character : String;
        add = fn$;
        if (token.op === 'to') {
          for (n = from; by < 0 ? n >= to : n <= to; n += by) {
            add();
          }
        } else {
          for (n = from; by < 0 ? n > to : n < to; n += by) {
            add();
          }
        }
        ts.pop() || carp('empty range', lno);
        tokens.splice.apply(tokens, [i, 2 + 2 * byp].concat(slice$.call(ts)));
        i += ts.length - 1;
        break;
      case 'WORDS':
        ts = [['[', '[', lno = token[2]]];
        for (i$ = 0, len$ = (ref$ = token[1].slice(2, -2).match(/\S+/g) || '').length; i$ < len$; ++i$) {
          word = ref$[i$];
          ts.push(['STRNUM', string('\'', word, lno), lno], [',', ',', lno]);
        }
        tokens.splice.apply(tokens, [i, 1].concat(slice$.call(ts), [[']', ']', lno]]));
        i += ts.length;
        break;
      case 'INDENT':
        if (that = tokens[i - 1]) {
          if (that[1] === 'new') {
            tokens.splice(i++, 0, ['PARAM(', '', token[2]], [')PARAM', '', token[2]], ['->', '', token[2]]);
          } else if ((ref$ = that[0]) === 'FUNCTION' || ref$ === 'LET') {
            tokens.splice(i, 0, ['CALL(', '', token[2]], [')CALL', '', token[2]]);
            i += 2;
          }
        }
        continue;
      case 'LITERAL':
      case '}':
      case '!?':
        break;
      case ')':
      case ')CALL':
        if (token[1]) {
          continue;
        }
        break;
      case ']':
        if (token.index) {
          continue;
        }
        break;
      case 'CREMENT':
        if (!able(tokens, i)) {
          continue;
        }
        break;
      default:
        continue;
      }
      if (token.spaced && of$(tokens[i + 1][0], ARG)) {
        tokens.splice(++i, 0, [',', ',', token[2]]);
      }
    }
    function fn$(){
      if (0x10000 < ts.push(['STRNUM', enc(n), lno], [',', ',', lno])) {
        carp('range limit exceeded', lno);
      }
    }
  }
  function detectEnd(tokens, i, ok, go){
    var levels, token, tag;
    levels = 0;
    for (; token = tokens[i]; ++i) {
      if (!levels && ok(token, i)) {
        return go(token, i);
      }
      tag = token[0];
      if (0 > (levels += of$(tag, OPENERS) || -of$(tag, CLOSERS))) {
        return go(token, i);
      }
    }
  }
  function indexOfPair(tokens, i){
    var level, start, end, that;
    level = 1;
    end = INVERSES[start = tokens[i][0]];
    while (that = tokens[++i]) {
      switch (that[0]) {
      case start:
        ++level;
        break;
      case end:
        if (!--level) {
          return i;
        }
      }
    }
    return -1;
  }
  KEYWORDS_SHARED = ['true', 'false', 'null', 'this', 'void', 'super', 'return', 'throw', 'break', 'continue', 'if', 'else', 'for', 'while', 'switch', 'case', 'default', 'try', 'catch', 'finally', 'function', 'class', 'extends', 'implements', 'new', 'do', 'delete', 'typeof', 'in', 'instanceof', 'let', 'with', 'var', 'const', 'import', 'export', 'debugger'];
  KEYWORDS_UNUSED = ['enum', 'interface', 'package', 'private', 'protected', 'public', 'static', 'yield'];
  KEYWORDS = KEYWORDS_SHARED.concat(KEYWORDS_UNUSED);
  ID = /((?!\s)[a-z_$\xAA-\uFFDC](?:(?!\s)[\w$\xAA-\uFFDC]|-[a-z])*)([^\n\S]*:(?![:=]))?|/ig;
  SYMBOL = /[-+*\/%&|^:]=|\.{1,3}|([-+&|@:])\1|[-~=|]>|[!=]==?|<(?:<(?:=|<{0,2})|[-~]|\[(?:[\s\S]*?\]>)?)|>>>?=?|[<>]\??=?|!\?|\*\*=?|[^\s#]?/g;
  SPACE = /[^\n\S]*(?:#.*)?/g;
  MULTIDENT = /(?:\s*#.*)*(?:\n([^\n\S]*))+/g;
  SIMPLESTR = /'[^\\']*(?:\\[\s\S][^\\']*)*'|/g;
  JSTOKEN = /`[^\\`]*(?:\\[\s\S][^\\`]*)*`|/g;
  BSTOKEN = /\\(?:(\S[^\s,;)}\]]*)|\s*)/g;
  NUMBER = /0x[\dA-Fa-f][\dA-Fa-f_]*|([2-9]|[12]\d|3[0-6])r([\dA-Za-z]\w*)|((\d[\d_]*)(\.\d[\d_]*)?(?:e[+-]?\d[\d_]*)?)[$\w]*|/g;
  NUMBER_OMIT = /_+/g;
  REGEX = /\/([^[\/\n\\]*(?:(?:\\.|\[[^\]\n\\]*(?:\\.[^\]\n\\]*)*\])[^[\/\n\\]*)*)\/([gimy]{1,4}|\$?)|/g;
  HEREGEX_OMIT = /\s+(?:#.*)?/g;
  LASTDENT = /\n[^\n\S]*$/;
  INLINEDENT = /[^\n\S]*[^#\s]?/g;
  NONASCII = /[\x80-\uFFFF]/;
  OPENERS = ['(', '[', '{', 'CALL(', 'PARAM(', 'INDENT'];
  CLOSERS = [')', ']', '}', ')CALL', ')PARAM', 'DEDENT'];
  INVERSES = new function(){
    var i, ref$, len$, o;
    for (i = 0, len$ = (ref$ = OPENERS).length; i < len$; ++i) {
      o = ref$[i];
      this[this[o] = CLOSERS[i]] = o;
    }
  };
  CHAIN = ['(', '{', '[', 'ID', 'STRNUM', 'LITERAL', 'LET', 'WITH', 'WORDS'];
  ARG = CHAIN.concat(['...', 'UNARY', 'CREMENT', 'PARAM(', 'FUNCTION', 'IF', 'SWITCH', 'TRY', 'CLASS', 'RANGE', 'LABEL', 'DECL', 'DO']);
  BLOCK_USERS = [',', ':', '->', 'ELSE', 'ASSIGN', 'IMPORT', 'UNARY', 'DEFAULT', 'TRY', 'CATCH', 'FINALLY', 'HURL', 'DECL', 'DO', 'LET', 'FUNCTION'];
}.call(this, require['./lexer'] = {}));
(function(exports){
  var Node, Negatable, Block, Atom, Literal, Var, Key, Index, Chain, Call, List, Obj, Prop, Arr, Unary, Binary, Assign, Import, Of, Existence, Fun, Class, Super, Parens, Splat, Jump, Throw, Return, While, For, Try, Switch, Case, If, Label, Cascade, JS, Util, Vars, DECLS, ref$, UTILS, LEVEL_TOP, LEVEL_PAREN, LEVEL_LIST, LEVEL_COND, LEVEL_OP, LEVEL_CALL, PREC, TAB, ID, SIMPLENUM;
  (Node = function(){
    throw Error('unimplemented');
  }).prototype = {
    compile: function(options, level){
      var o, key, node, code, that, i$, len$, tmp;
      o = {};
      for (key in options) {
        o[key] = options[key];
      }
      if (level != null) {
        o.level = level;
      }
      node = this.unfoldSoak(o) || this;
      if (o.level && node.isStatement()) {
        return node.compileClosure(o);
      }
      code = (node.tab = o.indent, node).compileNode(o);
      if (that = node.temps) {
        for (i$ = 0, len$ = that.length; i$ < len$; ++i$) {
          tmp = that[i$];
          o.scope.free(tmp);
        }
      }
      return code;
    },
    compileClosure: function(o){
      var that, fun, call, hasArgs, hasThis;
      if (that = this.getJump()) {
        that.carp('inconvertible statement');
      }
      fun = Fun([], Block(this));
      call = Call();
      this.traverseChildren(function(it){
        switch (it.value) {
        case 'this':
          hasThis = true;
          break;
        case 'arguments':
          hasArgs = it.value = 'args$';
        }
      });
      if (hasThis) {
        call.args.push(Literal('this'));
        call.method = '.call';
      }
      if (hasArgs) {
        call.args.push(Literal('arguments'));
        fun.params.push(Var('args$'));
      }
      return Parens(Chain((fun.wrapper = true, fun['void'] = this['void'], fun), [call]), true).compile(o);
    },
    compileBlock: function(o, node){
      var that;
      if (that = node != null ? node.compile(o, LEVEL_TOP) : void 8) {
        return "{\n" + that + "\n" + this.tab + "}";
      } else {
        return '{}';
      }
    },
    cache: function(o, once, level){
      var ref$, ref, sub;
      if (!this.isComplex()) {
        return [ref$ = level != null ? this.compile(o, level) : this, ref$];
      }
      sub = Assign(ref = Var(o.scope.temporary()), this);
      if (level != null) {
        sub = sub.compile(o, level);
        if (once) {
          o.scope.free(ref.value);
        }
        return [sub, ref.value];
      }
      if (once) {
        return [sub, (ref.temp = true, ref)];
      } else {
        return [sub, ref, [ref.value]];
      }
    },
    compileLoopReference: function(o, name, ret){
      var ref$, tmp, asn;
      if (this instanceof Var && o.scope.check(this.value) || this instanceof Unary && ((ref$ = this.op) === '+' || ref$ === '-') && (-1 / 0 < (ref$ = +this.it.value) && ref$ < 1 / 0) || this instanceof Literal && !this.isComplex()) {
        return [ref$ = this.compile(o), ref$];
      }
      asn = Assign(Var(tmp = o.scope.temporary(name)), this);
      ret || (asn['void'] = true);
      return [tmp, asn.compile(o, ret ? LEVEL_CALL : LEVEL_PAREN)];
    },
    eachChild: function(fn){
      var i$, ref$, len$, name, child, i, len1$, node, that;
      for (i$ = 0, len$ = (ref$ = this.children).length; i$ < len$; ++i$) {
        name = ref$[i$];
        if (child = this[name]) {
          if ('length' in child) {
            for (i = 0, len1$ = child.length; i < len1$; ++i) {
              node = child[i];
              if ((that = fn(node, name, i)) != null) {
                return that;
              }
            }
          } else {
            if ((that = fn(child, name)) != null) {
              return that;
            }
          }
        }
      }
    },
    traverseChildren: function(fn, xscope){
      var this$ = this;
      return this.eachChild(function(node, name, index){
        var ref$;
        return (ref$ = fn(node, this$, name, index)) != null
          ? ref$
          : node.traverseChildren(fn, xscope);
      });
    },
    anaphorize: function(){
      var base, name, ref$;
      this.children = this.aTargets;
      if (this.eachChild(hasThat)) {
        if ((base = this)[name = this.aSource] instanceof Existence) {
          base = base[name];
          name = 'it';
        }
        if (base[name].value !== 'that') {
          base[name] = Assign(Var('that'), base[name]);
        }
      }
      function hasThat(it){
        var that;
        return it.value === 'that' || ((that = it.aSource)
          ? (that = it[that]) ? hasThat(that) : void 8
          : it.eachChild(hasThat));
      }
      delete this.children;
      return ref$ = this[this.aSource], ref$.cond = true, ref$;
    },
    carp: function(it){
      throw SyntaxError(it + " on line " + (this.line || this.traverseChildren(function(it){
        return it.line;
      })));
    },
    delegate: function(names, fn){
      var i$, len$, name;
      for (i$ = 0, len$ = names.length; i$ < len$; ++i$) {
        name = names[i$];
        (fn$.call(this, name));
      }
      function fn$(name){
        this[name] = function(it){
          return fn.call(this, name, it);
        };
      }
    },
    children: [],
    terminator: ';',
    isComplex: YES,
    isStatement: NO,
    isAssignable: NO,
    isCallable: NO,
    isEmpty: NO,
    isArray: NO,
    isString: NO,
    isRegex: NO,
    isMatcher: function(){
      return this.isString() || this.isRegex();
    },
    assigns: NO,
    ripName: VOID,
    unfoldSoak: VOID,
    unfoldAssign: VOID,
    unparen: THIS,
    unwrap: THIS,
    maybeKey: THIS,
    expandSlice: THIS,
    varName: String,
    getAccessors: VOID,
    getCall: VOID,
    getDefault: VOID,
    getJump: VOID,
    invert: function(){
      return Unary('!', this, true);
    },
    addElse: function($else){
      this['else'] = $else;
      return this;
    },
    makeReturn: function(arref){
      if (arref) {
        return Call.make(JS(arref + '.push'), [this]);
      } else {
        return Return(this);
      }
    },
    show: String,
    toString: function(idt){
      var tree, that;
      idt || (idt = '');
      tree = '\n' + idt + this.constructor.displayName;
      if (that = this.show()) {
        tree += ' ' + that;
      }
      this.eachChild(function(it){
        tree += it.toString(idt + TAB);
      });
      return tree;
    },
    stringify: function(space){
      return JSON.stringify(this, null, space);
    },
    toJSON: function(){
      return import$({
        type: this.constructor.displayName
      }, this);
    }
  };
  exports.parse = function(json){
    return exports.fromJSON(JSON.parse(json));
  };
  exports.fromJSON = (function(){
    function fromJSON(it){
      var that, node, key, val, i$, len$, v, results$ = [];
      if (!(it && typeof it === 'object')) {
        return it;
      }
      if (that = it.type) {
        node = clone$(exports[that].prototype);
        for (key in it) {
          val = it[key];
          node[key] = fromJSON(val);
        }
        return node;
      }
      if (it.length != null) {
        for (i$ = 0, len$ = it.length; i$ < len$; ++i$) {
          v = it[i$];
          results$.push(fromJSON(v));
        }
        return results$;
      } else {
        return it;
      }
    }
    return fromJSON;
  }());
  Negatable = {
    show: function(){
      return this.negated && '!';
    },
    invert: function(){
      this.negated = !this.negated;
      return this;
    }
  };
  exports.Block = Block = (function(superclass){
    Block.displayName = 'Block';
    var prototype = extend$(Block, superclass).prototype, constructor = Block;
    function Block(body){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      body || (body = []);
      if ('length' in body) {
        this$.lines = body;
      } else {
        this$.lines = [];
        this$.add(body);
      }
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.children = ['lines'];
    prototype.toJSON = function(){
      delete this.back;
      return superclass.prototype.toJSON.call(this);
    };
    prototype.add = function(it){
      var that, ref$;
      it = it.unparen();
      switch (false) {
      case !(that = this.back):
        that.add(it);
        break;
      case !(that = it.lines):
        (ref$ = this.lines).push.apply(ref$, that);
        break;
      default:
        this.lines.push(it);
        if (that = it.back, delete it.back, that) {
          this.back = that;
        }
      }
      return this;
    };
    prototype.prepend = function(){
      var ref$;
      (ref$ = this.lines).splice.apply(ref$, [this.neck(), 0].concat(slice$.call(arguments)));
      return this;
    };
    prototype.pipe = function(it){
      this.lines.push(Assign(Var('_'), this.lines.pop()), it);
      return this;
    };
    prototype.unwrap = function(){
      if (this.lines.length === 1) {
        return this.lines[0];
      } else {
        return this;
      }
    };
    prototype.chomp = function(){
      var lines, i, that;
      lines = this.lines;
      i = lines.length;
      while (that = lines[--i]) {
        if (!that.comment) {
          break;
        }
      }
      lines.length = i + 1;
      return this;
    };
    prototype.neck = function(){
      var pos, ref$, len$, x;
      for (pos = 0, len$ = (ref$ = this.lines).length; pos < len$; ++pos) {
        x = ref$[pos];
        if (!(x.comment || x instanceof Literal)) {
          break;
        }
      }
      return pos;
    };
    prototype.isComplex = function(){
      var ref$;
      return this.lines.length > 1 || ((ref$ = this.lines[0]) != null ? ref$.isComplex() : void 8);
    };
    prototype.delegate(['isCallable', 'isArray', 'isString', 'isRegex'], function(it){
      var ref$;
      return (ref$ = (ref$ = this.lines)[ref$.length - 1]) != null ? ref$[it]() : void 8;
    });
    prototype.getJump = function(it){
      var i$, ref$, len$, node, that;
      for (i$ = 0, len$ = (ref$ = this.lines).length; i$ < len$; ++i$) {
        node = ref$[i$];
        if (that = node.getJump(it)) {
          return that;
        }
      }
    };
    prototype.makeReturn = function(it){
      var ref$, key$, ref1$, that;
      if (that = (ref1$ = ref$ = this.lines)[key$ = ref1$.length - 1] != null ? ref$[key$] = ref$[key$].makeReturn(it) : void 8) {
        if (that instanceof Return && !that.it) {
          --this.lines.length;
        }
      }
      return this;
    };
    prototype.compile = function(o, level){
      var tab, res$, i$, ref$, len$, node, code, codes;
      level == null && (level = o.level);
      if (level) {
        return this.compileExpressions(o, level);
      }
      o.block = this;
      tab = o.indent;
      res$ = [];
      for (i$ = 0, len$ = (ref$ = this.lines).length; i$ < len$; ++i$) {
        node = ref$[i$];
        node = node.unfoldSoak(o) || node;
        if (!(code = (node.front = true, node).compile(o, level))) {
          continue;
        }
        node.isStatement() || (code += node.terminator);
        res$.push(tab + code);
      }
      codes = res$;
      return codes.join('\n');
    };
    prototype.compileRoot = function(options){
      var o, bare, ref$, prefix, code;
      o = (import$({
        level: LEVEL_TOP,
        scope: this.scope = Scope.root = new Scope
      }, options));
      delete o.filename;
      o.indent = (bare = o.bare, delete o.bare, bare) ? '' : TAB;
      if (/^\s*(?:[/#]|javascript:)/.test((ref$ = this.lines[0]) != null ? ref$.code : void 8)) {
        prefix = this.lines.shift().code + '\n';
      }
      if ((ref$ = o.eval, delete o.eval, ref$) && this.chomp().lines.length) {
        if (bare) {
          this.lines.push(Parens(this.lines.pop()));
        } else {
          this.makeReturn();
        }
      }
      code = this.compileWithDeclarations(o);
      bare || (code = "(function(){\n" + code + "\n}).call(this);\n");
      return [prefix] + code;
    };
    prototype.compileWithDeclarations = function(o){
      var pre, i, rest, post, that;
      o.level = LEVEL_TOP;
      pre = '';
      if (i = this.neck()) {
        rest = this.lines.splice(i, 9e9);
        pre = this.compile(o);
        this.lines = rest;
      }
      if (!(post = this.compile(o))) {
        return pre;
      }
      return (pre && pre + "\n") + ((that = this.scope) ? that.emit(post, o.indent) : post);
    };
    prototype.compileExpressions = function(o, level){
      var lines, i, that, code, last, i$, len$, node;
      lines = this.lines;
      i = -1;
      while (that = lines[++i]) {
        if (that.comment) {
          lines.splice(i--, 1);
        }
      }
      if (!lines.length) {
        lines.push(Literal('void'));
      }
      lines[0].front = this.front;
      lines[lines.length - 1]['void'] = this['void'];
      if (!lines[1]) {
        return lines[0].compile(o, level);
      }
      code = '';
      last = lines.pop();
      for (i$ = 0, len$ = lines.length; i$ < len$; ++i$) {
        node = lines[i$];
        code += (node['void'] = true, node).compile(o, LEVEL_PAREN) + ', ';
      }
      code += last.compile(o, LEVEL_PAREN);
      if (level < LEVEL_LIST) {
        return code;
      } else {
        return "(" + code + ")";
      }
    };
    return Block;
  }(Node));
  Atom = (function(superclass){
    Atom.displayName = 'Atom';
    var prototype = extend$(Atom, superclass).prototype, constructor = Atom;
    prototype.show = function(){
      return this.value;
    };
    prototype.isComplex = NO;
    function Atom(){}
    return Atom;
  }(Node));
  exports.Literal = Literal = (function(superclass){
    Literal.displayName = 'Literal';
    var prototype = extend$(Literal, superclass).prototype, constructor = Literal;
    function Literal(value){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.value = value;
      if (value.js) {
        return JS(value + "", true);
      }
      if (value === 'super') {
        return new Super;
      }
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.isEmpty = function(){
      var ref$;
      return (ref$ = this.value) === 'null' || ref$ === 'void';
    };
    prototype.isCallable = function(){
      var ref$;
      return (ref$ = this.value) === 'this' || ref$ === 'eval' || ref$ === '&';
    };
    prototype.isString = function(){
      return 0 <= '\'"'.indexOf((this.value + "").charAt());
    };
    prototype.isRegex = function(){
      return (this.value + "").charAt() === '/';
    };
    prototype.isComplex = function(){
      return this.isRegex() || this.value === 'debugger';
    };
    prototype.varName = function(){
      if (/^\w+$/.test(this.value)) {
        return '$' + this.value;
      } else {
        return '';
      }
    };
    prototype.compile = function(o, level){
      var val, ref$;
      level == null && (level = o.level);
      switch (val = this.value + "") {
      case 'this':
        return ((ref$ = o.scope.fun) != null ? ref$.bound : void 8) || val;
      case 'void':
        if (!level) {
          return '';
        }
        val += ' 8';
        // fallthrough
      case 'null':
        if (level === LEVEL_CALL) {
          this.carp('invalid use of ' + this.value);
        }
        break;
      case 'debugger':
        if (level) {
          return "(function(){\n" + TAB + o.indent + "debugger;\n" + o.indent + "}())";
        }
        break;
      case '*':
        this.carp('stray star');
        break;
      case '&':
        if (!(val = o.cascadee)) {
          this.carp('stray cascadee');
        }
      }
      return val;
    };
    return Literal;
  }(Atom));
  exports.Var = Var = (function(superclass){
    Var.displayName = 'Var';
    var prototype = extend$(Var, superclass).prototype, constructor = Var;
    function Var(value){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.value = value;
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.isAssignable = prototype.isCallable = YES;
    prototype.assigns = function(it){
      return it === this.value;
    };
    prototype.maybeKey = function(){
      var ref$;
      return ref$ = Key(this.value), ref$.line = this.line, ref$;
    };
    prototype.varName = prototype.show;
    prototype.compile = function(o){
      if (this.temp) {
        return o.scope.free(this.value);
      } else {
        return this.value;
      }
    };
    return Var;
  }(Atom));
  exports.Key = Key = (function(superclass){
    Key.displayName = 'Key';
    var prototype = extend$(Key, superclass).prototype, constructor = Key;
    function Key(name, reserved){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.reserved = reserved || name.reserved;
      this$.name = '' + name;
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.isComplex = NO;
    prototype.assigns = function(it){
      return it === this.name;
    };
    prototype.varName = function(){
      var name;
      name = this.name;
      if (this.reserved || (name === 'arguments' || name === 'eval')) {
        return "$" + name;
      } else {
        return name;
      }
    };
    prototype.compile = prototype.show = function(){
      if (this.reserved) {
        return "'" + this.name + "'";
      } else {
        return this.name;
      }
    };
    return Key;
  }(Node));
  exports.Index = Index = (function(superclass){
    Index.displayName = 'Index';
    var prototype = extend$(Index, superclass).prototype, constructor = Index;
    function Index(key, symbol, init){
      var k, this$ = this instanceof ctor$ ? this : new ctor$;
      symbol || (symbol = '.');
      if (init && key instanceof Arr) {
        switch (key.items.length) {
        case 0:
          key = Key('__proto__');
          break;
        case 1:
          if (!((k = key.items[0]) instanceof Splat)) {
            key = Parens(k);
          }
        }
      }
      switch (symbol.slice(-1)) {
      case '=':
        this$.assign = symbol.slice(1);
        break;
      case '@':
        this$.vivify = symbol.length > 2 ? Arr : Obj;
      }
      this$.key = key;
      this$.symbol = symbol;
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.children = ['key'];
    prototype.show = function(){
      return [this.soak ? '?' : void 8] + this.symbol;
    };
    prototype.isComplex = function(){
      return this.key.isComplex();
    };
    prototype.varName = function(){
      var ref$;
      return ((ref$ = this.key) instanceof Key || ref$ instanceof Literal) && this.key.varName();
    };
    prototype.compile = function(o){
      var code;
      code = this.key.compile(o, LEVEL_PAREN);
      if (this.key instanceof Key && '\'' !== code.charAt(0)) {
        return "." + code;
      } else {
        return "[" + code + "]";
      }
    };
    return Index;
  }(Node));
  exports.Chain = Chain = (function(superclass){
    Chain.displayName = 'Chain';
    var prototype = extend$(Chain, superclass).prototype, constructor = Chain;
    function Chain(head, tails){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      if (!tails && head instanceof Chain) {
        return head;
      }
      this$.head = head;
      this$.tails = tails || [];
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.children = ['head', 'tails'];
    prototype.add = function(it){
      var ref$, that;
      if (this.head instanceof Existence) {
        ref$ = Chain(this.head.it), this.head = ref$.head, this.tails = ref$.tails;
        it.soak = true;
      }
      this.tails.push(it);
      if (it instanceof Call && !it.method && this.head instanceof Super && !this.head.called) {
        it.method = '.call';
        it.args.unshift(Literal('this'));
        this.head.called = true;
      } else if (that = it.vivify, delete it.vivify, that) {
        this.head = Assign(Chain(this.head, this.tails.splice(0, 9e9)), that(), '=', '||');
      }
      return this;
    };
    prototype.unwrap = function(){
      if (this.tails.length) {
        return this;
      } else {
        return this.head;
      }
    };
    prototype.delegate(['getJump', 'assigns', 'isStatement', 'isString'], function(it, arg){
      return !this.tails.length && this.head[it](arg);
    });
    prototype.isComplex = function(){
      return this.tails.length || this.head.isComplex();
    };
    prototype.isCallable = function(){
      var ref$, that;
      if (that = (ref$ = this.tails)[ref$.length - 1]) {
        return !((ref$ = that.key) != null && ref$.items);
      } else {
        return this.head.isCallable();
      }
    };
    prototype.isArray = function(){
      var ref$, that;
      if (that = (ref$ = this.tails)[ref$.length - 1]) {
        return that.key instanceof Arr;
      } else {
        return this.head.isArray();
      }
    };
    prototype.isRegex = function(){
      return this.head.value === 'RegExp' && !this.tails[1] && this.tails[0] instanceof Call;
    };
    prototype.isAssignable = function(){
      var ref$, tail, i$, len$;
      if (!(tail = (ref$ = this.tails)[ref$.length - 1])) {
        return this.head.isAssignable();
      }
      if (!(tail instanceof Index) || tail.key instanceof List || tail.symbol === '.~') {
        return false;
      }
      for (i$ = 0, len$ = (ref$ = this.tails).length; i$ < len$; ++i$) {
        tail = ref$[i$];
        if (tail.assign) {
          return false;
        }
      }
      return true;
    };
    prototype.isSimpleAccess = function(){
      return this.tails.length === 1 && !this.head.isComplex() && !this.tails[0].isComplex();
    };
    prototype.makeReturn = function(it){
      if (this.tails.length) {
        return superclass.prototype.makeReturn.apply(this, arguments);
      } else {
        return this.head.makeReturn(it);
      }
    };
    prototype.getCall = function(){
      var ref$, tail;
      return (tail = (ref$ = this.tails)[ref$.length - 1]) instanceof Call && tail;
    };
    prototype.varName = function(){
      var ref$;
      return (ref$ = (ref$ = this.tails)[ref$.length - 1]) != null ? ref$.varName() : void 8;
    };
    prototype.cacheReference = function(o){
      var ref$, name, base, ref, bref, nref;
      name = (ref$ = this.tails)[ref$.length - 1];
      if (name instanceof Call) {
        return this.cache(o, true);
      }
      if (this.tails.length < 2 && !this.head.isComplex() && !(name != null && name.isComplex())) {
        return [this, this];
      }
      base = Chain(this.head, this.tails.slice(0, -1));
      if (base.isComplex()) {
        ref = o.scope.temporary();
        base = Chain(Assign(Var(ref), base));
        bref = (ref$ = Var(ref), ref$.temp = true, ref$);
      }
      if (!name) {
        return [base, bref];
      }
      if (name.isComplex()) {
        ref = o.scope.temporary('key');
        name = Index(Assign(Var(ref), name.key));
        nref = Index((ref$ = Var(ref), ref$.temp = true, ref$));
      }
      return [base.add(name), Chain(bref || base.head, [nref || name])];
    };
    prototype.compileNode = function(o){
      var head, tails, that, base, rest, news, i$, ref$, len$, t;
      head = this.head, tails = this.tails;
      head.front = this.front;
      head.newed = this.newed;
      if (!tails.length) {
        return head.compile(o);
      }
      if (that = this.unfoldAssign(o)) {
        return that.compile(o);
      }
      if (tails[0] instanceof Call && !head.isCallable()) {
        this.carp('invalid callee');
      }
      this.expandSlice(o);
      this.expandBind(o);
      this.expandSplat(o);
      this.expandStar(o);
      if (!this.tails.length) {
        return this.head.compile(o);
      }
      base = this.head.compile(o, LEVEL_CALL);
      news = rest = '';
      for (i$ = 0, len$ = (ref$ = this.tails).length; i$ < len$; ++i$) {
        t = ref$[i$];
        if (t['new']) {
          news += 'new ';
        }
        rest += t.compile(o);
      }
      if ('.' === rest.charAt(0) && SIMPLENUM.test(base)) {
        base += ' ';
      }
      return news + base + rest;
    };
    prototype.unfoldSoak = function(o){
      var that, ref$, i, len$, node, ref1$, bust, test;
      if (that = this.head.unfoldSoak(o)) {
        (ref$ = that.then.tails).push.apply(ref$, this.tails);
        return that;
      }
      for (i = 0, len$ = (ref$ = this.tails).length; i < len$; ++i) {
        node = ref$[i];
        if (ref1$ = node.soak, delete node.soak, ref1$) {
          bust = Chain(this.head, this.tails.splice(0, i));
          if (node.assign && !bust.isAssignable()) {
            node.carp('invalid accessign');
          }
          test = node instanceof Call
            ? (ref1$ = bust.cacheReference(o), test = ref1$[0], this.head = ref1$[1], JS("typeof " + test.compile(o, LEVEL_OP) + " == 'function'"))
            : (i && node.assign
              ? (ref1$ = bust.cacheReference(o), test = ref1$[0], bust = ref1$[1], this.head = bust.head, (ref1$ = this.tails).unshift.apply(ref1$, bust.tails))
              : (ref1$ = bust.unwrap().cache(o, true), test = ref1$[0], this.head = ref1$[1]), Existence(test));
          return ref1$ = If(test, this), ref1$.soak = true, ref1$.cond = this.cond, ref1$['void'] = this['void'], ref1$;
        }
      }
    };
    prototype.unfoldAssign = function(o){
      var that, ref$, i, len$, index, op, left, lefts, rites, len1$, node, ref1$;
      if (that = this.head.unfoldAssign(o)) {
        (ref$ = that.right.tails).push.apply(ref$, this.tails);
        return that;
      }
      for (i = 0, len$ = (ref$ = this.tails).length; i < len$; ++i) {
        index = ref$[i];
        if (op = index.assign) {
          index.assign = '';
          left = Chain(this.head, this.tails.splice(0, i)).expandSlice(o).unwrap();
          if (left instanceof Arr) {
            lefts = left.items;
            rites = (this.head = Arr()).items;
            for (i = 0, len1$ = lefts.length; i < len1$; ++i) {
              node = lefts[i];
              ref1$ = Chain(node).cacheReference(o), rites[i] = ref1$[0], lefts[i] = ref1$[1];
            }
          } else {
            ref1$ = Chain(left).cacheReference(o), left = ref1$[0], this.head = ref1$[1];
          }
          if (op === '=') {
            op = ':=';
          }
          return ref1$ = Assign(left, this, op), ref1$.access = true, ref1$;
        }
      }
    };
    prototype.expandSplat = function(o){
      var tails, i, call, args, ctx, ref$;
      tails = this.tails;
      i = -1;
      while (call = tails[++i]) {
        if (!(args = call.args)) {
          continue;
        }
        ctx = call.method === '.call' && (args = args.concat()).shift();
        if (!(args = Splat.compileArray(o, args, true))) {
          continue;
        }
        if (call['new']) {
          this.carp('splatting "new"');
        }
        if (!ctx && tails[i - 1] instanceof Index) {
          ref$ = Chain(this.head, tails.splice(0, i - 1)).cache(o, true), this.head = ref$[0], ctx = ref$[1];
          i = 0;
        }
        call.method = '.apply';
        call.args = [ctx || Literal('null'), JS(args)];
      }
    };
    prototype.expandBind = function(o){
      var tails, i, that, obj, key, call;
      tails = this.tails;
      i = -1;
      while (that = tails[++i]) {
        if (that.symbol !== '.~') {
          continue;
        }
        that.symbol = '';
        obj = Chain(this.head, tails.splice(0, i)).unwrap();
        key = tails.shift().key;
        call = Call.make(Util('bind'), [obj, (key.reserved = true, key)]);
        this.head = this.newed ? Parens(call, true) : call;
        i = -1;
      }
    };
    prototype.expandStar = function(o){
      var tails, i, that, stars, ref$, sub, ref, temps, value, i$, len$, star;
      tails = this.tails;
      i = -1;
      while (that = tails[++i]) {
        if (that.args || that.stars || that.key instanceof Key) {
          continue;
        }
        stars = that.stars = [];
        that.eachChild(seek);
        if (!stars.length) {
          continue;
        }
        ref$ = Chain(this.head, tails.splice(0, i)).unwrap().cache(o), sub = ref$[0], ref = ref$[1], temps = ref$[2];
        value = Chain(ref, [Index(Key('length'))]).compile(o);
        for (i$ = 0, len$ = stars.length; i$ < len$; ++i$) {
          star = stars[i$];
          star.value = value;
          star.isAssignable = YES;
        }
        this.head = JS(sub.compile(o, LEVEL_CALL) + tails.shift().compile(o));
        if (temps) {
          o.scope.free(temps[0]);
        }
        i = -1;
      }
      function seek(it){
        if (it.value === '*') {
          stars.push(it);
        } else if (!(it instanceof Index)) {
          it.eachChild(seek);
        }
      }
    };
    prototype.expandSlice = function(o, assign){
      var tails, i, tail, ref$, _;
      tails = this.tails;
      i = -1;
      while (tail = tails[++i]) {
        if ((ref$ = tail.key) != null && ref$.items) {
          if (tails[i + 1] instanceof Call) {
            tail.carp('calling a slice');
          }
          _ = tails.splice(0, i + 1);
          _ = _.pop().key.toSlice(o, Chain(this.head, _).unwrap(), tail.symbol, assign);
          this.head = (_.front = this.front, _);
          i = -1;
        }
      }
      return this;
    };
    return Chain;
  }(Node));
  exports.Call = Call = (function(superclass){
    Call.displayName = 'Call';
    var prototype = extend$(Call, superclass).prototype, constructor = Call;
    function Call(args){
      var splat, this$ = this instanceof ctor$ ? this : new ctor$;
      args || (args = []);
      if (args.length === 1 && (splat = args[0]) instanceof Splat) {
        if (splat.filler) {
          this$.method = '.call';
          args[0] = Literal('this');
          args[1] = Splat(Literal('arguments'));
        } else if (splat.it instanceof Arr) {
          args = splat.it.items;
        }
      }
      this$.args = args;
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.children = ['args'];
    prototype.show = function(){
      return [this['new']] + [this.method] + [this.soak ? '?' : void 8];
    };
    prototype.compile = function(o){
      var code, i, ref$, len$, a;
      code = (this.method || '') + '(';
      for (i = 0, len$ = (ref$ = this.args).length; i < len$; ++i) {
        a = ref$[i];
        code += (i ? ', ' : '') + a.compile(o, LEVEL_LIST);
      }
      return code + ')';
    };
    Call.make = function(callee, args){
      return Chain(callee).add(Call(args));
    };
    Call.block = function(fun, args, method){
      var ref$, ref1$;
      return ref$ = Parens(Chain(fun, [(ref1$ = Call(args), ref1$.method = method, ref1$)]), true), ref$.calling = true, ref$;
    };
    Call.back = function(params, node, bound){
      var fun, args, index, len$, a;
      fun = Fun(params, void 8, bound);
      if (fun['void'] = node.op === '!') {
        node = node.it;
      }
      if (node instanceof Label) {
        fun.name = node.label;
        fun.labeled = true;
        node = node.it;
      }
      if (!fun['void'] && (fun['void'] = node.op === '!')) {
        node = node.it;
      }
      args = (node.getCall() || (node = Chain(node).add(Call())).getCall()).args;
      for (index = 0, len$ = args.length; index < len$; ++index) {
        a = args[index];
        if (a.filler) {
          break;
        }
      }
      return node.back = (args[index] = fun).body, node;
    };
    Call['let'] = function(args, body){
      var res$, i, len$, a, params;
      res$ = [];
      for (i = 0, len$ = args.length; i < len$; ++i) {
        a = args[i];
        if (a.op === '=' && !a.logic) {
          args[i] = a.right;
          res$.push(a.left);
        } else {
          res$.push(Var(a.varName() || a.carp('invalid "let" argument')));
        }
      }
      params = res$;
      args.unshift(Literal('this'));
      return this.block(Fun(params, body), args, '.call');
    };
    return Call;
  }(Node));
  List = (function(superclass){
    List.displayName = 'List';
    var prototype = extend$(List, superclass).prototype, constructor = List;
    prototype.children = ['items'];
    prototype.show = function(){
      return this.name;
    };
    prototype.named = function(name){
      this.name = name;
      return this;
    };
    prototype.isEmpty = function(){
      return !this.items.length;
    };
    prototype.assigns = function(it){
      var i$, ref$, len$, node;
      for (i$ = 0, len$ = (ref$ = this.items).length; i$ < len$; ++i$) {
        node = ref$[i$];
        if (node.assigns(it)) {
          return true;
        }
      }
    };
    List.compile = function(o, items){
      var indent, level, i, code, that;
      switch (items.length) {
      case 0:
        return '';
      case 1:
        return items[0].compile(o, LEVEL_LIST);
      }
      indent = o.indent, level = o.level;
      o.indent = indent + TAB;
      o.level = LEVEL_LIST;
      code = items[i = 0].compile(o);
      while (that = items[++i]) {
        code += ', ' + that.compile(o);
      }
      if (~code.indexOf('\n')) {
        code = "\n" + o.indent + code + "\n" + indent;
      }
      o.indent = indent;
      o.level = level;
      return code;
    };
    function List(){}
    return List;
  }(Node));
  exports.Obj = Obj = (function(superclass){
    Obj.displayName = 'Obj';
    var prototype = extend$(Obj, superclass).prototype, constructor = Obj;
    function Obj(items){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.items = items || [];
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.asObj = THIS;
    prototype.toSlice = function(o, base, symbol, assign){
      var items, ref$, ref, temps, i, len$, node, name, chain, logic, key, val;
      items = this.items;
      if (items.length > 1) {
        ref$ = base.cache(o), base = ref$[0], ref = ref$[1], temps = ref$[2];
      } else {
        ref = base;
      }
      for (i = 0, len$ = items.length; i < len$; ++i) {
        node = items[i];
        if (node.comment) {
          continue;
        }
        if (node instanceof Prop || node instanceof Splat) {
          node[name = (ref$ = node.children)[ref$.length - 1]] = chain = Chain(base, [Index(node[name].maybeKey())]);
        } else {
          if (logic = node.getDefault()) {
            node = node.first;
          }
          if (node instanceof Parens) {
            ref$ = node.cache(o, true), key = ref$[0], node = ref$[1];
            if (assign) {
              ref$ = [node, key], key = ref$[0], node = ref$[1];
            }
            key = Parens(key);
          } else {
            key = node;
          }
          val = chain = Chain(base, [Index(node.maybeKey(), symbol)]);
          if (logic) {
            val = (logic.first = val, logic);
          }
          items[i] = Prop(key, val);
        }
        base = ref;
      }
      chain || this.carp('empty slice');
      if (temps) {
        (chain.head = Var(temps[0])).temp = true;
      }
      return this;
    };
    prototype.compileNode = function(o){
      var items, code, idt, dic, i, len$, node, logic, rest, multi, key, val;
      items = this.items;
      if (!items.length) {
        return this.front ? '({})' : '{}';
      }
      code = '';
      idt = '\n' + (o.indent += TAB);
      dic = {};
      for (i = 0, len$ = items.length; i < len$; ++i) {
        node = items[i];
        if (node.comment) {
          code += idt + node.compile(o);
          continue;
        }
        if (logic = node.getDefault()) {
          node = node.first;
        }
        if (node instanceof Splat || (node.key || node) instanceof Parens) {
          rest = items.slice(i);
          break;
        }
        if (logic) {
          if (node instanceof Prop) {
            node.val = (logic.first = node.val, logic);
          } else {
            node = Prop(node, (logic.first = node, logic));
          }
        }
        if (multi) {
          code += ',';
        } else {
          multi = true;
        }
        code += idt + (node instanceof Prop
          ? (key = node.key, val = node.val, node.accessor
            ? node.compileAccessor(o, key = key.compile(o))
            : (val.ripName(key), (key = key.compile(o)) + ": " + val.compile(o, LEVEL_LIST)))
          : (key = node.compile(o)) + ": " + key);
        ID.test(key) || (key = Function("return " + key)());
        if (!(dic[key + "."] ^= 1)) {
          node.carp("duplicate property \"" + key + "\"");
        }
      }
      code = "{" + (code && code + '\n' + this.tab) + "}";
      rest && (code = Import(JS(code), Obj(rest)).compile((o.indent = this.tab, o)));
      if (this.front && '{' === code.charAt()) {
        return "(" + code + ")";
      } else {
        return code;
      }
    };
    return Obj;
  }(List));
  exports.Prop = Prop = (function(superclass){
    Prop.displayName = 'Prop';
    var prototype = extend$(Prop, superclass).prototype, constructor = Prop;
    function Prop(key, val){
      var that, i$, len$, fun, this$ = this instanceof ctor$ ? this : new ctor$;
      this$.key = key;
      this$.val = val;
      if (key.value === '...') {
        return Splat(this$.val);
      }
      if (that = val.getAccessors()) {
        this$.val = that;
        for (i$ = 0, len$ = that.length; i$ < len$; ++i$) {
          fun = that[i$];
          fun.x = (fun['void'] = fun.params.length) ? 's' : 'g';
        }
        this$['accessor'] = 'accessor';
      }
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.children = ['key', 'val'];
    prototype.show = function(){
      return this.accessor;
    };
    prototype.assigns = function(it){
      var ref$;
      return typeof (ref$ = this.val).assigns == 'function' ? ref$.assigns(it) : void 8;
    };
    prototype.compileAccessor = function(o, key){
      var funs, fun;
      funs = this.val;
      if (funs[1] && funs[0].params.length + funs[1].params.length !== 1) {
        funs[0].carp('invalid accessor parameter');
      }
      return (function(){
        var i$, ref$, len$, results$ = [];
        for (i$ = 0, len$ = (ref$ = funs).length; i$ < len$; ++i$) {
          fun = ref$[i$];
          fun.accessor = true;
          results$.push(fun.x + "et " + key + fun.compile(o, LEVEL_LIST).slice(8));
        }
        return results$;
      }()).join(',\n' + o.indent);
    };
    prototype.compileDescriptor = function(o){
      var obj, i$, ref$, len$, fun;
      obj = Obj();
      for (i$ = 0, len$ = (ref$ = this.val).length; i$ < len$; ++i$) {
        fun = ref$[i$];
        obj.items.push(Prop(Key(fun.x + 'et'), fun));
      }
      obj.items.push(Prop(Key('configurable'), Literal(true)));
      obj.items.push(Prop(Key('enumerable'), Literal(true)));
      return obj.compile(o);
    };
    return Prop;
  }(Node));
  exports.Arr = Arr = (function(superclass){
    Arr.displayName = 'Arr';
    var prototype = extend$(Arr, superclass).prototype, constructor = Arr;
    function Arr(items){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.items = items || [];
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.isArray = YES;
    prototype.asObj = function(){
      var i, item;
      return Obj((function(){
        var ref$, len$, results$ = [];
        for (i = 0, len$ = (ref$ = this.items).length; i < len$; ++i) {
          item = ref$[i];
          results$.push(Prop(Literal(i), item));
        }
        return results$;
      }.call(this)));
    };
    prototype.toSlice = function(o, base, symbol){
      var items, ref$, ref, i, len$, item, splat, chain;
      items = this.items;
      if (items.length > 1) {
        ref$ = base.cache(o), base = ref$[0], ref = ref$[1];
      } else {
        ref = base;
      }
      for (i = 0, len$ = items.length; i < len$; ++i) {
        item = items[i];
        if (splat = item instanceof Splat) {
          item = item.it;
        }
        if (item.isEmpty()) {
          continue;
        }
        chain = Chain(base, [Index(item, symbol)]);
        items[i] = splat ? Splat(chain) : chain;
        base = ref;
      }
      chain || this.carp('empty slice');
      return this;
    };
    prototype.compile = function(o){
      var items, code;
      items = this.items;
      if (!items.length) {
        return '[]';
      }
      if (code = Splat.compileArray(o, items)) {
        return this.newed ? "(" + code + ")" : code;
      }
      return "[" + List.compile(o, items) + "]";
    };
    Arr.maybe = function(nodes){
      if (nodes.length === 1 && !(nodes[0] instanceof Splat)) {
        return nodes[0];
      }
      return constructor(nodes);
    };
    Arr.wrap = function(it){
      return constructor([Splat((it.isArray = YES, it))]);
    };
    return Arr;
  }(List));
  exports.Unary = Unary = (function(superclass){
    Unary.displayName = 'Unary';
    var prototype = extend$(Unary, superclass).prototype, constructor = Unary;
    function Unary(op, it, flag){
      var that, i$, ref$, len$, node, this$ = this instanceof ctor$ ? this : new ctor$;
      if (that = !flag && it.unaries) {
        that.push(op);
        return it;
      }
      switch (op) {
      case '!':
        if (flag) {
          break;
        }
        if (it instanceof Fun && !it['void']) {
          return it['void'] = true, it;
        }
        return it.invert();
      case '++':
      case '--':
        if (flag) {
          this$.post = true;
        }
        break;
      case 'new':
        if (it instanceof Existence && !it.negated) {
          it = Chain(it).add(Call());
        }
        it.newed = true;
        for (i$ = 0, len$ = (ref$ = it.tails || '').length; i$ < len$; ++i$) {
          node = ref$[i$];
          if (node instanceof Call && !node['new']) {
            if (node.method === '.call') {
              node.args.shift();
            }
            node['new'] = 'new';
            node.method = '';
            return it;
          }
        }
        break;
      case '~':
        if (it instanceof Fun && it.statement && !it.bound) {
          return it.bound = 'this$', it;
        }
      }
      this$.op = op;
      this$.it = it;
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.children = ['it'];
    prototype.show = function(){
      return [this.post ? '@' : void 8] + this.op;
    };
    prototype.isCallable = function(){
      var ref$;
      return (ref$ = this.op) === 'do' || ref$ === 'new' || ref$ === 'delete';
    };
    prototype.isArray = function(){
      return this.it instanceof Arr && this.it.items.length || this.it instanceof Chain && this.it.isArray();
    };
    prototype.isString = function(){
      var ref$;
      return (ref$ = this.op) === 'typeof' || ref$ === 'classof';
    };
    prototype.invert = function(){
      var ref$;
      if (this.op === '!' && ((ref$ = this.it.op) === '!' || ref$ === '<' || ref$ === '>' || ref$ === '<=' || ref$ === '>=' || ref$ === 'in' || ref$ === 'instanceof')) {
        return this.it;
      }
      return constructor('!', this, true);
    };
    prototype.unfoldSoak = function(o){
      var ref$;
      return ((ref$ = this.op) === '++' || ref$ === '--' || ref$ === 'delete') && If.unfoldSoak(o, this, 'it');
    };
    prototype.getAccessors = function(){
      var items;
      if (this.op !== '~') {
        return;
      }
      if (this.it instanceof Fun) {
        return [this.it];
      }
      if (this.it instanceof Arr) {
        items = this.it.items;
        if (!items[2] && items[0] instanceof Fun && items[1] instanceof Fun) {
          return items;
        }
      }
    };
    function crement(it){
      return {
        '++': 'in',
        '--': 'de'
      }[it] + 'crement';
    }
    prototype.compileNode = function(o){
      var that, op, it, _, code;
      if (that = this.compileSpread(o)) {
        return that;
      }
      op = this.op, it = this.it;
      switch (op) {
      case '!':
        it.cond = true;
        break;
      case 'new':
        it.isCallable() || it.carp('invalid constructor');
        break;
      case 'do':
        _ = Parens(it instanceof Existence && !it.negated
          ? Chain(it).add(Call())
          : Call.make(it));
        return (_.front = this.front, _.newed = this.newed, _).compile(o);
      case 'delete':
        if (it instanceof Var || !it.isAssignable()) {
          this.carp('invalid delete');
        }
        if (o.level && !this['void']) {
          return this.compilePluck(o);
        }
        break;
      case '++':
      case '--':
        it.isAssignable() || this.carp('invalid ' + crement(op));
        if (that = it instanceof Var && o.scope.checkReadOnly(it.value)) {
          this.carp(crement(op) + " of " + that + " \"" + it.value + "\"");
        }
        if (this.post) {
          it.front = this.front;
        }
        break;
      case '^':
        return util('clone') + "(" + it.compile(o, LEVEL_LIST) + ")";
      case 'classof':
        return util('toString') + ".call(" + it.compile(o, LEVEL_LIST) + ").slice(8, -1)";
      }
      code = it.compile(o, LEVEL_OP + PREC.unary);
      if (this.post) {
        code += op;
      } else {
        if ((op === 'new' || op === 'typeof' || op === 'delete') || (op === '+' || op === '-') && op === code.charAt()) {
          op += ' ';
        }
        code = op + code;
      }
      if (o.level < LEVEL_CALL) {
        return code;
      } else {
        return "(" + code + ")";
      }
    };
    prototype.compileSpread = function(o){
      var it, ops, them, i, len$, node, sp, i$, op, lat, ref$;
      it = this.it;
      ops = [this];
      for (; it instanceof constructor; it = it.it) {
        ops.push(it);
      }
      if (!((it = it.expandSlice(o).unwrap()) instanceof Arr && (them = it.items).length)) {
        return '';
      }
      for (i = 0, len$ = them.length; i < len$; ++i) {
        node = them[i];
        if (sp = node instanceof Splat) {
          node = node.it;
        }
        for (i$ = ops.length - 1; i$ >= 0; --i$) {
          op = ops[i$];
          node = constructor(op.op, node, op.post);
        }
        them[i] = sp ? lat = Splat(node) : node;
      }
      if (!lat && (this['void'] || !o.level)) {
        it = (ref$ = Block(them), ref$.front = this.front, ref$['void'] = true, ref$);
      }
      return it.compile(o, LEVEL_PAREN);
    };
    prototype.compilePluck = function(o){
      var ref$, get, del, ref, code;
      ref$ = Chain(this.it).cacheReference(o), get = ref$[0], del = ref$[1];
      code = this.assigned
        ? ''
        : (ref = o.scope.temporary()) + " = ";
      code += get.compile(o, LEVEL_LIST) + ", delete " + del.compile(o, LEVEL_LIST);
      if (this.assigned) {
        return code;
      }
      code += ", " + o.scope.free(ref);
      if (o.level < LEVEL_LIST) {
        return code;
      } else {
        return "(" + code + ")";
      }
    };
    return Unary;
  }(Node));
  exports.Binary = Binary = (function(superclass){
    Binary.displayName = 'Binary';
    var COMPARER, INVERSIONS, prototype = extend$(Binary, superclass).prototype, constructor = Binary;
    function Binary(op, first, second){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      switch (op) {
      case 'of':
        return new Of(first, second);
      }
      this$.op = op;
      this$.first = first;
      this$.second = second;
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.children = ['first', 'second'];
    prototype.show = function(){
      return this.op;
    };
    prototype.isCallable = function(){
      var ref$;
      return ((ref$ = this.op) === '&&' || ref$ === '||' || ref$ === '?' || ref$ === '!?') && this.first.isCallable() && this.second.isCallable();
    };
    prototype.isArray = function(){
      switch (this.op) {
      case '*':
        return this.first.isArray();
      case '/':
        return this.second.isMatcher();
      }
    };
    prototype.isString = function(){
      switch (this.op) {
      case '+':
      case '*':
        return this.first.isString() || this.second.isString();
      case '-':
        return this.second.isMatcher();
      }
    };
    COMPARER = /^(?:[!=]=|[<>])=?$/;
    INVERSIONS = {
      '===': '!==',
      '!==': '===',
      '==': '!=',
      '!=': '=='
    };
    prototype.invert = function(){
      var that;
      if (that = !COMPARER.test(this.second.op) && INVERSIONS[this.op]) {
        this.op = that;
        return this;
      }
      return Unary('!', Parens(this), true);
    };
    prototype.getDefault = function(){
      switch (this.op) {
      case '?':
      case '||':
      case '&&':
      case '!?':
        return this;
      }
    };
    prototype.compileNode = function(o){
      var top, rite, items, level, code;
      switch (this.op) {
      case '?':
      case '!?':
        return this.compileExistence(o);
      case '*':
        if (this.second.isString()) {
          return this.compileJoin(o);
        }
        if (this.first.isString() || this.first.isArray()) {
          return this.compileRepeat(o);
        }
        break;
      case '-':
        if (this.second.isMatcher()) {
          return this.compileRemove(o);
        }
        break;
      case '/':
        if (this.second.isMatcher()) {
          return this.compileSplit(o);
        }
        break;
      case '**':
        return this.compilePow(o);
      case '<?':
      case '>?':
        return this.compileMinMax(o);
      case '&&':
      case '||':
        if (top = this['void'] || !o.level) {
          this.second['void'] = true;
        }
        if (top || this.cond) {
          this.first.cond = true;
          this.second.cond = true;
        }
        break;
      case 'instanceof':
        rite = this.second.expandSlice(o).unwrap(), items = rite.items;
        if (rite instanceof Arr) {
          if (items[1]) {
            return this.compileAnyInstanceOf(o, items);
          }
          this.second = items[0] || rite;
        }
        this.second.isCallable() || this.second.carp('invalid instanceof operand');
        break;
      default:
        if (COMPARER.test(this.op) && COMPARER.test(this.second.op)) {
          return this.compileChain(o);
        }
      }
      this.first.front = this.front;
      code = this.first.compile(o, level = LEVEL_OP + PREC[this.op]) + " " + this.op + " " + this.second.compile(o, level);
      if (o.level <= level) {
        return code;
      } else {
        return "(" + code + ")";
      }
    };
    prototype.compileChain = function(o){
      var level, code, ref$, sub;
      code = this.first.compile(o, level = LEVEL_OP + PREC[this.op]);
      ref$ = this.second.first.cache(o, true), sub = ref$[0], this.second.first = ref$[1];
      code += " " + this.op + " " + sub.compile(o, level) + " && " + this.second.compile(o, LEVEL_OP);
      if (o.level <= LEVEL_OP) {
        return code;
      } else {
        return "(" + code + ")";
      }
    };
    prototype.compileExistence = function(o){
      var ref$, _;
      if (this.op === '!?') {
        _ = (ref$ = If(Existence(this.first), this.second), ref$.cond = this.cond, ref$['void'] = this['void'] || !o.level, ref$);
        return _.compileExpression(o);
      }
      if (this['void'] || !o.level) {
        _ = Binary('&&', Existence(this.first, true), this.second);
        return (_['void'] = true, _).compileNode(o);
      }
      _ = this.first.cache(o, true);
      return If(Existence(_[0]), _[1]).addElse(this.second).compileExpression(o);
    };
    prototype.compileAnyInstanceOf = function(o, items){
      var ref$, sub, ref, test, i$, len$, item;
      ref$ = this.first.cache(o), sub = ref$[0], ref = ref$[1], this.temps = ref$[2];
      test = Binary('instanceof', sub, items.shift());
      for (i$ = 0, len$ = items.length; i$ < len$; ++i$) {
        item = items[i$];
        test = Binary('||', test, Binary('instanceof', ref, item));
      }
      return Parens(test).compile(o);
    };
    prototype.compileMinMax = function(o){
      var lefts, rites, _;
      lefts = this.first.cache(o, true);
      rites = this.second.cache(o, true);
      _ = Binary(this.op.charAt(), lefts[0], rites[0]);
      return If(_, lefts[1]).addElse(rites[1]).compileExpression(o);
    };
    prototype.compileMethod = function(o, klass, method, arg){
      var args;
      args = [this.second].concat(arg || []);
      if (this.first["is" + klass]()) {
        return Chain(this.first, [Index(Key(method)), Call(args)]).compile(o);
      } else {
        args.unshift(this.first);
        return Call.make(JS(util(method) + '.call'), args).compile(o);
      }
    };
    prototype.compileJoin = function(it){
      return this.compileMethod(it, 'Array', 'join');
    };
    prototype.compileRemove = function(it){
      return this.compileMethod(it, 'String', 'replace', JS("''"));
    };
    prototype.compileSplit = function(it){
      return this.compileMethod(it, 'String', 'split');
    };
    prototype.compileRepeat = function(o){
      var x, n, items, arr, that, refs, i, len$, item, ref$, q;
      x = this.first, n = this.second;
      items = (x = x.expandSlice(o).unwrap()).items;
      arr = x.isArray() && 'Array';
      if (that = items && Splat.compileArray(o, items)) {
        x = JS(that);
        items = null;
      }
      if (arr && !items || !(n instanceof Literal && n.value < 0x20)) {
        return Call.make(Util('repeat' + (arr || 'String')), [x, n]).compile(o);
      }
      n = +n.value;
      if (1 <= n && n < 2) {
        return x.compile(o);
      }
      if (items) {
        if (n < 1) {
          return Block(items).add(JS('[]')).compile(o);
        }
        refs = [];
        for (i = 0, len$ = items.length; i < len$; ++i) {
          item = items[i];
          ref$ = item.cache(o, 1), items[i] = ref$[0], refs[refs.length] = ref$[1];
        }
        items.push((ref$ = JS(), ref$.compile = function(){
          return (repeatString$(", " + List.compile(o, refs), n - 1)).slice(2);
        }, ref$));
        return x.compile(o);
      } else if (x instanceof Literal) {
        return (q = (x = x.compile(o)).charAt()) + repeatString$(x.slice(1, -1) + "", n) + q;
      } else {
        if (n < 1) {
          return Block(x.it).add(JS("''")).compile(o);
        }
        x = (refs = x.cache(o, 1, LEVEL_OP))[0] + repeatString$(" + " + refs[1], n - 1);
        if (o.level < LEVEL_OP + PREC['+']) {
          return x;
        } else {
          return "(" + x + ")";
        }
      }
    };
    prototype.compilePow = function(o){
      return Call.make(JS('Math.pow'), [this.first, this.second]).compile(o);
    };
    return Binary;
  }(Node));
  exports.Assign = Assign = (function(superclass){
    Assign.displayName = 'Assign';
    var prototype = extend$(Assign, superclass).prototype, constructor = Assign;
    function Assign(left, rite, op, logic){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.left = left;
      this$.op = op || '=';
      this$.logic = logic || this$.op.logic;
      this$.op += '';
      this$[rite instanceof Node ? 'right' : 'unaries'] = rite;
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.children = ['left', 'right'];
    prototype.show = function(){
      return (this.logic || '') + this.op;
    };
    prototype.assigns = function(it){
      return this.left.assigns(it);
    };
    prototype.delegate(['isCallable', 'isRegex'], function(it){
      var ref$;
      return ((ref$ = this.op) === '=' || ref$ === ':=') && this.right[it]();
    });
    prototype.isArray = function(){
      switch (this.op) {
      case '=':
      case ':=':
        return this.right.isArray();
      case '/=':
        return this.right.isMatcher();
      }
    };
    prototype.isString = function(){
      switch (this.op) {
      case '=':
      case ':=':
      case '+=':
      case '*=':
        return this.right.isString();
      case '-=':
        return this.right.isMatcher();
      }
    };
    prototype.unfoldSoak = function(o){
      var ref$, that, rite, temps;
      if (this.left instanceof Existence) {
        if (that = (ref$ = this.left = this.left.it).name, delete ref$.name, that) {
          rite = this.right;
          rite = Assign(this.right = Var(that), rite);
        } else {
          ref$ = this.right.cache(o), rite = ref$[0], this.right = ref$[1], temps = ref$[2];
        }
        return ref$ = If(Existence(rite), this), ref$.temps = temps, ref$.cond = this.cond, ref$['void'] = this['void'], ref$;
      }
      return If.unfoldSoak(o, this, 'left');
    };
    prototype.unfoldAssign = function(){
      return this.access && this;
    };
    prototype.compileNode = function(o){
      var left, ref$, i$, len$, op, right, reft, lvar, sign, name, res, code, del, that;
      left = this.left.expandSlice(o, true).unwrap();
      if (!this.right) {
        left.isAssignable() || left.carp('invalid unary assign');
        ref$ = Chain(left).cacheReference(o), left = ref$[0], this.right = ref$[1];
        for (i$ = 0, len$ = (ref$ = this.unaries).length; i$ < len$; ++i$) {
          op = ref$[i$];
          this.right = Unary(op, this.right);
        }
      }
      if (left.isEmpty()) {
        return (ref$ = Parens(this.right), ref$.front = this.front, ref$.newed = this.newed, ref$).compile(o);
      }
      if (left.getDefault()) {
        this.right = Binary(left.op, this.right, left.second);
        left = left.first;
      }
      if (left.items) {
        return this.compileDestructuring(o, left);
      }
      left.isAssignable() || left.carp('invalid assign');
      if (this.logic) {
        return this.compileConditional(o, left);
      }
      op = this.op, right = this.right;
      if (op === '<?=' || op === '>?=') {
        return this.compileMinMax(o, left, right);
      }
      if (op === '**=' || op === '*=' && right.isString() || (op === '-=' || op === '/=') && right.isMatcher()) {
        ref$ = Chain(left).cacheReference(o), left = ref$[0], reft = ref$[1];
        right = Binary(op.slice(0, -1), reft, right);
        op = ':=';
      }
      (right = right.unparen()).ripName(left = left.unwrap());
      lvar = left instanceof Var;
      sign = op.replace(':', '');
      name = (left.front = true, left).compile(o, LEVEL_LIST);
      code = !o.level && right instanceof While && !right['else'] && (lvar || left.isSimpleAccess())
        ? (res = o.scope.temporary('res')) + " = [];\n" + this.tab + right.makeReturn(res).compile(o) + "\n" + this.tab + name + " " + sign + " " + o.scope.free(res)
        : (name + " " + sign + " ") + (right.assigned = true, right).compile(o, LEVEL_LIST);
      if (lvar) {
        del = right.op === 'delete';
        if (op === '=') {
          o.scope.declare(name, left, this['const']);
        } else if (that = o.scope.checkReadOnly(name)) {
          left.carp("assignment to " + that + " \"" + name + "\"");
        }
      }
      if (that = o.level) {
        if (del) {
          code += ", " + name;
        }
        if (that > (del ? LEVEL_PAREN : LEVEL_LIST)) {
          code = "(" + code + ")";
        }
      }
      return code;
    };
    prototype.compileConditional = function(o, left){
      var ref$, lefts, morph;
      if (left instanceof Var && ((ref$ = this.logic) === '?' || ref$ === '!?') && this.op === '=') {
        o.scope.declare(left.value, left);
      }
      lefts = Chain(left).cacheReference(o);
      o.level += LEVEL_OP < o.level;
      morph = Binary(this.logic, lefts[0], (this.logic = false, this.left = lefts[1], this));
      return (morph['void'] = this['void'], morph).compileNode(o);
    };
    prototype.compileMinMax = function(o, left, right){
      var lefts, rites, test, put, ref$;
      lefts = Chain(left).cacheReference(o);
      rites = right.cache(o, true);
      test = Binary(this.op.replace('?', ''), lefts[0], rites[0]);
      put = Assign(lefts[1], rites[1], ':=');
      if (this['void'] || !o.level) {
        return Parens(Binary('||', test, put)).compile(o);
      }
      ref$ = test.second.cache(o, true), test.second = ref$[0], left = ref$[1];
      return If(test, left).addElse(put).compileExpression(o);
    };
    prototype.compileDestructuring = function(o, left){
      var items, len, ret, rite, that, cache, rref, list, code;
      items = left.items, len = items.length;
      ret = o.level && !this['void'];
      rite = this.right.compile(o, len === 1 ? LEVEL_CALL : LEVEL_LIST);
      if (that = left.name) {
        cache = that + " = " + rite;
        o.scope.declare(rite = that, left);
      } else if ((ret || len > 1) && (!ID.test(rite) || left.assigns(rite))) {
        cache = (rref = o.scope.temporary()) + " = " + rite;
        rite = rref;
      }
      list = this["rend" + left.constructor.displayName](o, items, rite);
      if (rref) {
        o.scope.free(rref);
      }
      if (cache) {
        list.unshift(cache);
      }
      if (ret || !list.length) {
        list.push(rite);
      }
      code = list.join(', ');
      if (list.length < 2 || o.level < LEVEL_LIST) {
        return code;
      } else {
        return "(" + code + ")";
      }
    };
    prototype.rendArr = function(o, nodes, rite){
      var i, len$, node, skip, len, val, ivar, start, inc, rcache, ref$, results$ = [];
      for (i = 0, len$ = nodes.length; i < len$; ++i) {
        node = nodes[i];
        if (node.isEmpty()) {
          continue;
        }
        if (node instanceof Splat) {
          len && node.carp('multiple splat in an assignment');
          skip = (node = node.it).isEmpty();
          if (i + 1 === (len = nodes.length)) {
            if (skip) {
              break;
            }
            val = Arr.wrap(JS(util('slice') + '.call(' + rite + (i ? ", " + i + ")" : ')')));
          } else {
            val = ivar = rite + ".length - " + (len - i - 1);
            if (skip && i + 2 === len) {
              continue;
            }
            start = i + 1;
            this.temps = [ivar = o.scope.temporary('i')];
            val = skip
              ? (node = Var(ivar), Var(val))
              : Arr.wrap(JS(i + " < (" + ivar + " = " + val + ")\ ? " + util('slice') + ".call(" + rite + ", " + i + ", " + ivar + ")\ : (" + ivar + " = " + i + ", [])"));
          }
        } else {
          (inc = ivar) && start < i && (inc += " + " + (i - start));
          val = Chain(rcache || (rcache = Literal(rite)), [Index(JS(inc || i))]);
        }
        results$.push((ref$ = clone$(this), ref$.left = node, ref$.right = val, ref$['void'] = true, ref$).compile(o, LEVEL_PAREN));
      }
      return results$;
    };
    prototype.rendObj = function(o, nodes, rite){
      var i$, len$, node, splat, logic, ref$, key, rcache, val, results$ = [];
      for (i$ = 0, len$ = nodes.length; i$ < len$; ++i$) {
        node = nodes[i$];
        if (splat = node instanceof Splat) {
          node = node.it;
        }
        if (logic = node.getDefault()) {
          node = node.first;
        }
        if (node instanceof Parens) {
          ref$ = Chain(node.it).cacheReference(o), node = ref$[0], key = ref$[1];
        } else if (node instanceof Prop) {
          node = (key = node.key, node).val;
        } else {
          key = node;
        }
        if (node instanceof Key) {
          node = Var(node.name);
        }
        if (logic) {
          node = (logic.first = node, logic);
        }
        val = Chain(rcache || (rcache = Var(rite)), [Index(key.maybeKey())]);
        if (splat) {
          val = Import(Obj(), val);
        }
        results$.push((ref$ = clone$(this), ref$.left = node, ref$.right = val, ref$['void'] = true, ref$).compile(o, LEVEL_PAREN));
      }
      return results$;
    };
    return Assign;
  }(Node));
  exports.Import = Import = (function(superclass){
    Import.displayName = 'Import';
    var prototype = extend$(Import, superclass).prototype, constructor = Import;
    function Import(left, right, all){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.left = left;
      this$.right = right;
      this$.all = all && 'All';
      if (!all && left instanceof Obj && right.items) {
        return Obj(left.items.concat(right.asObj().items));
      }
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.children = ['left', 'right'];
    prototype.show = function(){
      return this.all;
    };
    prototype.delegate(['isCallable', 'isArray'], function(it){
      return this.left[it]();
    });
    prototype.unfoldSoak = function(o){
      var left, value, ref$, temps;
      left = this.left;
      if (left instanceof Existence && !left.negated) {
        if ((left = left.it) instanceof Var) {
          value = (this.left = left).value;
          if (!o.scope.check(value, true)) {
            left = JS("typeof " + value + " != 'undefined' && " + value);
          }
        } else {
          ref$ = left.cache(o), left = ref$[0], this.left = ref$[1], temps = ref$[2];
        }
        return ref$ = If(left, this), ref$.temps = temps, ref$.soak = true, ref$.cond = this.cond, ref$['void'] = this['void'], ref$;
      }
      return If.unfoldSoak(o, this, 'left') || (this['void'] || !o.level) && If.unfoldSoak(o, this, 'right');
    };
    prototype.compileNode = function(o){
      var right;
      right = this.right;
      if (!this.all) {
        if (right instanceof Chain) {
          right = right.unfoldSoak(o) || right.unfoldAssign(o) || right.expandSlice(o).unwrap();
        }
        if (right instanceof List) {
          return this.compileAssign(o, right.asObj().items);
        }
      }
      return Call.make(Util("import" + (this.all || '')), [this.left, right]).compileNode(o);
    };
    prototype.compileAssign = function(o, items){
      var top, reft, ref$, left, delim, space, code, i, len$, node, com, logic, dyna, key, val;
      if (!items.length) {
        return this.left.compile(o);
      }
      top = !o.level;
      if (items.length < 2 && (top || this['void'] || items[0] instanceof Splat)) {
        reft = this.left;
        if (reft.isComplex()) {
          reft = Parens(reft);
        }
      } else {
        ref$ = this.left.cache(o), left = ref$[0], reft = ref$[1], this.temps = ref$[2];
      }
      ref$ = top
        ? [';', '\n' + this.tab]
        : [',', ' '], delim = ref$[0], space = ref$[1];
      delim += space;
      code = this.temps ? left.compile(o, LEVEL_PAREN) + delim : '';
      for (i = 0, len$ = items.length; i < len$; ++i) {
        node = items[i];
        i && (code += com ? space : delim);
        if (com = node.comment) {
          code += node.compile(o);
          continue;
        }
        if (node instanceof Splat) {
          code += Import(reft, node.it).compile(o);
          continue;
        }
        if (logic = node.getDefault()) {
          node = node.first;
        }
        if (dyna = node instanceof Parens) {
          ref$ = node.it.cache(o, true), key = ref$[0], val = ref$[1];
        } else if (node instanceof Prop) {
          key = node.key, val = node.val;
          if (node.accessor) {
            if (key instanceof Key) {
              key = JS("'" + key.name + "'");
            }
            code += "Object.defineProperty(" + reft.compile(o, LEVEL_LIST) + ", " + key.compile(o, LEVEL_LIST) + ", " + node.compileDescriptor(o) + ")";
            continue;
          }
        } else {
          key = val = node;
        }
        dyna || (key = key.maybeKey());
        logic && (val = (logic.first = val, logic));
        code += Assign(Chain(reft, [Index(key)]), val).compile(o, LEVEL_PAREN);
      }
      if (top) {
        return code;
      }
      this['void'] || node instanceof Splat || (code += (com ? ' ' : ', ') + reft.compile(o, LEVEL_PAREN));
      if (o.level < LEVEL_LIST) {
        return code;
      } else {
        return "(" + code + ")";
      }
    };
    return Import;
  }(Node));
  exports.Of = Of = (function(superclass){
    Of.displayName = 'Of';
    var prototype = extend$(Of, superclass).prototype, constructor = Of;
    importAll$(prototype, arguments[1]);
    function Of(item, array){
      this.item = item;
      this.array = array;
    }
    prototype.children = ['item', 'array'];
    prototype.compileNode = function(o){
      var array, items, code, ref$, sub, ref, cmp, cnj, i, len$, test;
      items = (array = this.array.expandSlice(o).unwrap()).items;
      if (!(array instanceof Arr) || items.length < 2) {
        return (this.negated ? '!' : '') + "" + util('of') + "(" + this.item.compile(o, LEVEL_LIST) + ", " + array.compile(o, LEVEL_LIST) + ")";
      }
      code = '';
      ref$ = this.item.cache(o, false, LEVEL_PAREN), sub = ref$[0], ref = ref$[1];
      ref$ = this.negated
        ? [' !== ', ' && ']
        : [' === ', ' || '], cmp = ref$[0], cnj = ref$[1];
      for (i = 0, len$ = items.length; i < len$; ++i) {
        test = items[i];
        code && (code += cnj);
        if (test instanceof Splat) {
          code += (ref$ = new Of(Var(ref), test.it), ref$.negated = this.negated, ref$).compile(o, LEVEL_TOP);
          if (!(i || sub === ref)) {
            code = "(" + sub + ", " + code + ")";
          }
        } else {
          code += (i || sub === ref
            ? ref
            : "(" + sub + ")") + cmp + test.compile(o, LEVEL_OP + PREC['==']);
        }
      }
      sub === ref || o.scope.free(ref);
      if (o.level < LEVEL_OP + PREC['||']) {
        return code;
      } else {
        return "(" + code + ")";
      }
    };
    return Of;
  }(Node, Negatable));
  exports.Existence = Existence = (function(superclass){
    Existence.displayName = 'Existence';
    var prototype = extend$(Existence, superclass).prototype, constructor = Existence;
    importAll$(prototype, arguments[1]);
    function Existence(it, negated){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.it = it;
      this$.negated = negated;
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.children = ['it'];
    prototype.compileNode = function(o){
      var ref$, node, code, op, eq;
      node = (ref$ = this.it.unwrap(), ref$.front = this.front, ref$);
      code = node.compile(o, LEVEL_OP + PREC['==']);
      if (node instanceof Var && !o.scope.check(code, true)) {
        ref$ = this.negated
          ? ['||', '=']
          : ['&&', '!'], op = ref$[0], eq = ref$[1];
        code = "typeof " + code + " " + eq + "= 'undefined' " + op + " " + code + " " + eq + "== null";
      } else {
        code += " " + (op = this.negated ? '==' : '!=') + " null";
      }
      if (o.level < LEVEL_OP + PREC[op]) {
        return code;
      } else {
        return "(" + code + ")";
      }
    };
    return Existence;
  }(Node, Negatable));
  exports.Fun = Fun = (function(superclass){
    Fun.displayName = 'Fun';
    var prototype = extend$(Fun, superclass).prototype, constructor = Fun;
    function Fun(params, body, bound){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.params = params || [];
      this$.body = body || Block();
      this$.bound = bound && 'this$';
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.children = ['params', 'body'];
    prototype.show = function(){
      return this.bound;
    };
    prototype.named = function(it){
      return this.name = it, this.statement = true, this;
    };
    prototype.isCallable = YES;
    prototype.isStatement = function(){
      return !!this.statement;
    };
    prototype.traverseChildren = function(arg$, xscope){
      if (xscope) {
        return superclass.prototype.traverseChildren.apply(this, arguments);
      }
    };
    prototype.makeReturn = function(){
      if (this.statement) {
        return this.returns = true, this;
      } else {
        return superclass.prototype.makeReturn.apply(this, arguments);
      }
    };
    prototype.ripName = function(it){
      this.name || (this.name = it.varName());
    };
    prototype.compileNode = function(o){
      var pscope, sscope, scope, that, loop, body, name, tab, code, ref$;
      pscope = o.scope;
      sscope = pscope.shared || pscope;
      scope = o.scope = this.body.scope = new Scope(this.wrapper ? pscope : sscope, this.wrapper && sscope);
      scope.fun = this;
      if (that = this.proto) {
        scope.assign('prototype', that.compile(o) + ".prototype");
      }
      if (that = this.cname) {
        scope.assign('constructor', that);
      }
      if (loop = o.loop, delete o.loop, loop) {
        o.indent = this.tab = '';
      }
      o.indent += TAB;
      body = this.body, name = this.name, tab = this.tab;
      code = 'function';
      if (this.bound === 'this$') {
        if (this.ctor) {
          scope.assign('this$', 'this instanceof ctor$ ? this : new ctor$');
          body.add(Return(Literal('this$')));
        } else if (that = (ref$ = sscope.fun) != null ? ref$.bound : void 8) {
          this.bound = that;
        } else {
          sscope.assign('this$', 'this');
        }
      }
      if (this.statement) {
        name || this.carp('nameless function declaration');
        pscope === o.block.scope || this.carp('misplaced function declaration');
        this.accessor && this.carp('named accessor');
        pscope.add(name, 'function', this);
      }
      if (this.statement || name && this.labeled) {
        code += ' ' + scope.add(name, 'function', this);
      }
      this['void'] || this.ctor || this.newed || body.makeReturn();
      code += "(" + this.compileParams(scope) + "){";
      if (that = body.compileWithDeclarations(o)) {
        code += "\n" + that + "\n" + tab;
      }
      code += '}';
      if (loop) {
        return pscope.assign(pscope.temporary('fn'), code);
      }
      if (this.returns) {
        code += "\n" + tab + "return " + name + ";";
      } else if (this.bound && this.ctor) {
        code += ' function ctor$(){} ctor$.prototype = prototype;';
      }
      if (this.front && !this.statement) {
        return "(" + code + ")";
      } else {
        return code;
      }
    };
    prototype.compileParams = function(scope){
      var params, body, names, assigns, i, len$, p, splace, rest, that, i$, vr, df, ref$, ref1$, v, name;
      params = this.params, body = this.body;
      names = [];
      assigns = [];
      for (i = 0, len$ = params.length; i < len$; ++i) {
        p = params[i];
        if (p instanceof Splat) {
          splace = i;
        } else if (p.op === '=' && !p.logic) {
          params[i] = Binary('?', p.left, p.right);
        }
      }
      if (splace != null) {
        rest = params.splice(splace, 9e9);
        if (!rest[1] && rest[0].it.isEmpty()) {
          rest = 0;
        }
      } else if (this.accessor) {
        if (that = params[1]) {
          that.carp('excess accessor parameter');
        }
      } else if (!(params.length || this.wrapper)) {
        if (body.traverseChildren(function(it){
          return it.value === 'it' || null;
        })) {
          params[0] = Var('it');
        }
      }
      if (params.length) {
        for (i$ = 0, len$ = params.length; i$ < len$; ++i$) {
          p = params[i$];
          vr = p;
          if (df = vr.getDefault()) {
            vr = vr.first;
          }
          if (vr.isEmpty()) {
            vr = Var(scope.temporary('arg'));
          } else if (!(vr instanceof Var)) {
            v = Var((ref1$ = (ref$ = vr.it || vr).name, delete ref$.name, ref1$) || vr.varName() || scope.temporary('arg'));
            assigns.push(Assign(vr, df ? Binary(p.op, v, p.second) : v));
            vr = v;
          } else if (df) {
            assigns.push(Assign(vr, p.second, '=', p.op));
          }
          names.push(name = scope.add(vr.value, 'arg', p));
        }
      }
      if (rest) {
        while (splace--) {
          rest.unshift(Arr());
        }
        assigns.push(Assign(Arr(rest), Literal('arguments')));
      }
      if (assigns.length) {
        (ref$ = this.body).prepend.apply(ref$, assigns);
      }
      return names.join(', ');
    };
    return Fun;
  }(Node));
  exports.Class = Class = (function(superclass){
    Class.displayName = 'Class';
    var prototype = extend$(Class, superclass).prototype, constructor = Class;
    function Class(title, sup, mixins, body){
      this.title = title;
      this.sup = sup;
      this.mixins = mixins;
      this.fun = Fun([], body);
    }
    prototype.children = ['title', 'sup', 'mixins', 'fun'];
    prototype.isCallable = YES;
    prototype.ripName = function(it){
      this.name = it.varName();
    };
    prototype.compile = function(o, level){
      var fun, body, lines, title, decl, name, proto, i, len$, node, i$, ref$, len1$, prop, ref1$, j$, len2$, f, ctor, vname, args, that, res$, imports, clas;
      fun = this.fun, body = fun.body, lines = body.lines, title = this.title;
      decl = title != null ? title.varName() : void 8;
      name = decl || this.name;
      if (ID.test(name || '')) {
        fun.cname = name;
      } else {
        name = 'constructor';
      }
      proto = Var('prototype');
      for (i = 0, len$ = lines.length; i < len$; ++i) {
        node = lines[i];
        if (node instanceof Obj) {
          lines[i] = Import(proto, node);
          for (i$ = 0, len1$ = (ref$ = node.items).length; i$ < len1$; ++i$) {
            prop = ref$[i$];
            if ((ref1$ = prop.key) instanceof Key || ref1$ instanceof Literal) {
              if (prop.val instanceof Fun) {
                prop.val.meth = prop.key;
              } else if (prop.accessor) {
                for (j$ = 0, len2$ = (ref1$ = prop.val).length; j$ < len2$; ++j$) {
                  f = ref1$[j$];
                  f.meth = prop.key;
                }
              }
            }
          }
        } else if (node instanceof Fun && !node.statement) {
          ctor && node.carp('redundant constructor');
          ctor = node;
        }
      }
      ctor || (ctor = lines[lines.length] = Fun());
      ctor.name = name;
      ctor.ctor = true;
      ctor.statement = true;
      lines.push(vname = fun.proto = Var(fun.bound = name));
      args = [];
      if (that = this.sup) {
        args.push(that);
        fun.proto = Util.Extends(vname, (ref$ = fun.params)[ref$.length] = Var('superclass'));
      }
      if (that = this.mixins) {
        res$ = [];
        for (i$ = 0, len$ = that.length; i$ < len$; ++i$) {
          args[args.length] = that[i$];
          res$.push(Import(proto, JS("arguments[" + (args.length - 1) + "]"), true));
        }
        imports = res$;
        body.prepend.apply(body, imports);
      }
      fun.cname && body.prepend(Literal(name + ".displayName = '" + name + "'"));
      clas = Parens(Call.make(fun, args), true);
      if (decl && title.isComplex()) {
        clas = Assign(vname, clas);
      }
      if (title) {
        clas = Assign(title, clas);
      }
      return clas.compile(o, level);
    };
    return Class;
  }(Node));
  exports.Super = Super = (function(superclass){
    Super.displayName = 'Super';
    var prototype = extend$(Super, superclass).prototype, constructor = Super;
    prototype.isCallable = YES;
    prototype.compile = function(o){
      var scope, that;
      scope = o.scope;
      for (; that = !scope.get('superclass') && scope.fun; scope = scope.parent) {
        if (that = that.meth) {
          return 'superclass.prototype' + Index(that).compile(o);
        }
      }
      return 'superclass';
    };
    function Super(){}
    return Super;
  }(Node));
  exports.Parens = Parens = (function(superclass){
    Parens.displayName = 'Parens';
    var prototype = extend$(Parens, superclass).prototype, constructor = Parens;
    function Parens(it, keep, string){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.it = it;
      this$.keep = keep;
      this$.string = string;
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.children = ['it'];
    prototype.show = function(){
      return this.string && '""';
    };
    prototype.delegate(['isComplex', 'isCallable', 'isArray', 'isRegex'], function(it){
      return this.it[it]();
    });
    prototype.isString = function(){
      return this.string || this.it.isString();
    };
    prototype.unparen = function(){
      if (this.keep) {
        return this;
      } else {
        return this.it.unparen();
      }
    };
    prototype.compile = function(o, level){
      var it;
      level == null && (level = o.level);
      it = this.it;
      it.cond || (it.cond = this.cond), it['void'] || (it['void'] = this['void']);
      if (this.calling && (!level || this['void'])) {
        it.head['void'] = true;
      }
      if (!(this.keep || this.newed || level >= LEVEL_OP + PREC[it.op])) {
        return (it.front = this.front, it).compile(o, level || LEVEL_PAREN);
      }
      if (it.isStatement()) {
        return it.compileClosure(o);
      } else {
        return "(" + it.compile(o, LEVEL_PAREN) + ")";
      }
    };
    return Parens;
  }(Node));
  exports.Splat = Splat = (function(superclass){
    Splat.displayName = 'Splat';
    var ref$, prototype = extend$(Splat, superclass).prototype, constructor = Splat;
    function Splat(it, filler){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.it = it;
      this$.filler = filler;
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    ref$ = Parens.prototype, prototype.children = ref$.children, prototype.isComplex = ref$.isComplex;
    prototype.isAssignable = YES;
    prototype.assigns = function(it){
      return this.it.assigns(it);
    };
    prototype.compile = function(){
      return this.carp('invalid splat');
    };
    Splat.compileArray = function(o, list, apply){
      var index, len$, node, args, atoms, i$, ref$;
      expand(list);
      for (index = 0, len$ = list.length; index < len$; ++index) {
        node = list[index];
        if (node instanceof Splat) {
          break;
        }
      }
      if (index >= list.length) {
        return '';
      }
      if (!list[1]) {
        return (apply ? Object : ensureArray)(list[0].it).compile(o, LEVEL_LIST);
      }
      args = [];
      atoms = [];
      for (i$ = 0, len$ = (ref$ = list.splice(index, 9e9)).length; i$ < len$; ++i$) {
        node = ref$[i$];
        if (node instanceof Splat) {
          if (atoms.length) {
            args.push(Arr(atoms.splice(0, 9e9)));
          }
          args.push(ensureArray(node.it));
        } else {
          atoms.push(node);
        }
      }
      if (atoms.length) {
        args.push(Arr(atoms));
      }
      return (index
        ? Arr(list)
        : args.shift()).compile(o, LEVEL_CALL) + (".concat(" + List.compile(o, args) + ")");
    };
    function expand(nodes){
      var index, node, it;
      index = -1;
      while (node = nodes[++index]) {
        if (node instanceof Splat) {
          it = node.it;
          if (it.isEmpty()) {
            nodes.splice(index--, 1);
          } else if (it instanceof Arr) {
            nodes.splice.apply(nodes, [index, 1].concat(slice$.call(expand(it.items))));
            index += it.items.length - 1;
          }
        }
      }
      return nodes;
    }
    function ensureArray(node){
      if (node.isArray()) {
        return node;
      }
      return Call.make(JS(util('slice') + '.call'), [node]);
    }
    return Splat;
  }(Node));
  exports.Jump = Jump = (function(superclass){
    Jump.displayName = 'Jump';
    var prototype = extend$(Jump, superclass).prototype, constructor = Jump;
    function Jump(verb, label){
      this.verb = verb;
      this.label = label;
    }
    prototype.show = function(){
      var that;
      return (this.verb || '') + ((that = this.label) ? ' ' + that : '');
    };
    prototype.isStatement = YES;
    prototype.makeReturn = THIS;
    prototype.getJump = function(ctx){
      var that;
      ctx || (ctx = {});
      if (!ctx[this.verb]) {
        return this;
      }
      if (that = this.label) {
        return !of$(that, ctx.labels || (ctx.labels = [])) && this;
      }
    };
    prototype.compileNode = function(o){
      var that;
      if (that = this.label) {
        of$(that, o.labels || (o.labels = [])) || this.carp("unknown label \"" + that + "\"");
      } else {
        o[this.verb] || this.carp("stray " + this.verb);
      }
      return this.show() + ';';
    };
    Jump.extended = function(sub){
      sub.prototype.children = ['it'];
      this[sub.displayName.toLowerCase()] = sub;
    };
    return Jump;
  }(Node));
  exports.Throw = Throw = (function(superclass){
    Throw.displayName = 'Throw';
    var prototype = extend$(Throw, superclass).prototype, constructor = Throw;
    function Throw(it){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.it = it;
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.getJump = VOID;
    prototype.compileNode = function(o){
      var ref$;
      return "throw " + (((ref$ = this.it) != null ? ref$.compile(o, LEVEL_PAREN) : void 8) || 'null') + ";";
    };
    return Throw;
  }(Jump));
  exports.Return = Return = (function(superclass){
    Return.displayName = 'Return';
    var prototype = extend$(Return, superclass).prototype, constructor = Return;
    function Return(it){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      if (it && it.value !== 'void') {
        this$.it = it;
      }
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.getJump = THIS;
    prototype.compileNode = function(o){
      var that;
      return "return" + ((that = this.it) ? ' ' + that.compile(o, LEVEL_PAREN) : '') + ";";
    };
    return Return;
  }(Jump));
  exports.While = While = (function(superclass){
    While.displayName = 'While';
    var prototype = extend$(While, superclass).prototype, constructor = While;
    function While(test, un, mode){
      this.un = un;
      mode && (mode instanceof Node
        ? this.update = mode
        : this.post = true);
      if (this.post || test.value !== '' + !un) {
        this.test = test;
      }
    }
    prototype.children = ['test', 'body', 'update', 'else'];
    prototype.aSource = 'test';
    prototype.aTargets = ['body', 'update'];
    prototype.show = function(){
      return [this.un ? '!' : void 8, this.post ? 'do' : void 8].join('');
    };
    prototype.isStatement = prototype.isArray = YES;
    prototype.getJump = function(ctx){
      var i$, ref$, len$, node;
      ctx || (ctx = {});
      ctx['continue'] = true;
      ctx['break'] = true;
      for (i$ = 0, len$ = (ref$ = this.body.lines).length; i$ < len$; ++i$) {
        node = ref$[i$];
        if (node.getJump(ctx)) {
          return node;
        }
      }
    };
    prototype.addBody = function(body){
      var top;
      this.body = body;
      top = body.lines[0];
      if ((top != null ? top.verb : void 8) === 'continue' && !top.label) {
        body.lines.length = 0;
      }
      return this;
    };
    prototype.makeReturn = function(it){
      var ref$;
      if (it) {
        this.body.makeReturn(it);
        if ((ref$ = this['else']) != null) {
          ref$.makeReturn(it);
        }
      } else {
        this.getJump() || (this.returns = true);
      }
      return this;
    };
    prototype.compileNode = function(o){
      var ref$, test, head, that;
      o.loop = true;
      this.test && (this.un
        ? this.test = this.test.invert()
        : this.anaphorize());
      if (this.post) {
        return 'do {' + this.compileBody((o.indent += TAB, o));
      }
      test = ((ref$ = this.test) != null ? ref$.compile(o, LEVEL_PAREN) : void 8) || '';
      if (!(this.update || this['else'])) {
        head = test ? "while (" + test : 'for (;;';
      } else {
        head = 'for (';
        if (this['else']) {
          head += (this.yet = o.scope.temporary('yet')) + " = true";
        }
        head += ";" + (test && ' ' + test) + ";";
        if (that = this.update) {
          head += ' ' + that.compile(o, LEVEL_PAREN);
        }
      }
      return head + ') {' + this.compileBody((o.indent += TAB, o));
    };
    prototype.compileBody = function(o){
      var lines, yet, tab, ret, code, key$, res, ref$, that;
      o['break'] = o['continue'] = true;
      lines = this.body.lines, yet = this.yet, tab = this.tab;
      code = ret = '';
      if (this.returns) {
        if (lines[key$ = lines.length - 1] != null) {
          lines[key$] = lines[key$].makeReturn(res = o.scope.assign('results$', '[]'));
        }
        ret = "\n" + tab + "return " + (res || '[]') + ";";
        if ((ref$ = this['else']) != null) {
          ref$.makeReturn();
        }
      }
      yet && lines.unshift(JS(yet + " = false;"));
      if (that = this.body.compile(o, LEVEL_TOP)) {
        code += "\n" + that + "\n" + tab;
      }
      code += '}';
      if (this.post) {
        code += " while (" + this.test.compile((o.tab = tab, o), LEVEL_PAREN) + ");";
      }
      if (yet) {
        code += " if (" + yet + ") " + this.compileBlock(o, Block(this['else']));
        o.scope.free(yet);
      }
      return code + ret;
    };
    return While;
  }(Node));
  exports.For = For = (function(superclass){
    For.displayName = 'For';
    var prototype = extend$(For, superclass).prototype, constructor = For;
    function For(it){
      importAll$(this, it);
      if (this.item instanceof Var && !this.item.value) {
        this.item = null;
      }
    }
    prototype.children = ['item', 'source', 'from', 'to', 'step', 'body'];
    prototype.aSource = null;
    prototype.show = function(){
      return this.index;
    };
    prototype.compileNode = function(o){
      var temps, idx, ref$, pvar, step, tvar, tail, vars, eq, cond, svar, srcPart, lvar, head, that, body;
      o.loop = true;
      temps = this.temps = [];
      if (idx = this.index) {
        o.scope.declare(idx, this);
      } else {
        temps.push(idx = o.scope.temporary('i'));
      }
      if (!this.object) {
        ref$ = (this.step || Literal(1)).compileLoopReference(o, 'step'), pvar = ref$[0], step = ref$[1];
        pvar === step || temps.push(pvar);
      }
      if (this.from) {
        ref$ = this.to.compileLoopReference(o, 'to'), tvar = ref$[0], tail = ref$[1];
        vars = idx + " = " + this.from.compile(o, LEVEL_LIST);
        if (tail !== tvar) {
          vars += ", " + tail;
          temps.push(tvar);
        }
        eq = this.op === 'til' ? '' : '=';
        cond = +pvar
          ? idx + " " + (pvar < 0 ? '>' : '<') + eq + " " + tvar
          : pvar + " < 0 ? " + idx + " >" + eq + " " + tvar + " : " + idx + " <" + eq + " " + tvar;
      } else {
        if (this.item || this.object && this.own) {
          ref$ = this.source.compileLoopReference(o, 'ref', !this.object), svar = ref$[0], srcPart = ref$[1];
          svar === srcPart || temps.push(svar);
        } else {
          svar = srcPart = this.source.compile(o, LEVEL_PAREN);
        }
        if (!this.object) {
          if (0 > pvar && ~~pvar === +pvar) {
            vars = idx + " = " + srcPart + ".length - 1";
            cond = idx + " >= 0";
          } else {
            temps.push(lvar = o.scope.temporary('len'));
            vars = idx + " = 0, " + lvar + " = " + srcPart + ".length";
            cond = idx + " < " + lvar;
          }
        }
      }
      this['else'] && (this.yet = o.scope.temporary('yet'));
      head = 'for (';
      if (this.object) {
        head += idx + " in ";
      }
      if (that = this.yet) {
        head += that + " = true, ";
      }
      if (this.object) {
        head += srcPart;
      } else {
        step === pvar || (vars += ', ' + step);
        head += (vars + "; " + cond + "; ") + (1 == Math.abs(pvar)
          ? (pvar < 0 ? '--' : '++') + idx
          : idx + (pvar < 0
            ? ' -= ' + pvar.slice(1)
            : ' += ' + pvar));
      }
      this.own && (head += ") if (" + o.scope.assign('own$', '{}.hasOwnProperty') + ".call(" + svar + ", " + idx + ")");
      head += ') {';
      this.infuseIIFE();
      o.indent += TAB;
      if (this.item && !this.item.isEmpty()) {
        head += '\n' + o.indent + Assign(this.item, JS(svar + "[" + idx + "]")).compile(o, LEVEL_TOP) + ';';
      }
      body = this.compileBody(o);
      if (this.item && '}' === body.charAt(0)) {
        head += '\n' + this.tab;
      }
      return head + body;
    };
    prototype.infuseIIFE = function(){
      var this$ = this;
      function dup(params, name){
        var i$, len$, p;
        if (name) {
          for (i$ = 0, len$ = params.length; i$ < len$; ++i$) {
            p = params[i$];
            if (name === p.value) {
              return true;
            }
          }
        }
      }
      this.body.traverseChildren(function(it){
        var fun, params, call, index, item, that;
        if (!(it.calling || it.op === 'new' && (fun = it.it).params)) {
          return;
        }
        if (fun) {
          it.it = Call.make((fun['void'] = true, fun));
        } else {
          fun = it.it.head;
        }
        params = fun.params;
        call = it.it.tails[0];
        if (params.length ^ call.args.length - !!call.method) {
          return;
        }
        index = this$.index, item = this$.item;
        if (index && !dup(params, index)) {
          call.args.push(params[params.length] = Var(index));
        }
        if (that = item instanceof List && item.name) {
          item = Var(that);
        }
        if (item instanceof Var && !dup(params, item.value)) {
          call.args.push(params[params.length] = item);
        }
      });
    };
    return For;
  }(While));
  exports.Try = Try = (function(superclass){
    Try.displayName = 'Try';
    var prototype = extend$(Try, superclass).prototype, constructor = Try;
    function Try(attempt, thrown, recovery, ensure){
      this.attempt = attempt;
      this.thrown = thrown;
      this.recovery = recovery;
      this.ensure = ensure;
    }
    prototype.children = ['attempt', 'recovery', 'ensure'];
    prototype.show = function(){
      return this.thrown;
    };
    prototype.isStatement = YES;
    prototype.isCallable = function(){
      var ref$;
      return ((ref$ = this.recovery) != null ? ref$.isCallable() : void 8) && this.attempt.isCallable();
    };
    prototype.getJump = function(it){
      var ref$;
      return this.attempt.getJump(it) || ((ref$ = this.recovery) != null ? ref$.getJump(it) : void 8);
    };
    prototype.makeReturn = function(it){
      this.attempt = this.attempt.makeReturn(it);
      if (this.recovery != null) {
        this.recovery = this.recovery.makeReturn(it);
      }
      return this;
    };
    prototype.compileNode = function(o){
      var code, that;
      o.indent += TAB;
      code = 'try ' + this.compileBlock(o, this.attempt);
      if (this.recovery || !this.ensure) {
        code += ' catch (e$) {';
        if (this.recovery) {
          code += '\n' + o.indent + o.scope.declare(this.thrown || 'e', this) + ' = e$;';
          if (that = this.recovery.compile(o)) {
            code += '\n' + that;
          }
          code += '\n' + this.tab;
        }
        code += '}';
      }
      if (that = this.ensure) {
        code += ' finally ' + this.compileBlock(o, that);
      }
      return code;
    };
    return Try;
  }(Node));
  exports.Switch = Switch = (function(superclass){
    Switch.displayName = 'Switch';
    var prototype = extend$(Switch, superclass).prototype, constructor = Switch;
    function Switch(topic, cases, $default){
      this.topic = topic;
      this.cases = cases;
      this['default'] = $default;
    }
    prototype.children = ['topic', 'cases', 'default'];
    prototype.aSource = 'topic';
    prototype.aTargets = ['cases'];
    prototype.isStatement = YES;
    prototype.isCallable = function(){
      var i$, ref$, len$, c;
      for (i$ = 0, len$ = (ref$ = this.cases).length; i$ < len$; ++i$) {
        c = ref$[i$];
        if (!c.isCallable()) {
          return false;
        }
      }
      return (ref$ = this['default']) != null ? ref$.isCallable() : void 8;
    };
    prototype.getJump = function(ctx){
      var i$, ref$, len$, c, that;
      ctx || (ctx = {});
      ctx['break'] = true;
      for (i$ = 0, len$ = (ref$ = this.cases).length; i$ < len$; ++i$) {
        c = ref$[i$];
        if (that = c.body.getJump(ctx)) {
          return that;
        }
      }
      return (ref$ = this['default']) != null ? ref$.getJump(ctx) : void 8;
    };
    prototype.makeReturn = function(it){
      var i$, ref$, len$, c;
      for (i$ = 0, len$ = (ref$ = this.cases).length; i$ < len$; ++i$) {
        c = ref$[i$];
        c.makeReturn(it);
      }
      if ((ref$ = this['default']) != null) {
        ref$.makeReturn(it);
      }
      return this;
    };
    prototype.compileNode = function(o){
      var tab, topic, code, stop, i, ref$, len$, c, that;
      tab = this.tab;
      topic = !!this.topic && this.anaphorize().compile(o, LEVEL_PAREN);
      code = "switch (" + topic + ") {\n";
      stop = this['default'] || this.cases.length - 1;
      o['break'] = true;
      for (i = 0, len$ = (ref$ = this.cases).length; i < len$; ++i) {
        c = ref$[i];
        code += c.compileCase(o, tab, i === stop, !topic);
      }
      if (this['default']) {
        o.indent = tab + TAB;
        if (that = this['default'].compile(o, LEVEL_TOP)) {
          code += tab + ("default:\n" + that + "\n");
        }
      }
      return code + tab + '}';
    };
    return Switch;
  }(Node));
  exports.Case = Case = (function(superclass){
    Case.displayName = 'Case';
    var prototype = extend$(Case, superclass).prototype, constructor = Case;
    function Case(tests, body){
      this.tests = tests;
      this.body = body;
    }
    prototype.children = ['tests', 'body'];
    prototype.isCallable = function(){
      return this.body.isCallable();
    };
    prototype.makeReturn = function(it){
      var ref$;
      if (((ref$ = (ref$ = this.body.lines)[ref$.length - 1]) != null ? ref$.value : void 8) !== 'fallthrough') {
        this.body.makeReturn(it);
      }
      return this;
    };
    prototype.compileCase = function(o, tab, nobr, bool){
      var res$, i$, ref$, len$, test, j$, ref1$, len1$, t, tests, i, that, code, lines, last, ft;
      res$ = [];
      for (i$ = 0, len$ = (ref$ = this.tests).length; i$ < len$; ++i$) {
        test = ref$[i$];
        test = test.expandSlice(o).unwrap();
        if (test instanceof Arr) {
          for (j$ = 0, len1$ = (ref1$ = test.items).length; j$ < len1$; ++j$) {
            t = ref1$[j$];
            res$.push(t);
          }
        } else {
          res$.push(test);
        }
      }
      tests = res$;
      tests.length || tests.push(Literal('void'));
      if (bool) {
        t = tests[0];
        i = 0;
        while (that = tests[++i]) {
          t = Binary('||', t, that);
        }
        tests = [(this.t = t, this.aSource = 't', this.aTargets = ['body'], this).anaphorize().invert()];
      }
      code = '';
      for (i$ = 0, len$ = tests.length; i$ < len$; ++i$) {
        t = tests[i$];
        code += tab + ("case " + t.compile(o, LEVEL_PAREN) + ":\n");
      }
      lines = this.body.lines;
      last = lines[lines.length - 1];
      if (ft = (last != null ? last.value : void 8) === 'fallthrough') {
        lines[lines.length - 1] = JS('// fallthrough');
      }
      o.indent = tab += TAB;
      if (that = this.body.compile(o, LEVEL_TOP)) {
        code += that + '\n';
      }
      if (!(nobr || ft || last instanceof Jump)) {
        code += tab + 'break;\n';
      }
      return code;
    };
    return Case;
  }(Node));
  exports.If = If = (function(superclass){
    If.displayName = 'If';
    var prototype = extend$(If, superclass).prototype, constructor = If;
    function If($if, then, un){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$['if'] = $if;
      this$.then = then;
      this$.un = un;
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.children = ['if', 'then', 'else'];
    prototype.aSource = 'if';
    prototype.aTargets = ['then'];
    prototype.show = function(){
      return this.un && '!';
    };
    prototype.terminator = '';
    prototype.delegate(['isCallable', 'isArray', 'isString', 'isRegex'], function(it){
      var ref$;
      return ((ref$ = this['else']) != null ? ref$[it]() : void 8) && this.then[it]();
    });
    prototype.getJump = function(it){
      var ref$;
      return this.then.getJump(it) || ((ref$ = this['else']) != null ? ref$.getJump(it) : void 8);
    };
    prototype.makeReturn = function(it){
      this.then = this.then.makeReturn(it);
      if (this['else'] != null) {
        this['else'] = this['else'].makeReturn(it);
      }
      return this;
    };
    prototype.compileNode = function(o){
      if (this.un) {
        this['if'] = this['if'].invert();
      } else {
        this.soak || this.anaphorize();
      }
      if (o.level) {
        return this.compileExpression(o);
      } else {
        return this.compileStatement(o);
      }
    };
    prototype.compileStatement = function(o){
      var code, els;
      code = "if (" + this['if'].compile(o, LEVEL_PAREN) + ") ";
      o.indent += TAB;
      code += this.compileBlock(o, Block(this.then));
      if (!(els = this['else'])) {
        return code;
      }
      return code + ' else ' + (els instanceof constructor
        ? els.compile((o.indent = this.tab, o), LEVEL_TOP)
        : this.compileBlock(o, els));
    };
    prototype.compileExpression = function(o){
      var thn, els, code, pad;
      thn = this.then, els = this['else'] || Literal('void');
      this['void'] && (thn['void'] = els['void'] = true);
      if (!this['else'] && (this.cond || this['void'])) {
        return Parens(Binary('&&', this['if'], thn)).compile(o);
      }
      code = this['if'].compile(o, LEVEL_COND);
      pad = els.isComplex() ? '\n' + (o.indent += TAB) : ' ';
      code += pad + "? " + thn.compile(o, LEVEL_LIST) + "" + pad + ": " + els.compile(o, LEVEL_LIST);
      if (o.level < LEVEL_COND) {
        return code;
      } else {
        return "(" + code + ")";
      }
    };
    If.unfoldSoak = function(o, parent, name){
      var that;
      if (that = parent[name].unfoldSoak(o)) {
        parent[name] = that.then;
        return that.cond = parent.cond, that['void'] = parent['void'], that.then = Chain(parent), that;
      }
    };
    return If;
  }(Node));
  exports.Label = Label = (function(superclass){
    Label.displayName = 'Label';
    var ref$, prototype = extend$(Label, superclass).prototype, constructor = Label;
    function Label(label, it){
      var fun;
      this.label = label || '_';
      this.it = it;
      if (fun = (it instanceof Fun || it instanceof Class) && it || it.calling && it.it.head) {
        fun.name || (fun.name = this.label, fun.labeled = true);
        return it;
      }
    }
    ref$ = Parens.prototype, prototype.children = ref$.children, prototype.isCallable = ref$.isCallable, prototype.isArray = ref$.isArray;
    prototype.show = function(){
      return this.label;
    };
    prototype.isStatement = YES;
    prototype.getJump = function(ctx){
      ctx || (ctx = {});
      (ctx.labels || (ctx.labels = [])).push(this.label);
      return this.it.getJump((ctx['break'] = true, ctx));
    };
    prototype.makeReturn = function(it){
      this.it = this.it.makeReturn(it);
      return this;
    };
    prototype.compileNode = function(o){
      var label, it, labels;
      label = this.label, it = this.it;
      labels = o.labels = slice$.call(o.labels || []);
      if (of$(label, labels)) {
        this.carp("duplicate label \"" + label + "\"");
      }
      labels.push(label);
      it.isStatement() || (it = Block(it));
      return (label + ": ") + (it instanceof Block
        ? (o.indent += TAB, this.compileBlock(o, it))
        : it.compile(o));
    };
    return Label;
  }(Node));
  exports.Cascade = Cascade = (function(superclass){
    Cascade.displayName = 'Cascade';
    var prototype = extend$(Cascade, superclass).prototype, constructor = Cascade;
    function Cascade(target, block){
      this.target = target;
      this.block = block;
    }
    prototype.children = ['target', 'block'];
    prototype.terminator = '';
    prototype.compileNode = function(o){
      var ref, t, b;
      this.temps = [ref = o.scope.temporary('x')];
      t = ref + ' = ' + this.target.compile(o, LEVEL_LIST);
      b = this.block.compile((o.cascadee = ref, o));
      if (o.level) {
        return "(" + t + ", " + b + ")";
      } else {
        return t + ";\n" + b;
      }
    };
    return Cascade;
  }(Node));
  exports.JS = JS = (function(superclass){
    JS.displayName = 'JS';
    var prototype = extend$(JS, superclass).prototype, constructor = JS;
    function JS(code, literal, comment){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.code = code;
      this$.literal = literal;
      this$.comment = comment;
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.show = function(){
      if (this.comment) {
        return this.code;
      } else {
        return "`" + this.code + "`";
      }
    };
    prototype.terminator = '';
    prototype.isAssignable = prototype.isCallable = function(){
      return !this.comment;
    };
    prototype.compile = function(it){
      if (this.literal) {
        return entab(this.code, it.indent);
      } else {
        return this.code;
      }
    };
    return JS;
  }(Node));
  exports.Util = Util = (function(superclass){
    Util.displayName = 'Util';
    var prototype = extend$(Util, superclass).prototype, constructor = Util;
    function Util(verb){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.verb = verb;
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.show = Jump.prototype.show;
    prototype.isCallable = YES;
    prototype.compile = function(){
      return util(this.verb);
    };
    Util.Extends = function(){
      return Call.make(Util('extend'), [arguments[0], arguments[1]]);
    };
    return Util;
  }(Node));
  exports.Vars = Vars = (function(superclass){
    Vars.displayName = 'Vars';
    var prototype = extend$(Vars, superclass).prototype, constructor = Vars;
    function Vars(vars){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.vars = vars;
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.children = ['vars'];
    prototype.makeReturn = THIS;
    prototype.compile = function(o, level){
      var i$, ref$, len$, v, value;
      for (i$ = 0, len$ = (ref$ = this.vars).length; i$ < len$; ++i$) {
        v = ref$[i$], value = v.value;
        if (!(v instanceof Var)) {
          v.carp('invalid variable declaration');
        }
        if (o.scope.check(value)) {
          v.carp("redeclaration of \"" + value + "\"");
        }
        o.scope.declare(value, v);
      }
      return Literal('void').compile(o, level);
    };
    return Vars;
  }(Node));
  exports.L = function(yylineno, node){
    return node.line = yylineno + 1, node;
  };
  exports.Decl = function(type, nodes, lno){
    if (!nodes[0]) {
      throw SyntaxError("empty " + type + " on line " + lno);
    }
    return DECLS[type](nodes);
  };
  DECLS = {
    'export': function(lines){
      var i, out, node, that, ref$;
      i = -1;
      out = Util('out');
      while (node = lines[++i]) {
        if (node instanceof Block) {
          lines.splice.apply(lines, [i--, 1].concat(slice$.call(node.lines)));
          continue;
        }
        if (that = node instanceof Fun && node.name) {
          lines.splice(i++, 0, Assign(Chain(out, [Index(Key(that))]), Var(that)));
          continue;
        }
        lines[i] = (that = node.varName() || node instanceof Assign && node.left.varName() || node instanceof Class && ((ref$ = node.title) != null ? ref$.varName() : void 8))
          ? Assign(Chain(out, [Index(Key(that))]), node)
          : Import(out, node);
      }
      return Block(lines);
    },
    'import': function(lines, all){
      var i, len$, line;
      for (i = 0, len$ = lines.length; i < len$; ++i) {
        line = lines[i];
        lines[i] = Import(Literal('this'), line, all);
      }
      return Block(lines);
    },
    importAll: function(it){
      return this['import'](it, true);
    },
    'const': function(lines){
      var i$, len$, node;
      for (i$ = 0, len$ = lines.length; i$ < len$; ++i$) {
        node = lines[i$];
        node.op === '=' || node.carp('invalid constant variable declaration');
        node['const'] = true;
      }
      return Block(lines);
    },
    'var': Vars
  };
  function Scope(parent, shared){
    this.parent = parent;
    this.shared = shared;
    this.variables = {};
  }
  ref$ = Scope.prototype;
  ref$.READ_ONLY = {
    'const': 'constant',
    'function': 'function',
    undefined: 'undeclared'
  };
  ref$.add = function(name, type, node){
    var t, that;
    if (node && (t = this.variables[name + "."])) {
      if (that = this.READ_ONLY[t] || this.READ_ONLY[type]) {
        node.carp("redeclaration of " + that + " \"" + name + "\"");
      } else if (t === type && type === 'arg') {
        node.carp("duplicate parameter \"" + name + "\"");
      } else if (t === 'upvar') {
        node.carp("accidental shadow of \"" + name + "\"");
      }
      if (t === 'arg' || t === 'function') {
        return name;
      }
    }
    this.variables[name + "."] = type;
    return name;
  };
  ref$.get = function(name){
    return this.variables[name + "."];
  };
  ref$.declare = function(name, node, constant){
    var that, scope;
    if (that = this.shared) {
      if (this.check(name)) {
        return;
      }
      scope = that;
    } else {
      scope = this;
    }
    return scope.add(name, constant ? 'const' : 'var', node);
  };
  ref$.assign = function(name, value){
    return this.add(name, {
      value: value
    });
  };
  ref$.temporary = function(name){
    var ref$;
    name || (name = 'ref');
    while ((ref$ = this.variables[name + "$."]) !== 'reuse' && ref$ !== void 8) {
      name = name.length < 2 && name < 'z'
        ? String.fromCharCode(name.charCodeAt() + 1)
        : name.replace(/\d*$/, fn$);
    }
    return this.add(name + '$', 'var');
    function fn$(it){
      return ++it;
    }
  };
  ref$.free = function(name){
    return this.add(name, 'reuse');
  };
  ref$.check = function(name, above){
    var type, ref$;
    if ((type = this.variables[name + "."]) || !above) {
      return type;
    }
    return (ref$ = this.parent) != null ? ref$.check(name, above) : void 8;
  };
  ref$.checkReadOnly = function(name){
    var that, ref$, key$;
    if (that = this.READ_ONLY[this.check(name, true)]) {
      return that;
    }
    (ref$ = this.variables)[key$ = name + "."] || (ref$[key$] = 'upvar');
    return '';
  };
  ref$.emit = function(code, tab){
    var vrs, asn, fun, name, ref$, type, that, val;
    vrs = [];
    asn = [];
    fun = [];
    for (name in ref$ = this.variables) {
      type = ref$[name];
      name = name.slice(0, -1);
      if (type === 'var' || type === 'const' || type === 'reuse') {
        vrs.push(name);
      } else if (that = type.value) {
        if (~(val = entab(that, tab)).lastIndexOf('function(', 0)) {
          fun.push("function " + name + val.slice(8));
        } else {
          asn.push(name + " = " + val);
        }
      }
    }
    if (that = vrs.concat(asn).join(', ')) {
      code = tab + "var " + that + ";\n" + code;
    }
    if (that = fun.join("\n" + tab)) {
      return code + "\n" + tab + that;
    } else {
      return code;
    }
  };
  function YES(){
    return true;
  }
  function NO(){
    return false;
  }
  function THIS(){
    return this;
  }
  function VOID(){}
  UTILS = {
    clone: 'function(it){\n  function fun(){} fun.prototype = it;\n  return new fun;\n}',
    extend: 'function(sub, sup){\n  function fun(){} fun.prototype = (sub.superclass = sup).prototype;\n  (sub.prototype = new fun).constructor = sub;\n  if (typeof sup.extended == \'function\') sup.extended(sub);\n  return sub;\n}',
    bind: 'function(obj, key){\n  return function(){ return obj[key].apply(obj, arguments) };\n}',
    'import': 'function(obj, src){\n  var own = {}.hasOwnProperty;\n  for (var key in src) if (own.call(src, key)) obj[key] = src[key];\n  return obj;\n}',
    importAll: 'function(obj, src){\n  for (var key in src) obj[key] = src[key];\n  return obj;\n}',
    repeatString: 'function(str, n){\n  for (var r = \'\'; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;\n  return r;\n}',
    repeatArray: 'function(arr, n){\n  for (var r = []; n > 0; (n >>= 1) && (arr = arr.concat(arr)))\n    if (n & 1) r.push.apply(r, arr);\n  return r;\n}',
    of: 'function(x, arr){\n  var i = 0, l = arr.length >>> 0;\n  while (i < l) if (x === arr[i++]) return true;\n  return false;\n}',
    out: 'typeof exports != \'undefined\' && exports || this',
    split: "''.split",
    replace: "''.replace",
    toString: '{}.toString',
    join: '[].join',
    slice: '[].slice'
  };
  LEVEL_TOP = 0;
  LEVEL_PAREN = 1;
  LEVEL_LIST = 2;
  LEVEL_COND = 3;
  LEVEL_OP = 4;
  LEVEL_CALL = 5;
  (function(){
    this['&&'] = this['||'] = 0.2;
    this['&'] = this['^'] = this['|'] = 0.3;
    this['=='] = this['!='] = this['==='] = this['!=='] = 0.4;
    this['<'] = this['>'] = this['<='] = this['>='] = this['in'] = this['instanceof'] = 0.5;
    this['<<'] = this['>>'] = this['>>>'] = 0.6;
    this['+'] = this['-'] = 0.7;
    this['*'] = this['/'] = this['%'] = 0.8;
  }.call(PREC = {
    unary: 0.9
  }));
  TAB = '  ';
  ID = /^(?!\d)[\w$\xAA-\uFFDC]+$/;
  SIMPLENUM = /^\d+$/;
  function util(it){
    return Scope.root.assign(it + '$', UTILS[it]);
  }
  function entab(code, tab){
    return code.replace(/\n/g, '\n' + tab);
  }
}.call(this, require['./ast'] = {}));
(function(exports){
  var lexer, parser;
  lexer = require('./lexer');
  parser = require('./parser').parser;
  parser.yy = require('./ast');
  parser.lexer = {
    lex: function(){
      var ref$, tag;
      ref$ = this.tokens[++this.pos] || [''], tag = ref$[0], this.yytext = ref$[1], this.yylineno = ref$[2];
      return tag;
    },
    setInput: function(it){
      this.pos = -1;
      return this.tokens = it;
    },
    upcomingInput: function(){
      return '';
    }
  };
  exports.VERSION = '0.8.2';
  exports.compile = function(code, options){
    var e, that;
    try {
      return parser.parse(lexer.lex(code)).compileRoot(options);
    } catch (e$) {
      e = e$;
      if (that = options != null ? options.filename : void 8) {
        e.message += "\nat " + that;
      }
      throw e;
    }
  };
  exports.ast = function(it){
    return parser.parse(typeof it === 'string' ? lexer.lex(it) : it);
  };
  exports.tokens = lexer.lex;
  exports.lex = function(it){
    return lexer.lex(it, {
      raw: true
    });
  };
  exports.run = function(code, options){
    var ref$;
    return Function(exports.compile(code, (ref$ = {}, import$(ref$, options), ref$.bare = true, ref$)))();
  };
  exports.tokens.rewrite = lexer.rewrite;
  importAll$(exports.ast, parser.yy);
  if (require.extensions) {
    require('./node')(exports);
  } else {
    exports.require = require;
    if ('' + this === '[object BackstagePass]') {
      this.EXPORTED_SYMBOLS = ['Coco'];
    }
  }
}.call(this, require['./coco'] = {}));
function clone$(it){
  function fun(){} fun.prototype = it;
  return new fun;
}
function of$(x, arr){
  var i = 0, l = arr.length >>> 0;
  while (i < l) if (x === arr[i++]) return true;
  return false;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function repeatString$(str, n){
  for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
  return r;
}
function importAll$(obj, src){
  for (var key in src) obj[key] = src[key];
  return obj;
}
return require['./coco']
}()
this.window && function(){
var type, sink, i$, ref$, len$, script, that;
Coco.stab = function(code, callback, filename, error){
  try {
    Coco.run(code, {
      filename: filename
    });
  } catch (e$) {
    error = e$;
  }
  return typeof callback == 'function' ? callback(error) : void 8;
};
Coco.load = function(url, callback){
  var xhr;
  xhr = new XMLHttpRequest;
  xhr.open('GET', url, true);
  if ('overrideMimeType' in xhr) {
    xhr.overrideMimeType('text/plain');
  }
  xhr.onreadystatechange = function(){
    var ref$;
    if (xhr.readyState === 4) {
      if ((ref$ = xhr.status) === 200 || ref$ === 0) {
        Coco.stab(xhr.responseText, callback, url);
      } else {
        if (typeof callback == 'function') {
          callback(Error(url + ": " + xhr.status + " " + xhr.statusText));
        }
      }
    }
  };
  xhr.send(null);
  return xhr;
};
type = /^(?:text\/|application\/)?coco$/i;
sink = function(error){
  error && setTimeout(function(){
    throw error;
  });
};
for (i$ = 0, len$ = (ref$ = document.getElementsByTagName('script')).length; i$ < len$; ++i$) {
  script = ref$[i$];
  if (type.test(script.type)) {
    if (that = script.src) {
      Coco.load(that, sink);
    } else {
      Coco.stab(script.innerHTML, sink, script.id);
    }
  }
}
}()
this.WSH    && function(){
var args, fso, i, to$, it, co, js;
args = WSH.arguments;
fso = WSH.createObject('Scripting.FileSystemObject');
for (i = 0, to$ = args.length; i < to$; ++i) {
  it = args.item(i);
  co = fso.openTextFile(it, 1).readAll();
  js = Coco.compile(co);
  fso.openTextFile(it.replace(/(?:\.co)?$/, '.js'), 2, true).write(js);
}
i || WSH.echo('Usage: coco [files]');
}()
this.Coco